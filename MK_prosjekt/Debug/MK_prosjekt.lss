
MK_prosjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003da  00804000  00001dfa  00001e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  008043da  008043da  00002268  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a84  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003485  00000000  00000000  00008f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000186b  00000000  00000000  0000c3dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  0000dc48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033ee  00000000  00000000  0000e188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fca  00000000  00000000  00011576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00012540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      6c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      70:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      74:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      78:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      7c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      80:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      84:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      88:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      8c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      90:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      94:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      98:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      9c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      ac:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      b0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      b4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      b8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      bc:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      c0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      c4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      c8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      cc:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      d0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      d4:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__vector_53>
      d8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      dc:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      e0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      e4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      e8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      ec:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      f0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      f4:	41 07       	cpc	r20, r17
      f6:	70 07       	cpc	r23, r16
      f8:	7c 07       	cpc	r23, r28
      fa:	fb 07       	cpc	r31, r27
      fc:	42 0a       	sbc	r4, r18
      fe:	f5 08       	sbc	r15, r5
     100:	bb 09       	sbc	r27, r11
     102:	ea 09       	sbc	r30, r10

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	cd bf       	out	0x3d, r28	; 61
     10c:	df e7       	ldi	r29, 0x7F	; 127
     10e:	de bf       	out	0x3e, r29	; 62

00000110 <__do_copy_data>:
     110:	13 e4       	ldi	r17, 0x43	; 67
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b0 e4       	ldi	r27, 0x40	; 64
     116:	ea ef       	ldi	r30, 0xFA	; 250
     118:	fd e1       	ldi	r31, 0x1D	; 29
     11a:	00 e0       	ldi	r16, 0x00	; 0
     11c:	0b bf       	out	0x3b, r16	; 59
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x14>
     120:	07 90       	elpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	aa 3d       	cpi	r26, 0xDA	; 218
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0x10>

0000012a <__do_clear_bss>:
     12a:	24 e4       	ldi	r18, 0x44	; 68
     12c:	aa ed       	ldi	r26, 0xDA	; 218
     12e:	b3 e4       	ldi	r27, 0x43	; 67
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	ab 36       	cpi	r26, 0x6B	; 107
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	0e 94 4d 0a 	call	0x149a	; 0x149a <main>
     13e:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <_exit>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <dutycalc>:
	return rpm;
}

void PWM_init(){
	TCA1_init();
	TCA0_init();
     146:	68 2f       	mov	r22, r24
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__floatsisf>
     152:	2a e0       	ldi	r18, 0x0A	; 10
     154:	37 ed       	ldi	r19, 0xD7	; 215
     156:	43 e2       	ldi	r20, 0x23	; 35
     158:	5c e3       	ldi	r21, 0x3C	; 60
     15a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__mulsf3>
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	4f e7       	ldi	r20, 0x7F	; 127
     164:	53 e4       	ldi	r21, 0x43	; 67
     166:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__mulsf3>
     16a:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     16e:	86 2f       	mov	r24, r22
     170:	08 95       	ret

00000172 <AnalogWrite>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	c8 2f       	mov	r28, r24
     178:	d6 2f       	mov	r29, r22
     17a:	81 11       	cpse	r24, r1
     17c:	0a c0       	rjmp	.+20     	; 0x192 <AnalogWrite+0x20>
     17e:	86 2f       	mov	r24, r22
     180:	0e 94 a3 00 	call	0x146	; 0x146 <dutycalc>
     184:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7e0a2c>
     188:	e0 e0       	ldi	r30, 0x00	; 0
     18a:	f4 e0       	ldi	r31, 0x04	; 4
     18c:	80 81       	ld	r24, Z
     18e:	84 60       	ori	r24, 0x04	; 4
     190:	80 83       	st	Z, r24
     192:	c1 30       	cpi	r28, 0x01	; 1
     194:	51 f4       	brne	.+20     	; 0x1aa <AnalogWrite+0x38>
     196:	8d 2f       	mov	r24, r29
     198:	0e 94 a3 00 	call	0x146	; 0x146 <dutycalc>
     19c:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
     1a0:	e0 e0       	ldi	r30, 0x00	; 0
     1a2:	f4 e0       	ldi	r31, 0x04	; 4
     1a4:	80 81       	ld	r24, Z
     1a6:	88 60       	ori	r24, 0x08	; 8
     1a8:	80 83       	st	Z, r24
     1aa:	c2 30       	cpi	r28, 0x02	; 2
     1ac:	51 f4       	brne	.+20     	; 0x1c2 <AnalogWrite+0x50>
     1ae:	8d 2f       	mov	r24, r29
     1b0:	0e 94 a3 00 	call	0x146	; 0x146 <dutycalc>
     1b4:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7e0a2b>
     1b8:	e0 e0       	ldi	r30, 0x00	; 0
     1ba:	f4 e0       	ldi	r31, 0x04	; 4
     1bc:	80 81       	ld	r24, Z
     1be:	80 61       	ori	r24, 0x10	; 16
     1c0:	80 83       	st	Z, r24
     1c2:	c3 30       	cpi	r28, 0x03	; 3
     1c4:	51 f4       	brne	.+20     	; 0x1da <AnalogWrite+0x68>
     1c6:	8d 2f       	mov	r24, r29
     1c8:	0e 94 a3 00 	call	0x146	; 0x146 <dutycalc>
     1cc:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7e0a2d>
     1d0:	e0 e0       	ldi	r30, 0x00	; 0
     1d2:	f4 e0       	ldi	r31, 0x04	; 4
     1d4:	80 81       	ld	r24, Z
     1d6:	80 62       	ori	r24, 0x20	; 32
     1d8:	80 83       	st	Z, r24
     1da:	c4 30       	cpi	r28, 0x04	; 4
     1dc:	51 f4       	brne	.+20     	; 0x1f2 <AnalogWrite+0x80>
     1de:	8d 2f       	mov	r24, r29
     1e0:	0e 94 a3 00 	call	0x146	; 0x146 <dutycalc>
     1e4:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <__TEXT_REGION_LENGTH__+0x7e0a6c>
     1e8:	e0 e2       	ldi	r30, 0x20	; 32
     1ea:	f4 e0       	ldi	r31, 0x04	; 4
     1ec:	80 81       	ld	r24, Z
     1ee:	84 60       	ori	r24, 0x04	; 4
     1f0:	80 83       	st	Z, r24
     1f2:	c5 30       	cpi	r28, 0x05	; 5
     1f4:	51 f4       	brne	.+20     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
     1f6:	8d 2f       	mov	r24, r29
     1f8:	0e 94 a3 00 	call	0x146	; 0x146 <dutycalc>
     1fc:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <__TEXT_REGION_LENGTH__+0x7e0a69>
     200:	e0 e2       	ldi	r30, 0x20	; 32
     202:	f4 e0       	ldi	r31, 0x04	; 4
     204:	80 81       	ld	r24, Z
     206:	88 60       	ori	r24, 0x08	; 8
     208:	80 83       	st	Z, r24
     20a:	c6 30       	cpi	r28, 0x06	; 6
     20c:	51 f4       	brne	.+20     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
     20e:	8d 2f       	mov	r24, r29
     210:	0e 94 a3 00 	call	0x146	; 0x146 <dutycalc>
     214:	80 93 6b 0a 	sts	0x0A6B, r24	; 0x800a6b <__TEXT_REGION_LENGTH__+0x7e0a6b>
     218:	e0 e2       	ldi	r30, 0x20	; 32
     21a:	f4 e0       	ldi	r31, 0x04	; 4
     21c:	80 81       	ld	r24, Z
     21e:	80 61       	ori	r24, 0x10	; 16
     220:	80 83       	st	Z, r24
     222:	c7 30       	cpi	r28, 0x07	; 7
     224:	51 f4       	brne	.+20     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
     226:	8d 2f       	mov	r24, r29
     228:	0e 94 a3 00 	call	0x146	; 0x146 <dutycalc>
     22c:	80 93 6d 0a 	sts	0x0A6D, r24	; 0x800a6d <__TEXT_REGION_LENGTH__+0x7e0a6d>
     230:	e0 e2       	ldi	r30, 0x20	; 32
     232:	f4 e0       	ldi	r31, 0x04	; 4
     234:	80 81       	ld	r24, Z
     236:	80 62       	ori	r24, 0x20	; 32
     238:	80 83       	st	Z, r24
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <Read_Tacho>:
     240:	81 11       	cpse	r24, r1
     242:	04 c0       	rjmp	.+8      	; 0x24c <Read_Tacho+0xc>
     244:	80 e4       	ldi	r24, 0x40	; 64
     246:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     24a:	29 c0       	rjmp	.+82     	; 0x29e <Read_Tacho+0x5e>
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	21 f4       	brne	.+8      	; 0x258 <Read_Tacho+0x18>
     250:	81 e4       	ldi	r24, 0x41	; 65
     252:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     256:	23 c0       	rjmp	.+70     	; 0x29e <Read_Tacho+0x5e>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	21 f4       	brne	.+8      	; 0x264 <Read_Tacho+0x24>
     25c:	82 e4       	ldi	r24, 0x42	; 66
     25e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     262:	1d c0       	rjmp	.+58     	; 0x29e <Read_Tacho+0x5e>
     264:	83 30       	cpi	r24, 0x03	; 3
     266:	21 f4       	brne	.+8      	; 0x270 <Read_Tacho+0x30>
     268:	83 e4       	ldi	r24, 0x43	; 67
     26a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     26e:	17 c0       	rjmp	.+46     	; 0x29e <Read_Tacho+0x5e>
     270:	84 30       	cpi	r24, 0x04	; 4
     272:	21 f4       	brne	.+8      	; 0x27c <Read_Tacho+0x3c>
     274:	84 e4       	ldi	r24, 0x44	; 68
     276:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     27a:	11 c0       	rjmp	.+34     	; 0x29e <Read_Tacho+0x5e>
     27c:	85 30       	cpi	r24, 0x05	; 5
     27e:	21 f4       	brne	.+8      	; 0x288 <Read_Tacho+0x48>
     280:	85 e4       	ldi	r24, 0x45	; 69
     282:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     286:	0b c0       	rjmp	.+22     	; 0x29e <Read_Tacho+0x5e>
     288:	86 30       	cpi	r24, 0x06	; 6
     28a:	21 f4       	brne	.+8      	; 0x294 <Read_Tacho+0x54>
     28c:	86 e4       	ldi	r24, 0x46	; 70
     28e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     292:	05 c0       	rjmp	.+10     	; 0x29e <Read_Tacho+0x5e>
     294:	87 30       	cpi	r24, 0x07	; 7
     296:	19 f4       	brne	.+6      	; 0x29e <Read_Tacho+0x5e>
     298:	87 e4       	ldi	r24, 0x47	; 71
     29a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__TEXT_REGION_LENGTH__+0x7e023e>
     2a4:	20 91 0c 0b 	lds	r18, 0x0B0C	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
     2a8:	30 91 0d 0b 	lds	r19, 0x0B0D	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
     2ac:	c9 01       	movw	r24, r18
     2ae:	a0 e0       	ldi	r26, 0x00	; 0
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	00 97       	sbiw	r24, 0x00	; 0
     2b4:	a1 05       	cpc	r26, r1
     2b6:	b1 05       	cpc	r27, r1
     2b8:	79 f0       	breq	.+30     	; 0x2d8 <Read_Tacho+0x98>
     2ba:	9c 01       	movw	r18, r24
     2bc:	ad 01       	movw	r20, r26
     2be:	22 0f       	add	r18, r18
     2c0:	33 1f       	adc	r19, r19
     2c2:	44 1f       	adc	r20, r20
     2c4:	55 1f       	adc	r21, r21
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	78 ed       	ldi	r23, 0xD8	; 216
     2ca:	88 eb       	ldi	r24, 0xB8	; 184
     2cc:	95 e0       	ldi	r25, 0x05	; 5
     2ce:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__udivmodsi4>
     2d2:	ca 01       	movw	r24, r20
     2d4:	b9 01       	movw	r22, r18
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <Read_Tacho+0x9e>
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	cb 01       	movw	r24, r22
     2de:	10 92 0c 0b 	sts	0x0B0C, r1	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
     2e2:	10 92 0d 0b 	sts	0x0B0D, r1	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
     2e6:	08 95       	ret

000002e8 <TCB0_init>:
	TCA1.SPLIT.CTRLB = TCA_SPLIT_LCMP2EN_bm;	//Enable low compare bits
	TCA1.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm | TCA_SPLIT_HCMP2EN_bm; //Enable High compare bits
}

void TCB0_init(){
	PORTC.DIRCLR = (1<<0);
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
	TCB0.CCMP = 0x00;
     2ee:	e0 e0       	ldi	r30, 0x00	; 0
     2f0:	fb e0       	ldi	r31, 0x0B	; 11
     2f2:	14 86       	std	Z+12, r1	; 0x0c
     2f4:	15 86       	std	Z+13, r1	; 0x0d
	TCB0.CNT = 0x00;
     2f6:	12 86       	std	Z+10, r1	; 0x0a
     2f8:	13 86       	std	Z+11, r1	; 0x0b
	TCB0.CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_DIV1_gc;
     2fa:	80 81       	ld	r24, Z
     2fc:	81 60       	ori	r24, 0x01	; 1
     2fe:	80 83       	st	Z, r24
	TCB0.CTRLB = (1<<TCB_CCMPEN_bp) | TCB_CNTMODE_FRQ_gc;
     300:	83 e1       	ldi	r24, 0x13	; 19
     302:	81 83       	std	Z+1, r24	; 0x01
	TCB0.EVCTRL |= TCB_CAPTEI_bm;
     304:	84 81       	ldd	r24, Z+4	; 0x04
     306:	81 60       	ori	r24, 0x01	; 1
     308:	84 83       	std	Z+4, r24	; 0x04
     30a:	08 95       	ret

0000030c <my_eeprom_update_byte>:
#include "myEEPROM.h"

// Write
void my_eeprom_update_byte(uint8_t adr, uint8_t value)
{
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm); //Holds the program until the NVMCTRL register is ready to receive data
     30c:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
     310:	91 fd       	sbrc	r25, 1
     312:	fc cf       	rjmp	.-8      	; 0x30c <my_eeprom_update_byte>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, 0x13);	//Sets register to Erase and Write (EEERWR) | and sets the CPU.CCP register to SPM or Allow Self-Programming
     314:	9d e9       	ldi	r25, 0x9D	; 157
     316:	23 e1       	ldi	r18, 0x13	; 19
     318:	94 bf       	out	0x34, r25	; 52
     31a:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*) (MAPPED_EEPROM_START+adr) = value;	//Writes data to EEPROM
     31e:	e8 2f       	mov	r30, r24
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	fc 5e       	subi	r31, 0xEC	; 236
     324:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, 0x00); //Sets the register back to no command (NOCMD)
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	94 bf       	out	0x34, r25	; 52
     32a:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
     32e:	08 95       	ret

00000330 <my_eeprom_update_char>:
}

void my_eeprom_update_char(uint8_t adr, uint16_t value)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	c8 2f       	mov	r28, r24
     336:	d6 2f       	mov	r29, r22
     338:	67 2f       	mov	r22, r23
	
	//Converts from uint8 to uint16
	valueHigh = (value >> 8);
	valueLow = value & 0xff;
	
	my_eeprom_update_byte(adr, valueHigh); //Sets the HIGH byte
     33a:	0e 94 86 01 	call	0x30c	; 0x30c <my_eeprom_update_byte>
	my_eeprom_update_byte((adr+1), valueLow); //Sets the LOW byte
     33e:	6d 2f       	mov	r22, r29
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	8c 0f       	add	r24, r28
     344:	0e 94 86 01 	call	0x30c	; 0x30c <my_eeprom_update_byte>
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <my_eeprom_read_byte>:

// Read from EEPROM
uint8_t my_eeprom_read_byte(uint8_t adr)
{
	uint8_t byte;
	byte = *(uint8_t*) (MAPPED_EEPROM_START+adr); // Reads value from EEPROM
     34e:	e8 2f       	mov	r30, r24
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	fc 5e       	subi	r31, 0xEC	; 236
	return byte; //Returns the read value
}
     354:	80 81       	ld	r24, Z
     356:	08 95       	ret

00000358 <my_eeprom_read_char>:

uint16_t my_eeprom_read_char(uint8_t adr)
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	d8 2f       	mov	r29, r24
	uint8_t valueHigh;
	uint8_t valueLow;
	
	valueHigh = my_eeprom_read_byte(adr); //Reads the High-byte
     35e:	0e 94 a7 01 	call	0x34e	; 0x34e <my_eeprom_read_byte>
     362:	c8 2f       	mov	r28, r24
	valueLow = my_eeprom_read_byte(adr+1); //Reads the Low-byte
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	8d 0f       	add	r24, r29
     368:	0e 94 a7 01 	call	0x34e	; 0x34e <my_eeprom_read_byte>
	
	uint16_t value;
	value = ((valueHigh << 8) | valueLow);	//Adds the values together to get a complete uint16
     36c:	2c 2f       	mov	r18, r28
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	32 2f       	mov	r19, r18
     372:	22 27       	eor	r18, r18
	
	return value; //Returns the read value
}
     374:	a9 01       	movw	r20, r18
     376:	48 2b       	or	r20, r24
     378:	ca 01       	movw	r24, r20
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <UART_Echo>:
	strcpy(TxBuffer,"Available commands:");
	UART_SendBuffer();
	UART_NewLine();
	strcpy(TxBuffer,"All, command for toggle ");
	UART_SendBuffer();
	UART_NewLine();
     380:	80 32       	cpi	r24, 0x20	; 32
     382:	10 f0       	brcs	.+4      	; 0x388 <UART_Echo+0x8>
     384:	8f 37       	cpi	r24, 0x7F	; 127
     386:	31 f4       	brne	.+12     	; 0x394 <UART_Echo+0x14>
     388:	87 30       	cpi	r24, 0x07	; 7
     38a:	21 f0       	breq	.+8      	; 0x394 <UART_Echo+0x14>
     38c:	8d 30       	cpi	r24, 0x0D	; 13
     38e:	11 f0       	breq	.+4      	; 0x394 <UART_Echo+0x14>
     390:	8a 30       	cpi	r24, 0x0A	; 10
     392:	61 f4       	brne	.+24     	; 0x3ac <UART_Echo+0x2c>
     394:	90 91 db 43 	lds	r25, 0x43DB	; 0x8043db <RingbufferFull>
     398:	99 23       	and	r25, r25
     39a:	21 f0       	breq	.+8      	; 0x3a4 <UART_Echo+0x24>
     39c:	97 e0       	ldi	r25, 0x07	; 7
     39e:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <UART_Echo+0x28>
     3a4:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     3a8:	10 92 6a 44 	sts	0x446A, r1	; 0x80446a <NoBackspace>
     3ac:	88 30       	cpi	r24, 0x08	; 8
     3ae:	11 f0       	breq	.+4      	; 0x3b4 <UART_Echo+0x34>
     3b0:	8f 37       	cpi	r24, 0x7F	; 127
     3b2:	b1 f4       	brne	.+44     	; 0x3e0 <UART_Echo+0x60>
     3b4:	20 91 dc 43 	lds	r18, 0x43DC	; 0x8043dc <RingbufferTail>
     3b8:	90 91 dd 43 	lds	r25, 0x43DD	; 0x8043dd <RingbufferHead>
     3bc:	29 13       	cpse	r18, r25
     3be:	0e c0       	rjmp	.+28     	; 0x3dc <UART_Echo+0x5c>
     3c0:	90 91 6a 44 	lds	r25, 0x446A	; 0x80446a <NoBackspace>
     3c4:	91 11       	cpse	r25, r1
     3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <UART_Echo+0x54>
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	90 93 6a 44 	sts	0x446A, r25	; 0x80446a <NoBackspace>
     3ce:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     3d2:	08 95       	ret
     3d4:	87 e0       	ldi	r24, 0x07	; 7
     3d6:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     3da:	08 95       	ret
     3dc:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     3e0:	08 95       	ret

000003e2 <SearchForCommand>:
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	1c c0       	rjmp	.+56     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3e6:	29 2f       	mov	r18, r25
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	4d e0       	ldi	r20, 0x0D	; 13
     3ec:	84 9f       	mul	r24, r20
     3ee:	f0 01       	movw	r30, r0
     3f0:	11 24       	eor	r1, r1
     3f2:	ee 58       	subi	r30, 0x8E	; 142
     3f4:	fc 4b       	sbci	r31, 0xBC	; 188
     3f6:	e2 0f       	add	r30, r18
     3f8:	f3 1f       	adc	r31, r19
     3fa:	40 81       	ld	r20, Z
     3fc:	f9 01       	movw	r30, r18
     3fe:	ed 5e       	subi	r30, 0xED	; 237
     400:	fb 4b       	sbci	r31, 0xBB	; 187
     402:	20 81       	ld	r18, Z
     404:	42 13       	cpse	r20, r18
     406:	04 c0       	rjmp	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     408:	21 11       	cpse	r18, r1
     40a:	03 c0       	rjmp	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	08 95       	ret
     410:	9d e0       	ldi	r25, 0x0D	; 13
     412:	9f 5f       	subi	r25, 0xFF	; 255
     414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	9d 30       	cpi	r25, 0x0D	; 13
     41a:	28 f3       	brcs	.-54     	; 0x3e6 <SearchForCommand+0x4>
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	88 30       	cpi	r24, 0x08	; 8
     420:	d0 f3       	brcs	.-12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	08 95       	ret

00000426 <CharInBUF>:
     426:	88 30       	cpi	r24, 0x08	; 8
     428:	11 f0       	breq	.+4      	; 0x42e <CharInBUF+0x8>
     42a:	8f 37       	cpi	r24, 0x7F	; 127
     42c:	b9 f4       	brne	.+46     	; 0x45c <CharInBUF+0x36>
     42e:	90 91 dd 43 	lds	r25, 0x43DD	; 0x8043dd <RingbufferHead>
     432:	80 91 dc 43 	lds	r24, 0x43DC	; 0x8043dc <RingbufferTail>
     436:	98 17       	cp	r25, r24
     438:	09 f4       	brne	.+2      	; 0x43c <CharInBUF+0x16>
     43a:	51 c0       	rjmp	.+162    	; 0x4de <CharInBUF+0xb8>
     43c:	80 91 dd 43 	lds	r24, 0x43DD	; 0x8043dd <RingbufferHead>
     440:	81 11       	cpse	r24, r1
     442:	04 c0       	rjmp	.+8      	; 0x44c <CharInBUF+0x26>
     444:	87 e1       	ldi	r24, 0x17	; 23
     446:	80 93 dd 43 	sts	0x43DD, r24	; 0x8043dd <RingbufferHead>
     44a:	05 c0       	rjmp	.+10     	; 0x456 <CharInBUF+0x30>
     44c:	80 91 dd 43 	lds	r24, 0x43DD	; 0x8043dd <RingbufferHead>
     450:	81 50       	subi	r24, 0x01	; 1
     452:	80 93 dd 43 	sts	0x43DD, r24	; 0x8043dd <RingbufferHead>
     456:	10 92 db 43 	sts	0x43DB, r1	; 0x8043db <RingbufferFull>
     45a:	08 95       	ret
     45c:	90 91 db 43 	lds	r25, 0x43DB	; 0x8043db <RingbufferFull>
     460:	99 23       	and	r25, r25
     462:	99 f0       	breq	.+38     	; 0x48a <CharInBUF+0x64>
     464:	20 91 dc 43 	lds	r18, 0x43DC	; 0x8043dc <RingbufferTail>
     468:	90 91 dd 43 	lds	r25, 0x43DD	; 0x8043dd <RingbufferHead>
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	29 1b       	sub	r18, r25
     470:	31 09       	sbc	r19, r1
     472:	21 30       	cpi	r18, 0x01	; 1
     474:	31 05       	cpc	r19, r1
     476:	49 f0       	breq	.+18     	; 0x48a <CharInBUF+0x64>
     478:	90 91 dd 43 	lds	r25, 0x43DD	; 0x8043dd <RingbufferHead>
     47c:	97 31       	cpi	r25, 0x17	; 23
     47e:	19 f4       	brne	.+6      	; 0x486 <CharInBUF+0x60>
     480:	90 91 dc 43 	lds	r25, 0x43DC	; 0x8043dc <RingbufferTail>
     484:	91 11       	cpse	r25, r1
     486:	10 92 db 43 	sts	0x43DB, r1	; 0x8043db <RingbufferFull>
     48a:	90 91 db 43 	lds	r25, 0x43DB	; 0x8043db <RingbufferFull>
     48e:	91 11       	cpse	r25, r1
     490:	26 c0       	rjmp	.+76     	; 0x4de <CharInBUF+0xb8>
     492:	e0 91 dd 43 	lds	r30, 0x43DD	; 0x8043dd <RingbufferHead>
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	ee 5d       	subi	r30, 0xDE	; 222
     49a:	fb 4b       	sbci	r31, 0xBB	; 187
     49c:	80 83       	st	Z, r24
     49e:	80 91 dc 43 	lds	r24, 0x43DC	; 0x8043dc <RingbufferTail>
     4a2:	20 91 dd 43 	lds	r18, 0x43DD	; 0x8043dd <RingbufferHead>
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	82 1b       	sub	r24, r18
     4aa:	91 09       	sbc	r25, r1
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	41 f0       	breq	.+16     	; 0x4c0 <CharInBUF+0x9a>
     4b0:	80 91 dd 43 	lds	r24, 0x43DD	; 0x8043dd <RingbufferHead>
     4b4:	87 31       	cpi	r24, 0x17	; 23
     4b6:	41 f4       	brne	.+16     	; 0x4c8 <CharInBUF+0xa2>
     4b8:	80 91 dc 43 	lds	r24, 0x43DC	; 0x8043dc <RingbufferTail>
     4bc:	81 11       	cpse	r24, r1
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <CharInBUF+0xa2>
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 db 43 	sts	0x43DB, r24	; 0x8043db <RingbufferFull>
     4c6:	08 95       	ret
     4c8:	80 91 dd 43 	lds	r24, 0x43DD	; 0x8043dd <RingbufferHead>
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	80 93 dd 43 	sts	0x43DD, r24	; 0x8043dd <RingbufferHead>
     4d2:	80 91 dd 43 	lds	r24, 0x43DD	; 0x8043dd <RingbufferHead>
     4d6:	88 31       	cpi	r24, 0x18	; 24
     4d8:	10 f0       	brcs	.+4      	; 0x4de <CharInBUF+0xb8>
     4da:	10 92 dd 43 	sts	0x43DD, r1	; 0x8043dd <RingbufferHead>
     4de:	08 95       	ret

000004e0 <UART_getRxBufferChar>:
     4e0:	90 91 dd 43 	lds	r25, 0x43DD	; 0x8043dd <RingbufferHead>
     4e4:	80 91 dc 43 	lds	r24, 0x43DC	; 0x8043dc <RingbufferTail>
     4e8:	98 17       	cp	r25, r24
     4ea:	91 f0       	breq	.+36     	; 0x510 <UART_getRxBufferChar+0x30>
     4ec:	e0 91 dc 43 	lds	r30, 0x43DC	; 0x8043dc <RingbufferTail>
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	ee 5d       	subi	r30, 0xDE	; 222
     4f4:	fb 4b       	sbci	r31, 0xBB	; 187
     4f6:	80 81       	ld	r24, Z
     4f8:	90 91 dc 43 	lds	r25, 0x43DC	; 0x8043dc <RingbufferTail>
     4fc:	9f 5f       	subi	r25, 0xFF	; 255
     4fe:	90 93 dc 43 	sts	0x43DC, r25	; 0x8043dc <RingbufferTail>
     502:	90 91 dc 43 	lds	r25, 0x43DC	; 0x8043dc <RingbufferTail>
     506:	98 31       	cpi	r25, 0x18	; 24
     508:	20 f0       	brcs	.+8      	; 0x512 <UART_getRxBufferChar+0x32>
     50a:	10 92 dc 43 	sts	0x43DC, r1	; 0x8043dc <RingbufferTail>
     50e:	08 95       	ret
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	08 95       	ret

00000514 <ProcessWord>:
     514:	cf 93       	push	r28
     516:	c0 e0       	ldi	r28, 0x00	; 0
     518:	15 c0       	rjmp	.+42     	; 0x544 <ProcessWord+0x30>
     51a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_getRxBufferChar>
     51e:	81 11       	cpse	r24, r1
     520:	02 c0       	rjmp	.+4      	; 0x526 <ProcessWord+0x12>
     522:	cc 23       	and	r28, r28
     524:	a9 f0       	breq	.+42     	; 0x550 <ProcessWord+0x3c>
     526:	81 32       	cpi	r24, 0x21	; 33
     528:	38 f0       	brcs	.+14     	; 0x538 <ProcessWord+0x24>
     52a:	ec 2f       	mov	r30, r28
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	ed 5e       	subi	r30, 0xED	; 237
     530:	fb 4b       	sbci	r31, 0xBB	; 187
     532:	80 83       	st	Z, r24
     534:	cf 5f       	subi	r28, 0xFF	; 255
     536:	06 c0       	rjmp	.+12     	; 0x544 <ProcessWord+0x30>
     538:	ec 2f       	mov	r30, r28
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	ed 5e       	subi	r30, 0xED	; 237
     53e:	fb 4b       	sbci	r31, 0xBB	; 187
     540:	10 82       	st	Z, r1
     542:	02 c0       	rjmp	.+4      	; 0x548 <ProcessWord+0x34>
     544:	cc 30       	cpi	r28, 0x0C	; 12
     546:	48 f3       	brcs	.-46     	; 0x51a <ProcessWord+0x6>
     548:	10 92 1f 44 	sts	0x441F, r1	; 0x80441f <ProcessedBuffer+0xc>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	01 c0       	rjmp	.+2      	; 0x552 <ProcessWord+0x3e>
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <Ringbuffer_Reset>:
     556:	10 92 dd 43 	sts	0x43DD, r1	; 0x8043dd <RingbufferHead>
     55a:	10 92 dc 43 	sts	0x43DC, r1	; 0x8043dc <RingbufferTail>
     55e:	10 92 db 43 	sts	0x43DB, r1	; 0x8043db <RingbufferFull>
     562:	08 95       	ret

00000564 <UART_SendChar>:
     564:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
     568:	95 ff       	sbrs	r25, 5
     56a:	fc cf       	rjmp	.-8      	; 0x564 <UART_SendChar>
     56c:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     570:	08 95       	ret

00000572 <UART_NewLine>:
     572:	8d e0       	ldi	r24, 0x0D	; 13
     574:	0e 94 b2 02 	call	0x564	; 0x564 <UART_SendChar>
     578:	8a e0       	ldi	r24, 0x0A	; 10
     57a:	0e 94 b2 02 	call	0x564	; 0x564 <UART_SendChar>
     57e:	08 95       	ret

00000580 <UART_SendBuffer>:
     580:	cf 93       	push	r28
     582:	c0 e0       	ldi	r28, 0x00	; 0
     584:	0a c0       	rjmp	.+20     	; 0x59a <UART_SendBuffer+0x1a>
     586:	ec 2f       	mov	r30, r28
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	e6 5c       	subi	r30, 0xC6	; 198
     58c:	fb 4b       	sbci	r31, 0xBB	; 187
     58e:	80 81       	ld	r24, Z
     590:	88 23       	and	r24, r24
     592:	29 f0       	breq	.+10     	; 0x59e <UART_SendBuffer+0x1e>
     594:	0e 94 b2 02 	call	0x564	; 0x564 <UART_SendChar>
     598:	cf 5f       	subi	r28, 0xFF	; 255
     59a:	c0 33       	cpi	r28, 0x30	; 48
     59c:	a0 f3       	brcs	.-24     	; 0x586 <UART_SendBuffer+0x6>
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <Osc_init>:
	}
}

//Change internal oscillator to 16MHz
void Osc_init(void){
	CCP = 0xD8; //Unlock protected registers, to allow change of internal oscillator
     5a2:	88 ed       	ldi	r24, 0xD8	; 216
     5a4:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_OSCHFCTRLA = (3 << CLKCTRL_FREQSEL0_bp ); //Set internal clock oscillator to 16MHz
     5a6:	8c e0       	ldi	r24, 0x0C	; 12
     5a8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     5ac:	08 95       	ret

000005ae <UART_DigitsCheck>:
	return speed;
}
int UART_DigitsCheck(void){
	int numofdigits = 0;
	
	for(int i = 0; ProcessedBuffer[i] != 0; i++){
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
		UART_SendBuffer();
	}
	return speed;
}
int UART_DigitsCheck(void){
	int numofdigits = 0;
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
	
	for(int i = 0; ProcessedBuffer[i] != 0; i++){
     5b6:	09 c0       	rjmp	.+18     	; 0x5ca <UART_DigitsCheck+0x1c>
		ProcessedBuffer[i] = ProcessedBuffer[i] - '0';
     5b8:	f9 01       	movw	r30, r18
     5ba:	ed 5e       	subi	r30, 0xED	; 237
     5bc:	fb 4b       	sbci	r31, 0xBB	; 187
     5be:	90 53       	subi	r25, 0x30	; 48
     5c0:	90 83       	st	Z, r25
		numofdigits++;
     5c2:	4f 5f       	subi	r20, 0xFF	; 255
     5c4:	5f 4f       	sbci	r21, 0xFF	; 255
	return speed;
}
int UART_DigitsCheck(void){
	int numofdigits = 0;
	
	for(int i = 0; ProcessedBuffer[i] != 0; i++){
     5c6:	2f 5f       	subi	r18, 0xFF	; 255
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	f9 01       	movw	r30, r18
     5cc:	ed 5e       	subi	r30, 0xED	; 237
     5ce:	fb 4b       	sbci	r31, 0xBB	; 187
     5d0:	90 81       	ld	r25, Z
     5d2:	91 11       	cpse	r25, r1
     5d4:	f1 cf       	rjmp	.-30     	; 0x5b8 <UART_DigitsCheck+0xa>
		ProcessedBuffer[i] = ProcessedBuffer[i] - '0';
		numofdigits++;
	}
	return numofdigits;
}
     5d6:	ca 01       	movw	r24, r20
     5d8:	08 95       	ret

000005da <UART_EchoCheck>:
		
	}
	return speed;
}
void UART_EchoCheck(void){
	if (EchoON){
     5da:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     5de:	88 23       	and	r24, r24
     5e0:	51 f0       	breq	.+20     	; 0x5f6 <UART_EchoCheck+0x1c>
		strcpy(TxBuffer,"Echo is on");
     5e2:	8b e0       	ldi	r24, 0x0B	; 11
     5e4:	ee e2       	ldi	r30, 0x2E	; 46
     5e6:	f0 e4       	ldi	r31, 0x40	; 64
     5e8:	aa e3       	ldi	r26, 0x3A	; 58
     5ea:	b4 e4       	ldi	r27, 0x44	; 68
     5ec:	01 90       	ld	r0, Z+
     5ee:	0d 92       	st	X+, r0
     5f0:	8a 95       	dec	r24
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <UART_EchoCheck+0x12>
     5f4:	08 95       	ret
		}else{
		strcpy(TxBuffer,"Echo is off");
     5f6:	8c e0       	ldi	r24, 0x0C	; 12
     5f8:	e9 e3       	ldi	r30, 0x39	; 57
     5fa:	f0 e4       	ldi	r31, 0x40	; 64
     5fc:	aa e3       	ldi	r26, 0x3A	; 58
     5fe:	b4 e4       	ldi	r27, 0x44	; 68
     600:	01 90       	ld	r0, Z+
     602:	0d 92       	st	X+, r0
     604:	8a 95       	dec	r24
     606:	e1 f7       	brne	.-8      	; 0x600 <UART_EchoCheck+0x26>
     608:	08 95       	ret

0000060a <ResetSHell>:
	}
}
void ResetSHell(){
	UART_NewLine();
     60a:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
	strcpy(TxBuffer,"Write an command: ");
     60e:	83 e1       	ldi	r24, 0x13	; 19
     610:	e5 e4       	ldi	r30, 0x45	; 69
     612:	f0 e4       	ldi	r31, 0x40	; 64
     614:	aa e3       	ldi	r26, 0x3A	; 58
     616:	b4 e4       	ldi	r27, 0x44	; 68
     618:	01 90       	ld	r0, Z+
     61a:	0d 92       	st	X+, r0
     61c:	8a 95       	dec	r24
     61e:	e1 f7       	brne	.-8      	; 0x618 <ResetSHell+0xe>
	UART_SendBuffer();
     620:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	Ringbuffer_Reset();
     624:	0e 94 ab 02 	call	0x556	; 0x556 <Ringbuffer_Reset>
	NoBackspace = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 6a 44 	sts	0x446A, r24	; 0x80446a <NoBackspace>
	RecvCommand = 0;
     62e:	10 92 de 43 	sts	0x43DE, r1	; 0x8043de <RecvCommand>
     632:	08 95       	ret

00000634 <NumCheck>:
}
int NumCheck(int num){
	int n = 0;
	
	if (!(ProcessedBuffer[num] <= 9 && ProcessedBuffer[num] >= 0)){
     634:	8d 5e       	subi	r24, 0xED	; 237
     636:	9b 4b       	sbci	r25, 0xBB	; 187
     638:	fc 01       	movw	r30, r24
     63a:	80 81       	ld	r24, Z
     63c:	8a 30       	cpi	r24, 0x0A	; 10
     63e:	80 f0       	brcs	.+32     	; 0x660 <NumCheck+0x2c>
		strcpy(TxBuffer,"Please enter a number");
     640:	86 e1       	ldi	r24, 0x16	; 22
     642:	e8 e5       	ldi	r30, 0x58	; 88
     644:	f0 e4       	ldi	r31, 0x40	; 64
     646:	aa e3       	ldi	r26, 0x3A	; 58
     648:	b4 e4       	ldi	r27, 0x44	; 68
     64a:	01 90       	ld	r0, Z+
     64c:	0d 92       	st	X+, r0
     64e:	8a 95       	dec	r24
     650:	e1 f7       	brne	.-8      	; 0x64a <NumCheck+0x16>
		UART_SendBuffer();
     652:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		UART_NewLine();
     656:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
		n = 404;
     65a:	84 e9       	ldi	r24, 0x94	; 148
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	08 95       	ret
		} else {
		n = ProcessedBuffer[num];
     660:	90 e0       	ldi	r25, 0x00	; 0
	}
	return n;
}
     662:	08 95       	ret

00000664 <UART_CheckFanInput>:
}

int UART_CheckFanInput(char digits){
	int tempspeed = 0;
	
	if(digits == 1){
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	49 f4       	brne	.+18     	; 0x67a <UART_CheckFanInput+0x16>
		n1 = NumCheck(0);
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 1a 03 	call	0x634	; 0x634 <NumCheck>
     670:	80 93 20 44 	sts	0x4420, r24	; 0x804420 <n1>
     674:	90 93 21 44 	sts	0x4421, r25	; 0x804421 <n1+0x1>
     678:	6f c0       	rjmp	.+222    	; 0x758 <UART_CheckFanInput+0xf4>
		
		tempspeed = n1;
		} else if (digits == 2) {
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	11 f5       	brne	.+68     	; 0x6c2 <UART_CheckFanInput+0x5e>
		n1 = NumCheck(0);
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 1a 03 	call	0x634	; 0x634 <NumCheck>
     686:	80 93 20 44 	sts	0x4420, r24	; 0x804420 <n1>
     68a:	90 93 21 44 	sts	0x4421, r25	; 0x804421 <n1+0x1>
		n2 = NumCheck(1);
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 1a 03 	call	0x634	; 0x634 <NumCheck>
     696:	80 93 0f 44 	sts	0x440F, r24	; 0x80440f <n2>
     69a:	90 93 10 44 	sts	0x4410, r25	; 0x804410 <n2+0x1>
		tempspeed = n1*10 + n2;
     69e:	20 91 20 44 	lds	r18, 0x4420	; 0x804420 <n1>
     6a2:	30 91 21 44 	lds	r19, 0x4421	; 0x804421 <n1+0x1>
     6a6:	a9 01       	movw	r20, r18
     6a8:	44 0f       	add	r20, r20
     6aa:	55 1f       	adc	r21, r21
     6ac:	22 0f       	add	r18, r18
     6ae:	33 1f       	adc	r19, r19
     6b0:	22 0f       	add	r18, r18
     6b2:	33 1f       	adc	r19, r19
     6b4:	22 0f       	add	r18, r18
     6b6:	33 1f       	adc	r19, r19
     6b8:	24 0f       	add	r18, r20
     6ba:	35 1f       	adc	r19, r21
     6bc:	82 0f       	add	r24, r18
     6be:	93 1f       	adc	r25, r19
     6c0:	4b c0       	rjmp	.+150    	; 0x758 <UART_CheckFanInput+0xf4>
		} else if (digits == 3){
     6c2:	83 30       	cpi	r24, 0x03	; 3
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <UART_CheckFanInput+0x64>
     6c6:	46 c0       	rjmp	.+140    	; 0x754 <UART_CheckFanInput+0xf0>
		n1 = NumCheck(0);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 1a 03 	call	0x634	; 0x634 <NumCheck>
     6d0:	80 93 20 44 	sts	0x4420, r24	; 0x804420 <n1>
     6d4:	90 93 21 44 	sts	0x4421, r25	; 0x804421 <n1+0x1>
		n2 = NumCheck(1);
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 1a 03 	call	0x634	; 0x634 <NumCheck>
     6e0:	80 93 0f 44 	sts	0x440F, r24	; 0x80440f <n2>
     6e4:	90 93 10 44 	sts	0x4410, r25	; 0x804410 <n2+0x1>
		if(n1 != 1 || n2 != 0){
     6e8:	20 91 20 44 	lds	r18, 0x4420	; 0x804420 <n1>
     6ec:	30 91 21 44 	lds	r19, 0x4421	; 0x804421 <n1+0x1>
     6f0:	21 30       	cpi	r18, 0x01	; 1
     6f2:	31 05       	cpc	r19, r1
     6f4:	11 f4       	brne	.+4      	; 0x6fa <UART_CheckFanInput+0x96>
     6f6:	89 2b       	or	r24, r25
     6f8:	e9 f0       	breq	.+58     	; 0x734 <UART_CheckFanInput+0xd0>
			strcpy(TxBuffer,"Number is greater then 100 or not a number");
     6fa:	8b e2       	ldi	r24, 0x2B	; 43
     6fc:	ee e6       	ldi	r30, 0x6E	; 110
     6fe:	f0 e4       	ldi	r31, 0x40	; 64
     700:	aa e3       	ldi	r26, 0x3A	; 58
     702:	b4 e4       	ldi	r27, 0x44	; 68
     704:	01 90       	ld	r0, Z+
     706:	0d 92       	st	X+, r0
     708:	8a 95       	dec	r24
     70a:	e1 f7       	brne	.-8      	; 0x704 <UART_CheckFanInput+0xa0>
			UART_SendBuffer();
     70c:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
			UART_NewLine();
     710:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
			strcpy(TxBuffer,"Put in a number between 0 and 100");
     714:	82 e2       	ldi	r24, 0x22	; 34
     716:	e9 e9       	ldi	r30, 0x99	; 153
     718:	f0 e4       	ldi	r31, 0x40	; 64
     71a:	aa e3       	ldi	r26, 0x3A	; 58
     71c:	b4 e4       	ldi	r27, 0x44	; 68
     71e:	01 90       	ld	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	8a 95       	dec	r24
     724:	e1 f7       	brne	.-8      	; 0x71e <UART_CheckFanInput+0xba>
			UART_SendBuffer();
     726:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
			UART_NewLine();
     72a:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
			tempspeed = 404;
     72e:	84 e9       	ldi	r24, 0x94	; 148
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	12 c0       	rjmp	.+36     	; 0x758 <UART_CheckFanInput+0xf4>
			} else {
			tempspeed = 100;
			strcpy(TxBuffer,"Argument is 100, PWM is fully on");
     734:	81 e2       	ldi	r24, 0x21	; 33
     736:	eb eb       	ldi	r30, 0xBB	; 187
     738:	f0 e4       	ldi	r31, 0x40	; 64
     73a:	aa e3       	ldi	r26, 0x3A	; 58
     73c:	b4 e4       	ldi	r27, 0x44	; 68
     73e:	01 90       	ld	r0, Z+
     740:	0d 92       	st	X+, r0
     742:	8a 95       	dec	r24
     744:	e1 f7       	brne	.-8      	; 0x73e <UART_CheckFanInput+0xda>
			UART_SendBuffer();
     746:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
			UART_NewLine();
     74a:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
			strcpy(TxBuffer,"Put in a number between 0 and 100");
			UART_SendBuffer();
			UART_NewLine();
			tempspeed = 404;
			} else {
			tempspeed = 100;
     74e:	84 e6       	ldi	r24, 0x64	; 100
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	02 c0       	rjmp	.+4      	; 0x758 <UART_CheckFanInput+0xf4>
	}
	return numofdigits;
}

int UART_CheckFanInput(char digits){
	int tempspeed = 0;
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
			strcpy(TxBuffer,"Argument is 100, PWM is fully on");
			UART_SendBuffer();
			UART_NewLine();
		}
	}
	if (tempspeed > 100){
     758:	85 36       	cpi	r24, 0x65	; 101
     75a:	91 05       	cpc	r25, r1
     75c:	dc f0       	brlt	.+54     	; 0x794 <UART_CheckFanInput+0x130>
		strcpy(TxBuffer,"Wrong Input");
     75e:	8c e0       	ldi	r24, 0x0C	; 12
     760:	ec ed       	ldi	r30, 0xDC	; 220
     762:	f0 e4       	ldi	r31, 0x40	; 64
     764:	aa e3       	ldi	r26, 0x3A	; 58
     766:	b4 e4       	ldi	r27, 0x44	; 68
     768:	01 90       	ld	r0, Z+
     76a:	0d 92       	st	X+, r0
     76c:	8a 95       	dec	r24
     76e:	e1 f7       	brne	.-8      	; 0x768 <UART_CheckFanInput+0x104>
		UART_SendBuffer();
     770:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		UART_NewLine();
     774:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
		strcpy(TxBuffer,"Try again");
     778:	8a e0       	ldi	r24, 0x0A	; 10
     77a:	e8 ee       	ldi	r30, 0xE8	; 232
     77c:	f0 e4       	ldi	r31, 0x40	; 64
     77e:	aa e3       	ldi	r26, 0x3A	; 58
     780:	b4 e4       	ldi	r27, 0x44	; 68
     782:	01 90       	ld	r0, Z+
     784:	0d 92       	st	X+, r0
     786:	8a 95       	dec	r24
     788:	e1 f7       	brne	.-8      	; 0x782 <UART_CheckFanInput+0x11e>
		UART_SendBuffer();
     78a:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		UART_NewLine();
     78e:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
     792:	04 c0       	rjmp	.+8      	; 0x79c <UART_CheckFanInput+0x138>
		} else {
		speed = tempspeed;
     794:	80 93 11 44 	sts	0x4411, r24	; 0x804411 <speed>
     798:	90 93 12 44 	sts	0x4412, r25	; 0x804412 <speed+0x1>
		
	}
	return speed;
}
     79c:	80 91 11 44 	lds	r24, 0x4411	; 0x804411 <speed>
     7a0:	90 91 12 44 	lds	r25, 0x4412	; 0x804412 <speed+0x1>
     7a4:	08 95       	ret

000007a6 <UART_FanSpeedSet>:
void Osc_init(void){
	CCP = 0xD8; //Unlock protected registers, to allow change of internal oscillator
	CLKCTRL_OSCHFCTRLA = (3 << CLKCTRL_FREQSEL0_bp ); //Set internal clock oscillator to 16MHz
}

int UART_FanSpeedSet(){
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
	int channel = 0;
	channel = ProcessedBuffer[0] - '0';
     7ae:	c0 91 13 44 	lds	r28, 0x4413	; 0x804413 <ProcessedBuffer>
     7b2:	d0 e0       	ldi	r29, 0x00	; 0
     7b4:	e0 97       	sbiw	r28, 0x30	; 48
	if(ProcessWord() != 0){
     7b6:	0e 94 8a 02 	call	0x514	; 0x514 <ProcessWord>
     7ba:	88 23       	and	r24, r24
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <UART_FanSpeedSet+0x1a>
     7be:	63 c0       	rjmp	.+198    	; 0x886 <UART_FanSpeedSet+0xe0>
		int numofdigits = 0;
		
		numofdigits = UART_DigitsCheck();
     7c0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <UART_DigitsCheck>
     7c4:	8c 01       	movw	r16, r24

		
		if (numofdigits == 1){
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	c1 f4       	brne	.+48     	; 0x7fa <UART_FanSpeedSet+0x54>
			if(ProcessedBuffer[0] == 0){
     7ca:	80 91 13 44 	lds	r24, 0x4413	; 0x804413 <ProcessedBuffer>
     7ce:	81 11       	cpse	r24, r1
     7d0:	0d c0       	rjmp	.+26     	; 0x7ec <UART_FanSpeedSet+0x46>
				strcpy(TxBuffer,"Argument is 0, PWM off, fan full power");
     7d2:	87 e2       	ldi	r24, 0x27	; 39
     7d4:	e2 ef       	ldi	r30, 0xF2	; 242
     7d6:	f0 e4       	ldi	r31, 0x40	; 64
     7d8:	aa e3       	ldi	r26, 0x3A	; 58
     7da:	b4 e4       	ldi	r27, 0x44	; 68
     7dc:	01 90       	ld	r0, Z+
     7de:	0d 92       	st	X+, r0
     7e0:	8a 95       	dec	r24
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <UART_FanSpeedSet+0x36>
				UART_SendBuffer();
     7e4:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
				UART_NewLine();
     7e8:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
			}
			speed = UART_CheckFanInput(1);
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 32 03 	call	0x664	; 0x664 <UART_CheckFanInput>
     7f2:	80 93 11 44 	sts	0x4411, r24	; 0x804411 <speed>
     7f6:	90 93 12 44 	sts	0x4412, r25	; 0x804412 <speed+0x1>
		}
		if(numofdigits == 2){
     7fa:	02 30       	cpi	r16, 0x02	; 2
     7fc:	11 05       	cpc	r17, r1
     7fe:	c9 f4       	brne	.+50     	; 0x832 <UART_FanSpeedSet+0x8c>
			if(ProcessedBuffer[0] == 0){
     800:	80 91 13 44 	lds	r24, 0x4413	; 0x804413 <ProcessedBuffer>
     804:	81 11       	cpse	r24, r1
     806:	0e c0       	rjmp	.+28     	; 0x824 <UART_FanSpeedSet+0x7e>
				strcpy(TxBuffer,"Argument can't start with 0");
     808:	8c e1       	ldi	r24, 0x1C	; 28
     80a:	e9 e1       	ldi	r30, 0x19	; 25
     80c:	f1 e4       	ldi	r31, 0x41	; 65
     80e:	aa e3       	ldi	r26, 0x3A	; 58
     810:	b4 e4       	ldi	r27, 0x44	; 68
     812:	01 90       	ld	r0, Z+
     814:	0d 92       	st	X+, r0
     816:	8a 95       	dec	r24
     818:	e1 f7       	brne	.-8      	; 0x812 <UART_FanSpeedSet+0x6c>
				UART_SendBuffer();
     81a:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
				UART_NewLine();
     81e:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
     822:	07 c0       	rjmp	.+14     	; 0x832 <UART_FanSpeedSet+0x8c>
				} else {
				
				speed = UART_CheckFanInput(2);
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	0e 94 32 03 	call	0x664	; 0x664 <UART_CheckFanInput>
     82a:	80 93 11 44 	sts	0x4411, r24	; 0x804411 <speed>
     82e:	90 93 12 44 	sts	0x4412, r25	; 0x804412 <speed+0x1>
				
			}
		}
		if(numofdigits == 3){
     832:	03 30       	cpi	r16, 0x03	; 3
     834:	11 05       	cpc	r17, r1
     836:	39 f4       	brne	.+14     	; 0x846 <UART_FanSpeedSet+0xa0>
			speed = UART_CheckFanInput(3);
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	0e 94 32 03 	call	0x664	; 0x664 <UART_CheckFanInput>
     83e:	80 93 11 44 	sts	0x4411, r24	; 0x804411 <speed>
     842:	90 93 12 44 	sts	0x4412, r25	; 0x804412 <speed+0x1>
			
		}
		sprintf(TxBuffer,"Fan %u",channel);
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	85 e3       	ldi	r24, 0x35	; 53
     84c:	91 e4       	ldi	r25, 0x41	; 65
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	8a e3       	ldi	r24, 0x3A	; 58
     854:	94 e4       	ldi	r25, 0x44	; 68
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	0e 94 1e 0c 	call	0x183c	; 0x183c <sprintf>
		UART_SendBuffer();
     85e:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		strcpy(TxBuffer," written to: ");
     862:	8e e0       	ldi	r24, 0x0E	; 14
     864:	ec e3       	ldi	r30, 0x3C	; 60
     866:	f1 e4       	ldi	r31, 0x41	; 65
     868:	aa e3       	ldi	r26, 0x3A	; 58
     86a:	b4 e4       	ldi	r27, 0x44	; 68
     86c:	01 90       	ld	r0, Z+
     86e:	0d 92       	st	X+, r0
     870:	8a 95       	dec	r24
     872:	e1 f7       	brne	.-8      	; 0x86c <UART_FanSpeedSet+0xc6>
		UART_SendBuffer();
     874:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0b c0       	rjmp	.+22     	; 0x89c <UART_FanSpeedSet+0xf6>

		} else {
		strcpy(TxBuffer,"No number argument");
     886:	83 e1       	ldi	r24, 0x13	; 19
     888:	ea e4       	ldi	r30, 0x4A	; 74
     88a:	f1 e4       	ldi	r31, 0x41	; 65
     88c:	aa e3       	ldi	r26, 0x3A	; 58
     88e:	b4 e4       	ldi	r27, 0x44	; 68
     890:	01 90       	ld	r0, Z+
     892:	0d 92       	st	X+, r0
     894:	8a 95       	dec	r24
     896:	e1 f7       	brne	.-8      	; 0x890 <UART_FanSpeedSet+0xea>
		UART_SendBuffer();
     898:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	}
	return speed;
}
     89c:	80 91 11 44 	lds	r24, 0x4411	; 0x804411 <speed>
     8a0:	90 91 12 44 	lds	r25, 0x4412	; 0x804412 <speed+0x1>
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	08 95       	ret

000008ae <UART_TitleAll>:
	//SECOND ROW
	UART_Row(1,5);
}

void UART_TitleAll(void){
	UART_NewLine();
     8ae:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
	strcpy(TxBuffer,"  TACHO - VALUES   |");
     8b2:	85 e1       	ldi	r24, 0x15	; 21
     8b4:	ed e5       	ldi	r30, 0x5D	; 93
     8b6:	f1 e4       	ldi	r31, 0x41	; 65
     8b8:	aa e3       	ldi	r26, 0x3A	; 58
     8ba:	b4 e4       	ldi	r27, 0x44	; 68
     8bc:	01 90       	ld	r0, Z+
     8be:	0d 92       	st	X+, r0
     8c0:	8a 95       	dec	r24
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <UART_TitleAll+0xe>
	UART_SendBuffer();
     8c4:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	strcpy(TxBuffer,"      ALL FANS      |");
     8c8:	86 e1       	ldi	r24, 0x16	; 22
     8ca:	e2 e7       	ldi	r30, 0x72	; 114
     8cc:	f1 e4       	ldi	r31, 0x41	; 65
     8ce:	aa e3       	ldi	r26, 0x3A	; 58
     8d0:	b4 e4       	ldi	r27, 0x44	; 68
     8d2:	01 90       	ld	r0, Z+
     8d4:	0d 92       	st	X+, r0
     8d6:	8a 95       	dec	r24
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <UART_TitleAll+0x24>
	UART_SendBuffer();
     8da:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	UART_NewLine();
     8de:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
	UART_NewLine();
     8e2:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
     8e6:	08 95       	ret

000008e8 <Tacho_filter>:
		}
		UART_NewLine();
	}
	UART_NewLine();
}
int Tacho_filter(char ch){ //Need too "filter" out the first value since the first reading is always wrong
     8e8:	cf 93       	push	r28
     8ea:	c8 2f       	mov	r28, r24
	uint32_t filter_val = 0;
	filter_val = Read_Tacho(ch);
     8ec:	0e 94 20 01 	call	0x240	; 0x240 <Read_Tacho>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f0:	8f e3       	ldi	r24, 0x3F	; 63
     8f2:	9c e9       	ldi	r25, 0x9C	; 156
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <Tacho_filter+0xc>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <Tacho_filter+0x12>
     8fa:	00 00       	nop
	_delay_ms(40);
	filter_val = Read_Tacho(ch);
     8fc:	8c 2f       	mov	r24, r28
     8fe:	0e 94 20 01 	call	0x240	; 0x240 <Read_Tacho>
	return filter_val;
}
     902:	cb 01       	movw	r24, r22
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <UART_ReadChannel>:
		} else {
		n = ProcessedBuffer[num];
	}
	return n;
}
void UART_ReadChannel(char ch){
     908:	af 92       	push	r10
     90a:	bf 92       	push	r11
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	d8 2e       	mov	r13, r24
	uint32_t tacho = 0;
	int count = 0;
	int left_shift = 0;
	int right_shift = 0;
	
	tacho = Tacho_filter(ch);
     91c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Tacho_filter>
     920:	9c 01       	movw	r18, r24
     922:	99 0f       	add	r25, r25
     924:	44 0b       	sbc	r20, r20
     926:	55 0b       	sbc	r21, r21
	}
	return n;
}
void UART_ReadChannel(char ch){
	uint32_t tacho = 0;
	int count = 0;
     928:	c0 e0       	ldi	r28, 0x00	; 0
     92a:	d0 e0       	ldi	r29, 0x00	; 0
	int right_shift = 0;
	
	tacho = Tacho_filter(ch);

	//Function for finding the length of an integer
	while(tacho!=0) //Run until tacho value is zero
     92c:	09 c0       	rjmp	.+18     	; 0x940 <UART_ReadChannel+0x38>
	{
		tacho=tacho/10; //divide until tacho is 0,....
     92e:	ca 01       	movw	r24, r20
     930:	b9 01       	movw	r22, r18
     932:	2a e0       	ldi	r18, 0x0A	; 10
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__udivmodsi4>
		count++;		//Count for each round to get the length
     93e:	21 96       	adiw	r28, 0x01	; 1
	int right_shift = 0;
	
	tacho = Tacho_filter(ch);

	//Function for finding the length of an integer
	while(tacho!=0) //Run until tacho value is zero
     940:	21 15       	cp	r18, r1
     942:	31 05       	cpc	r19, r1
     944:	41 05       	cpc	r20, r1
     946:	51 05       	cpc	r21, r1
     948:	91 f7       	brne	.-28     	; 0x92e <UART_ReadChannel+0x26>
		tacho=tacho/10; //divide until tacho is 0,....
		count++;		//Count for each round to get the length
	}
	
	//Title
	if(count == 0){
     94a:	20 97       	sbiw	r28, 0x00	; 0
     94c:	29 f4       	brne	.+10     	; 0x958 <UART_ReadChannel+0x50>
		left_shift = count;
		right_shift = left_shift + 1;
     94e:	5e 01       	movw	r10, r28
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	a8 1a       	sub	r10, r24
     954:	b8 0a       	sbc	r11, r24
     956:	05 c0       	rjmp	.+10     	; 0x962 <UART_ReadChannel+0x5a>
	}
	else {
		left_shift = (count-3);
		right_shift = left_shift + 2;
     958:	5e 01       	movw	r10, r28
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	a9 1a       	sub	r10, r25
     95e:	b1 08       	sbc	r11, r1
	if(count == 0){
		left_shift = count;
		right_shift = left_shift + 1;
	}
	else {
		left_shift = (count-3);
     960:	23 97       	sbiw	r28, 0x03	; 3
		right_shift = left_shift + 2;
	}
	UART_NewLine();
     962:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
	for(int k = 0; k <= (left_shift);k++ ){
     966:	00 e0       	ldi	r16, 0x00	; 0
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	0a c0       	rjmp	.+20     	; 0x980 <UART_ReadChannel+0x78>
		
		strcpy(TxBuffer," ");
     96c:	80 e2       	ldi	r24, 0x20	; 32
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	80 93 3a 44 	sts	0x443A, r24	; 0x80443a <TxBuffer>
     974:	90 93 3b 44 	sts	0x443B, r25	; 0x80443b <TxBuffer+0x1>
		UART_SendBuffer();
     978:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	else {
		left_shift = (count-3);
		right_shift = left_shift + 2;
	}
	UART_NewLine();
	for(int k = 0; k <= (left_shift);k++ ){
     97c:	0f 5f       	subi	r16, 0xFF	; 255
     97e:	1f 4f       	sbci	r17, 0xFF	; 255
     980:	c0 17       	cp	r28, r16
     982:	d1 07       	cpc	r29, r17
     984:	9c f7       	brge	.-26     	; 0x96c <UART_ReadChannel+0x64>
		
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	strcpy(TxBuffer," TACHO - VALUES");
     986:	80 e1       	ldi	r24, 0x10	; 16
     988:	e8 e8       	ldi	r30, 0x88	; 136
     98a:	f1 e4       	ldi	r31, 0x41	; 65
     98c:	aa e3       	ldi	r26, 0x3A	; 58
     98e:	b4 e4       	ldi	r27, 0x44	; 68
     990:	01 90       	ld	r0, Z+
     992:	0d 92       	st	X+, r0
     994:	8a 95       	dec	r24
     996:	e1 f7       	brne	.-8      	; 0x990 <UART_ReadChannel+0x88>
	UART_SendBuffer();
     998:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	for(int k = 0; k <= right_shift;k++ ){
     99c:	00 e0       	ldi	r16, 0x00	; 0
     99e:	10 e0       	ldi	r17, 0x00	; 0
     9a0:	0a c0       	rjmp	.+20     	; 0x9b6 <UART_ReadChannel+0xae>
		
		strcpy(TxBuffer," ");
     9a2:	80 e2       	ldi	r24, 0x20	; 32
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	80 93 3a 44 	sts	0x443A, r24	; 0x80443a <TxBuffer>
     9aa:	90 93 3b 44 	sts	0x443B, r25	; 0x80443b <TxBuffer+0x1>
		UART_SendBuffer();
     9ae:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		UART_SendBuffer();
		
	}
	strcpy(TxBuffer," TACHO - VALUES");
	UART_SendBuffer();
	for(int k = 0; k <= right_shift;k++ ){
     9b2:	0f 5f       	subi	r16, 0xFF	; 255
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
     9b6:	a0 16       	cp	r10, r16
     9b8:	b1 06       	cpc	r11, r17
     9ba:	9c f7       	brge	.-26     	; 0x9a2 <UART_ReadChannel+0x9a>
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	
	strcpy(TxBuffer,"|");
     9bc:	8c e7       	ldi	r24, 0x7C	; 124
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	80 93 3a 44 	sts	0x443A, r24	; 0x80443a <TxBuffer>
     9c4:	90 93 3b 44 	sts	0x443B, r25	; 0x80443b <TxBuffer+0x1>
	UART_SendBuffer();
     9c8:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	UART_NewLine();
     9cc:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
	for(int k = 0; k <= left_shift;k++ ){
     9d0:	00 e0       	ldi	r16, 0x00	; 0
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	0a c0       	rjmp	.+20     	; 0x9ea <UART_ReadChannel+0xe2>
		
		strcpy(TxBuffer," ");
     9d6:	80 e2       	ldi	r24, 0x20	; 32
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	80 93 3a 44 	sts	0x443A, r24	; 0x80443a <TxBuffer>
     9de:	90 93 3b 44 	sts	0x443B, r25	; 0x80443b <TxBuffer+0x1>
		UART_SendBuffer();
     9e2:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	}
	
	strcpy(TxBuffer,"|");
	UART_SendBuffer();
	UART_NewLine();
	for(int k = 0; k <= left_shift;k++ ){
     9e6:	0f 5f       	subi	r16, 0xFF	; 255
     9e8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ea:	c0 17       	cp	r28, r16
     9ec:	d1 07       	cpc	r29, r17
     9ee:	9c f7       	brge	.-26     	; 0x9d6 <UART_ReadChannel+0xce>
		
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	strcpy(TxBuffer,"  FAN CHANNEL ");
     9f0:	ca e3       	ldi	r28, 0x3A	; 58
     9f2:	d4 e4       	ldi	r29, 0x44	; 68
     9f4:	8f e0       	ldi	r24, 0x0F	; 15
     9f6:	e8 e9       	ldi	r30, 0x98	; 152
     9f8:	f1 e4       	ldi	r31, 0x41	; 65
     9fa:	de 01       	movw	r26, r28
     9fc:	01 90       	ld	r0, Z+
     9fe:	0d 92       	st	X+, r0
     a00:	8a 95       	dec	r24
     a02:	e1 f7       	brne	.-8      	; 0x9fc <UART_ReadChannel+0xf4>
	UART_SendBuffer();
     a04:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	sprintf(TxBuffer,"%u",ch);
     a08:	ed 2c       	mov	r14, r13
     a0a:	f1 2c       	mov	r15, r1
     a0c:	1f 92       	push	r1
     a0e:	df 92       	push	r13
     a10:	89 e3       	ldi	r24, 0x39	; 57
     a12:	91 e4       	ldi	r25, 0x41	; 65
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	df 93       	push	r29
     a1a:	cf 93       	push	r28
     a1c:	0e 94 1e 0c 	call	0x183c	; 0x183c <sprintf>
	UART_SendBuffer();
     a20:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	
	for(int k = 0; k <= right_shift;k++ ){
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	c0 e0       	ldi	r28, 0x00	; 0
     a32:	d0 e0       	ldi	r29, 0x00	; 0
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <UART_ReadChannel+0x140>
		
		strcpy(TxBuffer," ");
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	80 93 3a 44 	sts	0x443A, r24	; 0x80443a <TxBuffer>
     a3e:	90 93 3b 44 	sts	0x443B, r25	; 0x80443b <TxBuffer+0x1>
		UART_SendBuffer();
     a42:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	strcpy(TxBuffer,"  FAN CHANNEL ");
	UART_SendBuffer();
	sprintf(TxBuffer,"%u",ch);
	UART_SendBuffer();
	
	for(int k = 0; k <= right_shift;k++ ){
     a46:	21 96       	adiw	r28, 0x01	; 1
     a48:	ac 16       	cp	r10, r28
     a4a:	bd 06       	cpc	r11, r29
     a4c:	a4 f7       	brge	.-24     	; 0xa36 <UART_ReadChannel+0x12e>
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	
	strcpy(TxBuffer,"|");
     a4e:	8c e7       	ldi	r24, 0x7C	; 124
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	80 93 3a 44 	sts	0x443A, r24	; 0x80443a <TxBuffer>
     a56:	90 93 3b 44 	sts	0x443B, r25	; 0x80443b <TxBuffer+0x1>
	UART_SendBuffer();
     a5a:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	UART_NewLine();
     a5e:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
	for(int loop = 0; loop < 11; loop++){
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	42 c0       	rjmp	.+132    	; 0xaec <UART_ReadChannel+0x1e4>
		
		strcpy(TxBuffer,"Channel ");
     a68:	ca e3       	ldi	r28, 0x3A	; 58
     a6a:	d4 e4       	ldi	r29, 0x44	; 68
     a6c:	89 e0       	ldi	r24, 0x09	; 9
     a6e:	e7 ea       	ldi	r30, 0xA7	; 167
     a70:	f1 e4       	ldi	r31, 0x41	; 65
     a72:	de 01       	movw	r26, r28
     a74:	01 90       	ld	r0, Z+
     a76:	0d 92       	st	X+, r0
     a78:	8a 95       	dec	r24
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <UART_ReadChannel+0x16c>
		UART_SendBuffer();
     a7c:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		sprintf(TxBuffer,"%u",ch);
     a80:	ff 92       	push	r15
     a82:	ef 92       	push	r14
     a84:	89 e3       	ldi	r24, 0x39	; 57
     a86:	91 e4       	ldi	r25, 0x41	; 65
     a88:	9f 93       	push	r25
     a8a:	8f 93       	push	r24
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	0e 94 1e 0c 	call	0x183c	; 0x183c <sprintf>
		UART_SendBuffer();
     a94:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		strcpy(TxBuffer," value: ");
     a98:	89 e0       	ldi	r24, 0x09	; 9
     a9a:	e0 eb       	ldi	r30, 0xB0	; 176
     a9c:	f1 e4       	ldi	r31, 0x41	; 65
     a9e:	de 01       	movw	r26, r28
     aa0:	01 90       	ld	r0, Z+
     aa2:	0d 92       	st	X+, r0
     aa4:	8a 95       	dec	r24
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <UART_ReadChannel+0x198>
		UART_SendBuffer();
     aa8:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		tacho = Read_Tacho(ch);
     aac:	8d 2d       	mov	r24, r13
     aae:	0e 94 20 01 	call	0x240	; 0x240 <Read_Tacho>
		sprintf(TxBuffer,"%lu",tacho);
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	7f 93       	push	r23
     ab8:	6f 93       	push	r22
     aba:	89 eb       	ldi	r24, 0xB9	; 185
     abc:	91 e4       	ldi	r25, 0x41	; 65
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	0e 94 1e 0c 	call	0x183c	; 0x183c <sprintf>
		UART_SendBuffer();
     aca:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		strcpy(TxBuffer,"|");
     ace:	8c e7       	ldi	r24, 0x7C	; 124
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	88 83       	st	Y, r24
     ad4:	99 83       	std	Y+1, r25	; 0x01
		UART_SendBuffer();
     ad6:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		UART_NewLine();
     ada:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
	}
	
	strcpy(TxBuffer,"|");
	UART_SendBuffer();
	UART_NewLine();
	for(int loop = 0; loop < 11; loop++){
     ade:	0f 5f       	subi	r16, 0xFF	; 255
     ae0:	1f 4f       	sbci	r17, 0xFF	; 255
     ae2:	8d b7       	in	r24, 0x3d	; 61
     ae4:	9e b7       	in	r25, 0x3e	; 62
     ae6:	0e 96       	adiw	r24, 0x0e	; 14
     ae8:	8d bf       	out	0x3d, r24	; 61
     aea:	9e bf       	out	0x3e, r25	; 62
     aec:	0b 30       	cpi	r16, 0x0B	; 11
     aee:	11 05       	cpc	r17, r1
     af0:	0c f4       	brge	.+2      	; 0xaf4 <UART_ReadChannel+0x1ec>
     af2:	ba cf       	rjmp	.-140    	; 0xa68 <UART_ReadChannel+0x160>
		UART_NewLine();
		
	}
	
	
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	bf 90       	pop	r11
     b04:	af 90       	pop	r10
     b06:	08 95       	ret

00000b08 <UART_Row>:
	UART_SendBuffer();
	UART_NewLine();
	UART_NewLine();
}

void UART_Row(char row, char numofsamples){
     b08:	5f 92       	push	r5
     b0a:	6f 92       	push	r6
     b0c:	7f 92       	push	r7
     b0e:	8f 92       	push	r8
     b10:	9f 92       	push	r9
     b12:	af 92       	push	r10
     b14:	bf 92       	push	r11
     b16:	cf 92       	push	r12
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	68 2e       	mov	r6, r24
     b28:	56 2e       	mov	r5, r22
	uint32_t tacho = 0;
	for(int ch = 0; ch <= 3; ch++){
     b2a:	c0 e0       	ldi	r28, 0x00	; 0
     b2c:	d0 e0       	ldi	r29, 0x00	; 0
     b2e:	0c c0       	rjmp	.+24     	; 0xb48 <UART_Row+0x40>
		strcpy(TxBuffer,"-------------------- ");
     b30:	86 e1       	ldi	r24, 0x16	; 22
     b32:	ed eb       	ldi	r30, 0xBD	; 189
     b34:	f1 e4       	ldi	r31, 0x41	; 65
     b36:	aa e3       	ldi	r26, 0x3A	; 58
     b38:	b4 e4       	ldi	r27, 0x44	; 68
     b3a:	01 90       	ld	r0, Z+
     b3c:	0d 92       	st	X+, r0
     b3e:	8a 95       	dec	r24
     b40:	e1 f7       	brne	.-8      	; 0xb3a <UART_Row+0x32>
		UART_SendBuffer();
     b42:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
	UART_NewLine();
}

void UART_Row(char row, char numofsamples){
	uint32_t tacho = 0;
	for(int ch = 0; ch <= 3; ch++){
     b46:	21 96       	adiw	r28, 0x01	; 1
     b48:	c4 30       	cpi	r28, 0x04	; 4
     b4a:	d1 05       	cpc	r29, r1
     b4c:	8c f3       	brlt	.-30     	; 0xb30 <UART_Row+0x28>
		strcpy(TxBuffer,"-------------------- ");
		UART_SendBuffer();
	}
	UART_NewLine();
     b4e:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
	row = row*5-(row-1);
     b52:	66 0c       	add	r6, r6
     b54:	66 0c       	add	r6, r6
     b56:	63 94       	inc	r6
	for(int ch = 0+row; ch <= 3+row; ch++){
     b58:	71 2c       	mov	r7, r1
     b5a:	e3 01       	movw	r28, r6
     b5c:	29 c0       	rjmp	.+82     	; 0xbb0 <UART_Row+0xa8>
		
		strcpy(TxBuffer,"Channel ");
     b5e:	0a e3       	ldi	r16, 0x3A	; 58
     b60:	14 e4       	ldi	r17, 0x44	; 68
     b62:	89 e0       	ldi	r24, 0x09	; 9
     b64:	e7 ea       	ldi	r30, 0xA7	; 167
     b66:	f1 e4       	ldi	r31, 0x41	; 65
     b68:	d8 01       	movw	r26, r16
     b6a:	01 90       	ld	r0, Z+
     b6c:	0d 92       	st	X+, r0
     b6e:	8a 95       	dec	r24
     b70:	e1 f7       	brne	.-8      	; 0xb6a <UART_Row+0x62>
		UART_SendBuffer();
     b72:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		sprintf(TxBuffer,"%u",ch);
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	89 e3       	ldi	r24, 0x39	; 57
     b7c:	91 e4       	ldi	r25, 0x41	; 65
     b7e:	9f 93       	push	r25
     b80:	8f 93       	push	r24
     b82:	1f 93       	push	r17
     b84:	0f 93       	push	r16
     b86:	0e 94 1e 0c 	call	0x183c	; 0x183c <sprintf>
		UART_SendBuffer();
     b8a:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		strcpy(TxBuffer,"          | ");
     b8e:	8d e0       	ldi	r24, 0x0D	; 13
     b90:	e3 ed       	ldi	r30, 0xD3	; 211
     b92:	f1 e4       	ldi	r31, 0x41	; 65
     b94:	d8 01       	movw	r26, r16
     b96:	01 90       	ld	r0, Z+
     b98:	0d 92       	st	X+, r0
     b9a:	8a 95       	dec	r24
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <UART_Row+0x8e>
		UART_SendBuffer();
     b9e:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		strcpy(TxBuffer,"-------------------- ");
		UART_SendBuffer();
	}
	UART_NewLine();
	row = row*5-(row-1);
	for(int ch = 0+row; ch <= 3+row; ch++){
     ba2:	21 96       	adiw	r28, 0x01	; 1
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	73 01       	movw	r14, r6
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	e8 0e       	add	r14, r24
     bb6:	f1 1c       	adc	r15, r1
     bb8:	ec 16       	cp	r14, r28
     bba:	fd 06       	cpc	r15, r29
     bbc:	84 f6       	brge	.-96     	; 0xb5e <UART_Row+0x56>
		sprintf(TxBuffer,"%u",ch);
		UART_SendBuffer();
		strcpy(TxBuffer,"          | ");
		UART_SendBuffer();
	}
	UART_NewLine();
     bbe:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
	for(int samples = 0; samples < numofsamples; samples++){
     bc2:	c1 2c       	mov	r12, r1
     bc4:	d1 2c       	mov	r13, r1
     bc6:	53 c0       	rjmp	.+166    	; 0xc6e <UART_Row+0x166>
		for(int ch = 0+row; ch <= 3+row;ch++){
			strcpy(TxBuffer,"Channel ");
     bc8:	ca e3       	ldi	r28, 0x3A	; 58
     bca:	d4 e4       	ldi	r29, 0x44	; 68
     bcc:	89 e0       	ldi	r24, 0x09	; 9
     bce:	e7 ea       	ldi	r30, 0xA7	; 167
     bd0:	f1 e4       	ldi	r31, 0x41	; 65
     bd2:	de 01       	movw	r26, r28
     bd4:	01 90       	ld	r0, Z+
     bd6:	0d 92       	st	X+, r0
     bd8:	8a 95       	dec	r24
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <UART_Row+0xcc>
			UART_SendBuffer();
     bdc:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
			sprintf(TxBuffer,"%u",ch);
     be0:	1f 93       	push	r17
     be2:	0f 93       	push	r16
     be4:	89 e3       	ldi	r24, 0x39	; 57
     be6:	91 e4       	ldi	r25, 0x41	; 65
     be8:	9f 93       	push	r25
     bea:	8f 93       	push	r24
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	0e 94 1e 0c 	call	0x183c	; 0x183c <sprintf>
			UART_SendBuffer();
     bf4:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
			tacho = Tacho_filter(ch);
     bf8:	80 2f       	mov	r24, r16
     bfa:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Tacho_filter>
     bfe:	4c 01       	movw	r8, r24
     c00:	99 0f       	add	r25, r25
     c02:	aa 08       	sbc	r10, r10
     c04:	bb 08       	sbc	r11, r11
			strcpy(TxBuffer," value: ");
     c06:	89 e0       	ldi	r24, 0x09	; 9
     c08:	e0 eb       	ldi	r30, 0xB0	; 176
     c0a:	f1 e4       	ldi	r31, 0x41	; 65
     c0c:	de 01       	movw	r26, r28
     c0e:	01 90       	ld	r0, Z+
     c10:	0d 92       	st	X+, r0
     c12:	8a 95       	dec	r24
     c14:	e1 f7       	brne	.-8      	; 0xc0e <UART_Row+0x106>
			UART_SendBuffer();
     c16:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
			sprintf(TxBuffer,"%lu",tacho);
     c1a:	bf 92       	push	r11
     c1c:	af 92       	push	r10
     c1e:	9f 92       	push	r9
     c20:	8f 92       	push	r8
     c22:	89 eb       	ldi	r24, 0xB9	; 185
     c24:	91 e4       	ldi	r25, 0x41	; 65
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	0e 94 1e 0c 	call	0x183c	; 0x183c <sprintf>
			UART_SendBuffer();
     c32:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
			strcpy(TxBuffer," | ");
     c36:	80 e2       	ldi	r24, 0x20	; 32
     c38:	9c e7       	ldi	r25, 0x7C	; 124
     c3a:	88 83       	st	Y, r24
     c3c:	99 83       	std	Y+1, r25	; 0x01
     c3e:	80 e2       	ldi	r24, 0x20	; 32
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	8a 83       	std	Y+2, r24	; 0x02
     c44:	9b 83       	std	Y+3, r25	; 0x03
			UART_SendBuffer();
     c46:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		strcpy(TxBuffer,"          | ");
		UART_SendBuffer();
	}
	UART_NewLine();
	for(int samples = 0; samples < numofsamples; samples++){
		for(int ch = 0+row; ch <= 3+row;ch++){
     c4a:	0f 5f       	subi	r16, 0xFF	; 255
     c4c:	1f 4f       	sbci	r17, 0xFF	; 255
     c4e:	8d b7       	in	r24, 0x3d	; 61
     c50:	9e b7       	in	r25, 0x3e	; 62
     c52:	0e 96       	adiw	r24, 0x0e	; 14
     c54:	8d bf       	out	0x3d, r24	; 61
     c56:	9e bf       	out	0x3e, r25	; 62
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <UART_Row+0x154>
     c5a:	83 01       	movw	r16, r6
     c5c:	e0 16       	cp	r14, r16
     c5e:	f1 06       	cpc	r15, r17
     c60:	0c f0       	brlt	.+2      	; 0xc64 <UART_Row+0x15c>
     c62:	b2 cf       	rjmp	.-156    	; 0xbc8 <UART_Row+0xc0>
			sprintf(TxBuffer,"%lu",tacho);
			UART_SendBuffer();
			strcpy(TxBuffer," | ");
			UART_SendBuffer();
		}
		UART_NewLine();
     c64:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
		UART_SendBuffer();
		strcpy(TxBuffer,"          | ");
		UART_SendBuffer();
	}
	UART_NewLine();
	for(int samples = 0; samples < numofsamples; samples++){
     c68:	9f ef       	ldi	r25, 0xFF	; 255
     c6a:	c9 1a       	sub	r12, r25
     c6c:	d9 0a       	sbc	r13, r25
     c6e:	85 2d       	mov	r24, r5
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	c8 16       	cp	r12, r24
     c74:	d9 06       	cpc	r13, r25
     c76:	8c f3       	brlt	.-30     	; 0xc5a <UART_Row+0x152>
			strcpy(TxBuffer," | ");
			UART_SendBuffer();
		}
		UART_NewLine();
	}
	UART_NewLine();
     c78:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	9f 90       	pop	r9
     c92:	8f 90       	pop	r8
     c94:	7f 90       	pop	r7
     c96:	6f 90       	pop	r6
     c98:	5f 90       	pop	r5
     c9a:	08 95       	ret

00000c9c <UART_ReadAll>:
	
}

void UART_ReadAll(void){
	//Title
	UART_TitleAll();
     c9c:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_TitleAll>
	//FIRST ROW
	UART_Row(0,5);
     ca0:	65 e0       	ldi	r22, 0x05	; 5
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 84 05 	call	0xb08	; 0xb08 <UART_Row>
	//SECOND ROW
	UART_Row(1,5);
     ca8:	65 e0       	ldi	r22, 0x05	; 5
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 84 05 	call	0xb08	; 0xb08 <UART_Row>
     cb0:	08 95       	ret

00000cb2 <UART3_init>:
	/*Calculating the baudrate from the formula in datasheet.
	The register is 16 bit therfore uint16_t*/
	const uint16_t BAUD_rate = (uint16_t) (F_CPU*64/(16*UART_bps));
	
	//Set the baudrate to the UART3.BAUD register
	USART3.BAUD = BAUD_rate;
     cb2:	e0 e6       	ldi	r30, 0x60	; 96
     cb4:	f8 e0       	ldi	r31, 0x08	; 8
     cb6:	82 e8       	ldi	r24, 0x82	; 130
     cb8:	96 e0       	ldi	r25, 0x06	; 6
     cba:	80 87       	std	Z+8, r24	; 0x08
     cbc:	91 87       	std	Z+9, r25	; 0x09
	
	//Setting up PB0(TxD)
	//Set PB0 to TxD, PB1 to RxD, PB2 to XCK and PB3 as XDIR
	PORTMUX.USARTROUTEA = PORTMUX_USART3_DEFAULT_gc;
     cbe:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7e05e2>
	//Set PB0 to output
	PORTB.DIR |= (1 << TxD);
     cc2:	a0 e2       	ldi	r26, 0x20	; 32
     cc4:	b4 e0       	ldi	r27, 0x04	; 4
     cc6:	8c 91       	ld	r24, X
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	8c 93       	st	X, r24

	//Enable RxD interrupt
	USART3.CTRLA = (1 << USART_RXCIE_bp);
     ccc:	80 e8       	ldi	r24, 0x80	; 128
     cce:	85 83       	std	Z+5, r24	; 0x05
	
	//Enable RxD and TxD
	USART3.CTRLB = (1 << USART_RXEN_bp) | (1 << USART_TXEN_bp);
     cd0:	80 ec       	ldi	r24, 0xC0	; 192
     cd2:	86 83       	std	Z+6, r24	; 0x06
	
	//Setting frame format and modes | Asynchronus (UART) | Disable Parity bit | Set 1 stop bit | Rx/Tx-Data size 8-bit
	USART3.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	87 83       	std	Z+7, r24	; 0x07
	
	USART3.CTRLD = USART_ABW_WDW0_gc;
     cd8:	12 86       	std	Z+10, r1	; 0x0a
     cda:	08 95       	ret

00000cdc <ISR_Func>:
}

void ISR_Func(void){
     cdc:	cf 93       	push	r28
	uint8_t recvbyte = UART_RX_BUFFER;
     cde:	c0 91 60 08 	lds	r28, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
	static uint8_t lastbyte = 0;			//Static does that the variable not initialize more then one time
	switch(recvbyte){						//Switch case for checking the incoming for bytes
     ce2:	ca 30       	cpi	r28, 0x0A	; 10
     ce4:	51 f0       	breq	.+20     	; 0xcfa <ISR_Func+0x1e>
     ce6:	cd 30       	cpi	r28, 0x0D	; 13
     ce8:	61 f0       	breq	.+24     	; 0xd02 <ISR_Func+0x26>
     cea:	c1 11       	cpse	r28, r1
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <ISR_Func+0x2c>
		case(0):
		EchoON = ~EchoON;					//If case is 0, toggle EchoON
     cee:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     cf2:	80 95       	com	r24
     cf4:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
		break;								//Exit loop
     cf8:	0a c0       	rjmp	.+20     	; 0xd0e <ISR_Func+0x32>
		case(LF):
		if (lastbyte == CR){				//ignore LF if last byte was CR
     cfa:	80 91 da 43 	lds	r24, 0x43DA	; 0x8043da <__data_end>
     cfe:	8d 30       	cpi	r24, 0x0D	; 13
     d00:	31 f0       	breq	.+12     	; 0xd0e <ISR_Func+0x32>
			break;							//Exit loop, since we ignore it
		}
		case(CR):							//When CR(or keyboard <enter>) is reachieved, the command can be run
		RecvCommand = 1;					//The received command flag is raised, so the process with perform task is started
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 de 43 	sts	0x43DE, r24	; 0x8043de <RecvCommand>
		default:							//If no cases are true, the defaults run | default case dont need any break to exit
		CharInBUF(recvbyte);				//Character is put in the buffer, through CharINBUF();
     d08:	8c 2f       	mov	r24, r28
     d0a:	0e 94 13 02 	call	0x426	; 0x426 <CharInBUF>
	}
	if(EchoON && TxBufferFlag){				//Checks if echo is on and tx-buffer is ready to receive data
     d0e:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     d12:	88 23       	and	r24, r24
     d14:	39 f0       	breq	.+14     	; 0xd24 <ISR_Func+0x48>
     d16:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
     d1a:	85 ff       	sbrs	r24, 5
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <ISR_Func+0x48>
		UART_Echo(recvbyte);				//Sends echo to the terminal via tx-buffer
     d1e:	8c 2f       	mov	r24, r28
     d20:	0e 94 c0 01 	call	0x380	; 0x380 <UART_Echo>
	}
	lastbyte = recvbyte;					//Saves the received byte to lastbyte for next round
     d24:	c0 93 da 43 	sts	0x43DA, r28	; 0x8043da <__data_end>
}
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <TxBuffer_StringWrite>:



void TxBuffer_StringWrite(char* buf, char* str){
	strcpy(buf,str);
     d2c:	0e 94 17 0c 	call	0x182e	; 0x182e <strcpy>
	UART_SendBuffer();
     d30:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
     d34:	08 95       	ret

00000d36 <AllON>:
		}
	}
	return 0; //Process done
}

void AllON(void){
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
	for(int i = 0; i < 8; i++){
     d3a:	c0 e0       	ldi	r28, 0x00	; 0
     d3c:	d0 e0       	ldi	r29, 0x00	; 0
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <AllON+0x14>
		AnalogWrite(i,0);
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	8c 2f       	mov	r24, r28
     d44:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
	}
	return 0; //Process done
}

void AllON(void){
	for(int i = 0; i < 8; i++){
     d48:	21 96       	adiw	r28, 0x01	; 1
     d4a:	c8 30       	cpi	r28, 0x08	; 8
     d4c:	d1 05       	cpc	r29, r1
     d4e:	c4 f3       	brlt	.-16     	; 0xd40 <AllON+0xa>
		AnalogWrite(i,0);
	}
	TxBuffer_StringWrite(TxBuffer,"PWM off all fans, fans full power");
     d50:	60 ee       	ldi	r22, 0xE0	; 224
     d52:	71 e4       	ldi	r23, 0x41	; 65
     d54:	8a e3       	ldi	r24, 0x3A	; 58
     d56:	94 e4       	ldi	r25, 0x44	; 68
     d58:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <AllOFF>:
void AllOFF(void){
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
	for(int j = 0; j < 8; j++){
     d66:	c0 e0       	ldi	r28, 0x00	; 0
     d68:	d0 e0       	ldi	r29, 0x00	; 0
     d6a:	05 c0       	rjmp	.+10     	; 0xd76 <AllOFF+0x14>
		AnalogWrite(j,100);
     d6c:	64 e6       	ldi	r22, 0x64	; 100
     d6e:	8c 2f       	mov	r24, r28
     d70:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
		AnalogWrite(i,0);
	}
	TxBuffer_StringWrite(TxBuffer,"PWM off all fans, fans full power");
}
void AllOFF(void){
	for(int j = 0; j < 8; j++){
     d74:	21 96       	adiw	r28, 0x01	; 1
     d76:	c8 30       	cpi	r28, 0x08	; 8
     d78:	d1 05       	cpc	r29, r1
     d7a:	c4 f3       	brlt	.-16     	; 0xd6c <AllOFF+0xa>
		AnalogWrite(j,100);
	}
	TxBuffer_StringWrite(TxBuffer,"PWM fully on all fans, fans off");
     d7c:	62 e0       	ldi	r22, 0x02	; 2
     d7e:	72 e4       	ldi	r23, 0x42	; 66
     d80:	8a e3       	ldi	r24, 0x3A	; 58
     d82:	94 e4       	ldi	r25, 0x44	; 68
     d84:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <TxBuffer_IntWrite>:
	strcpy(buf,str);
	UART_SendBuffer();
}

void TxBuffer_IntWrite(char* buf, int data){
	sprintf(buf,"%u",data);
     d8e:	7f 93       	push	r23
     d90:	6f 93       	push	r22
     d92:	29 e3       	ldi	r18, 0x39	; 57
     d94:	31 e4       	ldi	r19, 0x41	; 65
     d96:	3f 93       	push	r19
     d98:	2f 93       	push	r18
     d9a:	9f 93       	push	r25
     d9c:	8f 93       	push	r24
     d9e:	0e 94 1e 0c 	call	0x183c	; 0x183c <sprintf>
	UART_SendBuffer();
     da2:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	08 95       	ret

00000db4 <Buffer_init>:

void Buffer_init(void){
	RxBuffer[0] = 0; //Setting stopbit of Rxbuffer
     db4:	10 92 22 44 	sts	0x4422, r1	; 0x804422 <RxBuffer>
     db8:	08 95       	ret

00000dba <EchoToggle>:
}

void EchoToggle(void){
	if (strcmp(ProcessedBuffer,"on")==0){
     dba:	67 e2       	ldi	r22, 0x27	; 39
     dbc:	72 e4       	ldi	r23, 0x42	; 66
     dbe:	83 e1       	ldi	r24, 0x13	; 19
     dc0:	94 e4       	ldi	r25, 0x44	; 68
     dc2:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     dc6:	89 2b       	or	r24, r25
     dc8:	79 f4       	brne	.+30     	; 0xde8 <EchoToggle+0x2e>
		EchoON = ~0;
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
		strcpy(TxBuffer,"Echo on");
     dd0:	88 e0       	ldi	r24, 0x08	; 8
     dd2:	e2 e2       	ldi	r30, 0x22	; 34
     dd4:	f2 e4       	ldi	r31, 0x42	; 66
     dd6:	aa e3       	ldi	r26, 0x3A	; 58
     dd8:	b4 e4       	ldi	r27, 0x44	; 68
     dda:	01 90       	ld	r0, Z+
     ddc:	0d 92       	st	X+, r0
     dde:	8a 95       	dec	r24
     de0:	e1 f7       	brne	.-8      	; 0xdda <EchoToggle+0x20>
		UART_SendBuffer();
     de2:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
     de6:	08 95       	ret
		
	}
	else if (strcmp(ProcessedBuffer,"off")==0){
     de8:	6f e2       	ldi	r22, 0x2F	; 47
     dea:	72 e4       	ldi	r23, 0x42	; 66
     dec:	83 e1       	ldi	r24, 0x13	; 19
     dee:	94 e4       	ldi	r25, 0x44	; 68
     df0:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     df4:	89 2b       	or	r24, r25
     df6:	71 f4       	brne	.+28     	; 0xe14 <EchoToggle+0x5a>
		EchoON = 0;
     df8:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
		strcpy(TxBuffer,"Echo off");
     dfc:	89 e0       	ldi	r24, 0x09	; 9
     dfe:	ea e2       	ldi	r30, 0x2A	; 42
     e00:	f2 e4       	ldi	r31, 0x42	; 66
     e02:	aa e3       	ldi	r26, 0x3A	; 58
     e04:	b4 e4       	ldi	r27, 0x44	; 68
     e06:	01 90       	ld	r0, Z+
     e08:	0d 92       	st	X+, r0
     e0a:	8a 95       	dec	r24
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <EchoToggle+0x4c>
		UART_SendBuffer();
     e0e:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
     e12:	08 95       	ret
		
		} else {
		strcpy(TxBuffer,"echo with incorrect syntax ");
     e14:	8c e1       	ldi	r24, 0x1C	; 28
     e16:	e3 e3       	ldi	r30, 0x33	; 51
     e18:	f2 e4       	ldi	r31, 0x42	; 66
     e1a:	aa e3       	ldi	r26, 0x3A	; 58
     e1c:	b4 e4       	ldi	r27, 0x44	; 68
     e1e:	01 90       	ld	r0, Z+
     e20:	0d 92       	st	X+, r0
     e22:	8a 95       	dec	r24
     e24:	e1 f7       	brne	.-8      	; 0xe1e <EchoToggle+0x64>
		UART_SendBuffer();
     e26:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		strcpy(TxBuffer,ProcessedBuffer);
     e2a:	63 e1       	ldi	r22, 0x13	; 19
     e2c:	74 e4       	ldi	r23, 0x44	; 68
     e2e:	8a e3       	ldi	r24, 0x3A	; 58
     e30:	94 e4       	ldi	r25, 0x44	; 68
     e32:	0e 94 17 0c 	call	0x182e	; 0x182e <strcpy>
		UART_SendBuffer();
     e36:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
		UART_NewLine();
     e3a:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
     e3e:	08 95       	ret

00000e40 <UART_MENU>:
char ProcessedBuffer[MaxWordLength + 1]; //Adds place for "stop-bit" (Null-charachter)

const char commandArray[NoOfCommands][MaxCommandLength] = {"all","echo","read","fan","help","save","reset_eeprom","trend_data"};
enum commands{commandAll=1,commandEcho,commandRead,commandFanControll,commandHelp,commandSave,commandResetEEPROM,commandTrendData};
int mainmenu  = 1;
void UART_MENU(void){
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
	// If echo is on, and the ASCII character is higher than 31, or Bell, Carriage Return, Line Feed or backspace, then echo the character. Other are filtered as to not get strange behavior from Putty.
	if (RecvCommand) {
     e50:	80 91 de 43 	lds	r24, 0x43DE	; 0x8043de <RecvCommand>
     e54:	88 23       	and	r24, r24
     e56:	09 f4       	brne	.+2      	; 0xe5a <UART_MENU+0x1a>
     e58:	17 c3       	rjmp	.+1582   	; 0x1488 <UART_MENU+0x648>

		UART_NewLine();
     e5a:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>

		if (ProcessWord() != 0) {
     e5e:	0e 94 8a 02 	call	0x514	; 0x514 <ProcessWord>
     e62:	88 23       	and	r24, r24
     e64:	09 f4       	brne	.+2      	; 0xe68 <UART_MENU+0x28>
     e66:	0e c3       	rjmp	.+1564   	; 0x1484 <UART_MENU+0x644>
			switch (SearchForCommand()){
     e68:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SearchForCommand>
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	31 97       	sbiw	r30, 0x01	; 1
     e72:	e8 30       	cpi	r30, 0x08	; 8
     e74:	f1 05       	cpc	r31, r1
     e76:	08 f0       	brcs	.+2      	; 0xe7a <UART_MENU+0x3a>
     e78:	ff c2       	rjmp	.+1534   	; 0x1478 <UART_MENU+0x638>
     e7a:	e6 58       	subi	r30, 0x86	; 134
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__tablejump2__>
				case commandAll:
				if (ProcessWord() == 0){
     e82:	0e 94 8a 02 	call	0x514	; 0x514 <ProcessWord>
     e86:	81 11       	cpse	r24, r1
     e88:	0c c0       	rjmp	.+24     	; 0xea2 <UART_MENU+0x62>
					strcpy(TxBuffer,"All command with no arguments");
     e8a:	8e e1       	ldi	r24, 0x1E	; 30
     e8c:	ef e4       	ldi	r30, 0x4F	; 79
     e8e:	f2 e4       	ldi	r31, 0x42	; 66
     e90:	aa e3       	ldi	r26, 0x3A	; 58
     e92:	b4 e4       	ldi	r27, 0x44	; 68
     e94:	01 90       	ld	r0, Z+
     e96:	0d 92       	st	X+, r0
     e98:	8a 95       	dec	r24
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <UART_MENU+0x54>
					UART_SendBuffer();
     e9c:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
     ea0:	f1 c2       	rjmp	.+1506   	; 0x1484 <UART_MENU+0x644>
					}else{
					if (strcmp(ProcessedBuffer,"on")==0){
     ea2:	67 e2       	ldi	r22, 0x27	; 39
     ea4:	72 e4       	ldi	r23, 0x42	; 66
     ea6:	83 e1       	ldi	r24, 0x13	; 19
     ea8:	94 e4       	ldi	r25, 0x44	; 68
     eaa:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     eae:	89 2b       	or	r24, r25
     eb0:	19 f4       	brne	.+6      	; 0xeb8 <UART_MENU+0x78>
						AllON();
     eb2:	0e 94 9b 06 	call	0xd36	; 0xd36 <AllON>
						break;
     eb6:	e6 c2       	rjmp	.+1484   	; 0x1484 <UART_MENU+0x644>
					}
					if (strcmp(ProcessedBuffer,"off")==0){
     eb8:	6f e2       	ldi	r22, 0x2F	; 47
     eba:	72 e4       	ldi	r23, 0x42	; 66
     ebc:	83 e1       	ldi	r24, 0x13	; 19
     ebe:	94 e4       	ldi	r25, 0x44	; 68
     ec0:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     ec4:	89 2b       	or	r24, r25
     ec6:	19 f4       	brne	.+6      	; 0xece <UART_MENU+0x8e>
						AllOFF();
     ec8:	0e 94 b1 06 	call	0xd62	; 0xd62 <AllOFF>
						break;
     ecc:	db c2       	rjmp	.+1462   	; 0x1484 <UART_MENU+0x644>
					}
					TxBuffer_StringWrite(TxBuffer,"All command with incorrect syntax");
     ece:	6d e6       	ldi	r22, 0x6D	; 109
     ed0:	72 e4       	ldi	r23, 0x42	; 66
     ed2:	8a e3       	ldi	r24, 0x3A	; 58
     ed4:	94 e4       	ldi	r25, 0x44	; 68
     ed6:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
					UART_NewLine();
     eda:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
     ede:	d2 c2       	rjmp	.+1444   	; 0x1484 <UART_MENU+0x644>
				}
				break;
				
				case commandEcho:
				if (ProcessWord() == 0){
     ee0:	0e 94 8a 02 	call	0x514	; 0x514 <ProcessWord>
     ee4:	81 11       	cpse	r24, r1
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <UART_MENU+0xb2>
					
					UART_EchoCheck();
     ee8:	0e 94 ed 02 	call	0x5da	; 0x5da <UART_EchoCheck>
					UART_SendBuffer();
     eec:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
     ef0:	c9 c2       	rjmp	.+1426   	; 0x1484 <UART_MENU+0x644>
					}else{
					EchoToggle();
     ef2:	0e 94 dd 06 	call	0xdba	; 0xdba <EchoToggle>
     ef6:	c6 c2       	rjmp	.+1420   	; 0x1484 <UART_MENU+0x644>
				}
				break;

				case commandRead:
				if (ProcessWord() == 0){
     ef8:	0e 94 8a 02 	call	0x514	; 0x514 <ProcessWord>
     efc:	81 11       	cpse	r24, r1
     efe:	07 c0       	rjmp	.+14     	; 0xf0e <UART_MENU+0xce>
					TxBuffer_StringWrite(TxBuffer, "Read command with no arguments");
     f00:	6f e8       	ldi	r22, 0x8F	; 143
     f02:	72 e4       	ldi	r23, 0x42	; 66
     f04:	8a e3       	ldi	r24, 0x3A	; 58
     f06:	94 e4       	ldi	r25, 0x44	; 68
     f08:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
     f0c:	bb c2       	rjmp	.+1398   	; 0x1484 <UART_MENU+0x644>
					}else{
					if(strcmp(ProcessedBuffer, "0") == 0){
     f0e:	63 e3       	ldi	r22, 0x33	; 51
     f10:	71 e4       	ldi	r23, 0x41	; 65
     f12:	83 e1       	ldi	r24, 0x13	; 19
     f14:	94 e4       	ldi	r25, 0x44	; 68
     f16:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     f1a:	89 2b       	or	r24, r25
     f1c:	21 f4       	brne	.+8      	; 0xf26 <UART_MENU+0xe6>
						UART_ReadChannel(0);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	0e 94 84 04 	call	0x908	; 0x908 <UART_ReadChannel>
						break;
     f24:	af c2       	rjmp	.+1374   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "1") == 0){
     f26:	6e ea       	ldi	r22, 0xAE	; 174
     f28:	72 e4       	ldi	r23, 0x42	; 66
     f2a:	83 e1       	ldi	r24, 0x13	; 19
     f2c:	94 e4       	ldi	r25, 0x44	; 68
     f2e:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     f32:	89 2b       	or	r24, r25
     f34:	21 f4       	brne	.+8      	; 0xf3e <UART_MENU+0xfe>
						UART_ReadChannel(1);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 84 04 	call	0x908	; 0x908 <UART_ReadChannel>
						break;
     f3c:	a3 c2       	rjmp	.+1350   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "2") == 0){
     f3e:	60 eb       	ldi	r22, 0xB0	; 176
     f40:	72 e4       	ldi	r23, 0x42	; 66
     f42:	83 e1       	ldi	r24, 0x13	; 19
     f44:	94 e4       	ldi	r25, 0x44	; 68
     f46:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     f4a:	89 2b       	or	r24, r25
     f4c:	21 f4       	brne	.+8      	; 0xf56 <UART_MENU+0x116>
						UART_ReadChannel(2);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	0e 94 84 04 	call	0x908	; 0x908 <UART_ReadChannel>
						break;
     f54:	97 c2       	rjmp	.+1326   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "3") == 0){
     f56:	62 eb       	ldi	r22, 0xB2	; 178
     f58:	72 e4       	ldi	r23, 0x42	; 66
     f5a:	83 e1       	ldi	r24, 0x13	; 19
     f5c:	94 e4       	ldi	r25, 0x44	; 68
     f5e:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     f62:	89 2b       	or	r24, r25
     f64:	21 f4       	brne	.+8      	; 0xf6e <UART_MENU+0x12e>
						UART_ReadChannel(3);
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	0e 94 84 04 	call	0x908	; 0x908 <UART_ReadChannel>
						break;
     f6c:	8b c2       	rjmp	.+1302   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "4") == 0){
     f6e:	64 eb       	ldi	r22, 0xB4	; 180
     f70:	72 e4       	ldi	r23, 0x42	; 66
     f72:	83 e1       	ldi	r24, 0x13	; 19
     f74:	94 e4       	ldi	r25, 0x44	; 68
     f76:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     f7a:	89 2b       	or	r24, r25
     f7c:	21 f4       	brne	.+8      	; 0xf86 <UART_MENU+0x146>
						UART_ReadChannel(4);
     f7e:	84 e0       	ldi	r24, 0x04	; 4
     f80:	0e 94 84 04 	call	0x908	; 0x908 <UART_ReadChannel>
						break;
     f84:	7f c2       	rjmp	.+1278   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "5") == 0){
     f86:	66 eb       	ldi	r22, 0xB6	; 182
     f88:	72 e4       	ldi	r23, 0x42	; 66
     f8a:	83 e1       	ldi	r24, 0x13	; 19
     f8c:	94 e4       	ldi	r25, 0x44	; 68
     f8e:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     f92:	89 2b       	or	r24, r25
     f94:	21 f4       	brne	.+8      	; 0xf9e <UART_MENU+0x15e>
						UART_ReadChannel(5);
     f96:	85 e0       	ldi	r24, 0x05	; 5
     f98:	0e 94 84 04 	call	0x908	; 0x908 <UART_ReadChannel>
						break;
     f9c:	73 c2       	rjmp	.+1254   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "6") == 0){
     f9e:	68 eb       	ldi	r22, 0xB8	; 184
     fa0:	72 e4       	ldi	r23, 0x42	; 66
     fa2:	83 e1       	ldi	r24, 0x13	; 19
     fa4:	94 e4       	ldi	r25, 0x44	; 68
     fa6:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     faa:	89 2b       	or	r24, r25
     fac:	21 f4       	brne	.+8      	; 0xfb6 <UART_MENU+0x176>
						UART_ReadChannel(6);
     fae:	86 e0       	ldi	r24, 0x06	; 6
     fb0:	0e 94 84 04 	call	0x908	; 0x908 <UART_ReadChannel>
						break;
     fb4:	67 c2       	rjmp	.+1230   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "7") == 0){
     fb6:	6a eb       	ldi	r22, 0xBA	; 186
     fb8:	72 e4       	ldi	r23, 0x42	; 66
     fba:	83 e1       	ldi	r24, 0x13	; 19
     fbc:	94 e4       	ldi	r25, 0x44	; 68
     fbe:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     fc2:	89 2b       	or	r24, r25
     fc4:	21 f4       	brne	.+8      	; 0xfce <UART_MENU+0x18e>
						UART_ReadChannel(7);
     fc6:	87 e0       	ldi	r24, 0x07	; 7
     fc8:	0e 94 84 04 	call	0x908	; 0x908 <UART_ReadChannel>
						break;
     fcc:	5b c2       	rjmp	.+1206   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "all") == 0){
     fce:	6c eb       	ldi	r22, 0xBC	; 188
     fd0:	72 e4       	ldi	r23, 0x42	; 66
     fd2:	83 e1       	ldi	r24, 0x13	; 19
     fd4:	94 e4       	ldi	r25, 0x44	; 68
     fd6:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
     fda:	89 2b       	or	r24, r25
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <UART_MENU+0x1a4>
						UART_ReadAll();
     fde:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_ReadAll>
						break;
     fe2:	50 c2       	rjmp	.+1184   	; 0x1484 <UART_MENU+0x644>
					}
					else{
						TxBuffer_StringWrite(TxBuffer,"Read with incorrect syntax");
     fe4:	60 ec       	ldi	r22, 0xC0	; 192
     fe6:	72 e4       	ldi	r23, 0x42	; 66
     fe8:	8a e3       	ldi	r24, 0x3A	; 58
     fea:	94 e4       	ldi	r25, 0x44	; 68
     fec:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
						UART_NewLine();
     ff0:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
     ff4:	47 c2       	rjmp	.+1166   	; 0x1484 <UART_MENU+0x644>
					}
				}
				break;
				
				case commandFanControll:
				if (ProcessWord() == 0){
     ff6:	0e 94 8a 02 	call	0x514	; 0x514 <ProcessWord>
     ffa:	81 11       	cpse	r24, r1
     ffc:	07 c0       	rjmp	.+14     	; 0x100c <UART_MENU+0x1cc>
					TxBuffer_StringWrite(TxBuffer,"Fan command with no arguments");
     ffe:	6b ed       	ldi	r22, 0xDB	; 219
    1000:	72 e4       	ldi	r23, 0x42	; 66
    1002:	8a e3       	ldi	r24, 0x3A	; 58
    1004:	94 e4       	ldi	r25, 0x44	; 68
    1006:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
    100a:	3c c2       	rjmp	.+1144   	; 0x1484 <UART_MENU+0x644>
					}else{
					
					if(strcmp(ProcessedBuffer, "0") == 0){
    100c:	63 e3       	ldi	r22, 0x33	; 51
    100e:	71 e4       	ldi	r23, 0x41	; 65
    1010:	83 e1       	ldi	r24, 0x13	; 19
    1012:	94 e4       	ldi	r25, 0x44	; 68
    1014:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
    1018:	89 2b       	or	r24, r25
    101a:	99 f4       	brne	.+38     	; 0x1042 <UART_MENU+0x202>
						speedch0 = UART_FanSpeedSet();
    101c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_FanSpeedSet>
    1020:	80 93 0d 44 	sts	0x440D, r24	; 0x80440d <speedch0>
    1024:	90 93 0e 44 	sts	0x440E, r25	; 0x80440e <speedch0+0x1>
						AnalogWrite(0, speedch0);
    1028:	68 2f       	mov	r22, r24
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch0);
    1030:	60 91 0d 44 	lds	r22, 0x440D	; 0x80440d <speedch0>
    1034:	70 91 0e 44 	lds	r23, 0x440E	; 0x80440e <speedch0+0x1>
    1038:	8a e3       	ldi	r24, 0x3A	; 58
    103a:	94 e4       	ldi	r25, 0x44	; 68
    103c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
						break;
    1040:	21 c2       	rjmp	.+1090   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "1") == 0){
    1042:	6e ea       	ldi	r22, 0xAE	; 174
    1044:	72 e4       	ldi	r23, 0x42	; 66
    1046:	83 e1       	ldi	r24, 0x13	; 19
    1048:	94 e4       	ldi	r25, 0x44	; 68
    104a:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
    104e:	89 2b       	or	r24, r25
    1050:	99 f4       	brne	.+38     	; 0x1078 <UART_MENU+0x238>
						speedch1 = UART_FanSpeedSet();
    1052:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_FanSpeedSet>
    1056:	80 93 0b 44 	sts	0x440B, r24	; 0x80440b <speedch1>
    105a:	90 93 0c 44 	sts	0x440C, r25	; 0x80440c <speedch1+0x1>
						AnalogWrite(1, speedch1);
    105e:	68 2f       	mov	r22, r24
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch1);
    1066:	60 91 0b 44 	lds	r22, 0x440B	; 0x80440b <speedch1>
    106a:	70 91 0c 44 	lds	r23, 0x440C	; 0x80440c <speedch1+0x1>
    106e:	8a e3       	ldi	r24, 0x3A	; 58
    1070:	94 e4       	ldi	r25, 0x44	; 68
    1072:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
						break;
    1076:	06 c2       	rjmp	.+1036   	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "2") == 0){
    1078:	60 eb       	ldi	r22, 0xB0	; 176
    107a:	72 e4       	ldi	r23, 0x42	; 66
    107c:	83 e1       	ldi	r24, 0x13	; 19
    107e:	94 e4       	ldi	r25, 0x44	; 68
    1080:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
    1084:	89 2b       	or	r24, r25
    1086:	99 f4       	brne	.+38     	; 0x10ae <UART_MENU+0x26e>
						speedch2 = UART_FanSpeedSet();
    1088:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_FanSpeedSet>
    108c:	80 93 09 44 	sts	0x4409, r24	; 0x804409 <speedch2>
    1090:	90 93 0a 44 	sts	0x440A, r25	; 0x80440a <speedch2+0x1>
						AnalogWrite(2, speedch2);
    1094:	68 2f       	mov	r22, r24
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch2);
    109c:	60 91 09 44 	lds	r22, 0x4409	; 0x804409 <speedch2>
    10a0:	70 91 0a 44 	lds	r23, 0x440A	; 0x80440a <speedch2+0x1>
    10a4:	8a e3       	ldi	r24, 0x3A	; 58
    10a6:	94 e4       	ldi	r25, 0x44	; 68
    10a8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
						break;
    10ac:	eb c1       	rjmp	.+982    	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "3") == 0){
    10ae:	62 eb       	ldi	r22, 0xB2	; 178
    10b0:	72 e4       	ldi	r23, 0x42	; 66
    10b2:	83 e1       	ldi	r24, 0x13	; 19
    10b4:	94 e4       	ldi	r25, 0x44	; 68
    10b6:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
    10ba:	89 2b       	or	r24, r25
    10bc:	99 f4       	brne	.+38     	; 0x10e4 <UART_MENU+0x2a4>
						speedch3 = UART_FanSpeedSet();
    10be:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_FanSpeedSet>
    10c2:	80 93 07 44 	sts	0x4407, r24	; 0x804407 <speedch3>
    10c6:	90 93 08 44 	sts	0x4408, r25	; 0x804408 <speedch3+0x1>
						AnalogWrite(3, speedch3);
    10ca:	68 2f       	mov	r22, r24
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch3);
    10d2:	60 91 07 44 	lds	r22, 0x4407	; 0x804407 <speedch3>
    10d6:	70 91 08 44 	lds	r23, 0x4408	; 0x804408 <speedch3+0x1>
    10da:	8a e3       	ldi	r24, 0x3A	; 58
    10dc:	94 e4       	ldi	r25, 0x44	; 68
    10de:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
						break;
    10e2:	d0 c1       	rjmp	.+928    	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "4") == 0){
    10e4:	64 eb       	ldi	r22, 0xB4	; 180
    10e6:	72 e4       	ldi	r23, 0x42	; 66
    10e8:	83 e1       	ldi	r24, 0x13	; 19
    10ea:	94 e4       	ldi	r25, 0x44	; 68
    10ec:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
    10f0:	89 2b       	or	r24, r25
    10f2:	99 f4       	brne	.+38     	; 0x111a <UART_MENU+0x2da>
						speedch4 = UART_FanSpeedSet();
    10f4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_FanSpeedSet>
    10f8:	80 93 05 44 	sts	0x4405, r24	; 0x804405 <speedch4>
    10fc:	90 93 06 44 	sts	0x4406, r25	; 0x804406 <speedch4+0x1>
						AnalogWrite(4, speedch4);
    1100:	68 2f       	mov	r22, r24
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch4);
    1108:	60 91 05 44 	lds	r22, 0x4405	; 0x804405 <speedch4>
    110c:	70 91 06 44 	lds	r23, 0x4406	; 0x804406 <speedch4+0x1>
    1110:	8a e3       	ldi	r24, 0x3A	; 58
    1112:	94 e4       	ldi	r25, 0x44	; 68
    1114:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
						break;
    1118:	b5 c1       	rjmp	.+874    	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "5") == 0){
    111a:	66 eb       	ldi	r22, 0xB6	; 182
    111c:	72 e4       	ldi	r23, 0x42	; 66
    111e:	83 e1       	ldi	r24, 0x13	; 19
    1120:	94 e4       	ldi	r25, 0x44	; 68
    1122:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
    1126:	89 2b       	or	r24, r25
    1128:	99 f4       	brne	.+38     	; 0x1150 <UART_MENU+0x310>
						speedch5 = UART_FanSpeedSet();
    112a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_FanSpeedSet>
    112e:	80 93 03 44 	sts	0x4403, r24	; 0x804403 <speedch5>
    1132:	90 93 04 44 	sts	0x4404, r25	; 0x804404 <speedch5+0x1>
						AnalogWrite(5, speedch5);
    1136:	68 2f       	mov	r22, r24
    1138:	85 e0       	ldi	r24, 0x05	; 5
    113a:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch5);
    113e:	60 91 03 44 	lds	r22, 0x4403	; 0x804403 <speedch5>
    1142:	70 91 04 44 	lds	r23, 0x4404	; 0x804404 <speedch5+0x1>
    1146:	8a e3       	ldi	r24, 0x3A	; 58
    1148:	94 e4       	ldi	r25, 0x44	; 68
    114a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
						break;
    114e:	9a c1       	rjmp	.+820    	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "6") == 0){
    1150:	68 eb       	ldi	r22, 0xB8	; 184
    1152:	72 e4       	ldi	r23, 0x42	; 66
    1154:	83 e1       	ldi	r24, 0x13	; 19
    1156:	94 e4       	ldi	r25, 0x44	; 68
    1158:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
    115c:	89 2b       	or	r24, r25
    115e:	99 f4       	brne	.+38     	; 0x1186 <UART_MENU+0x346>
						speedch6 = UART_FanSpeedSet();
    1160:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_FanSpeedSet>
    1164:	80 93 01 44 	sts	0x4401, r24	; 0x804401 <speedch6>
    1168:	90 93 02 44 	sts	0x4402, r25	; 0x804402 <speedch6+0x1>
						AnalogWrite(6, speedch6);
    116c:	68 2f       	mov	r22, r24
    116e:	86 e0       	ldi	r24, 0x06	; 6
    1170:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch6);
    1174:	60 91 01 44 	lds	r22, 0x4401	; 0x804401 <speedch6>
    1178:	70 91 02 44 	lds	r23, 0x4402	; 0x804402 <speedch6+0x1>
    117c:	8a e3       	ldi	r24, 0x3A	; 58
    117e:	94 e4       	ldi	r25, 0x44	; 68
    1180:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
						break;
    1184:	7f c1       	rjmp	.+766    	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "7") == 0){
    1186:	6a eb       	ldi	r22, 0xBA	; 186
    1188:	72 e4       	ldi	r23, 0x42	; 66
    118a:	83 e1       	ldi	r24, 0x13	; 19
    118c:	94 e4       	ldi	r25, 0x44	; 68
    118e:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
    1192:	89 2b       	or	r24, r25
    1194:	99 f4       	brne	.+38     	; 0x11bc <UART_MENU+0x37c>
						speedch7 = UART_FanSpeedSet();
    1196:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_FanSpeedSet>
    119a:	80 93 ff 43 	sts	0x43FF, r24	; 0x8043ff <speedch7>
    119e:	90 93 00 44 	sts	0x4400, r25	; 0x804400 <speedch7+0x1>
						AnalogWrite(7, speedch7);
    11a2:	68 2f       	mov	r22, r24
    11a4:	87 e0       	ldi	r24, 0x07	; 7
    11a6:	0e 94 b9 00 	call	0x172	; 0x172 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch7);
    11aa:	60 91 ff 43 	lds	r22, 0x43FF	; 0x8043ff <speedch7>
    11ae:	70 91 00 44 	lds	r23, 0x4400	; 0x804400 <speedch7+0x1>
    11b2:	8a e3       	ldi	r24, 0x3A	; 58
    11b4:	94 e4       	ldi	r25, 0x44	; 68
    11b6:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
						break;
    11ba:	64 c1       	rjmp	.+712    	; 0x1484 <UART_MENU+0x644>
					}
					else if(strcmp(ProcessedBuffer, "all") == 0){
    11bc:	6c eb       	ldi	r22, 0xBC	; 188
    11be:	72 e4       	ldi	r23, 0x42	; 66
    11c0:	83 e1       	ldi	r24, 0x13	; 19
    11c2:	94 e4       	ldi	r25, 0x44	; 68
    11c4:	0e 94 0e 0c 	call	0x181c	; 0x181c <strcmp>
    11c8:	89 2b       	or	r24, r25
    11ca:	09 f4       	brne	.+2      	; 0x11ce <UART_MENU+0x38e>
    11cc:	5b c1       	rjmp	.+694    	; 0x1484 <UART_MENU+0x644>
					
						break;
						}else{
						
						strcpy(TxBuffer,"Fan with incorrect syntax");
    11ce:	8a e1       	ldi	r24, 0x1A	; 26
    11d0:	e9 ef       	ldi	r30, 0xF9	; 249
    11d2:	f2 e4       	ldi	r31, 0x42	; 66
    11d4:	aa e3       	ldi	r26, 0x3A	; 58
    11d6:	b4 e4       	ldi	r27, 0x44	; 68
    11d8:	01 90       	ld	r0, Z+
    11da:	0d 92       	st	X+, r0
    11dc:	8a 95       	dec	r24
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <UART_MENU+0x398>
						UART_SendBuffer();
    11e0:	0e 94 c0 02 	call	0x580	; 0x580 <UART_SendBuffer>
						UART_NewLine();
    11e4:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
    11e8:	4d c1       	rjmp	.+666    	; 0x1484 <UART_MENU+0x644>
				
				break;
				
				case commandSave:
				//Turns the fans up to max speed
				AllON();
    11ea:	0e 94 9b 06 	call	0xd36	; 0xd36 <AllON>
				
				UART_NewLine();
    11ee:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
				
				//Read RPM values from trend data in EEPROM
				SpeedFromEEPROMch[0] = my_eeprom_read_char(fan_0_EEPROM_adr);
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    11f8:	cf ee       	ldi	r28, 0xEF	; 239
    11fa:	d3 e4       	ldi	r29, 0x43	; 67
    11fc:	88 83       	st	Y, r24
    11fe:	99 83       	std	Y+1, r25	; 0x01
				SpeedFromEEPROMch[1] = my_eeprom_read_char(fan_1_EEPROM_adr);
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    1206:	8a 83       	std	Y+2, r24	; 0x02
    1208:	9b 83       	std	Y+3, r25	; 0x03
				SpeedFromEEPROMch[2] = my_eeprom_read_char(fan_2_EEPROM_adr);
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    1210:	8c 83       	std	Y+4, r24	; 0x04
    1212:	9d 83       	std	Y+5, r25	; 0x05
				SpeedFromEEPROMch[3] = my_eeprom_read_char(fan_3_EEPROM_adr);
    1214:	86 e0       	ldi	r24, 0x06	; 6
    1216:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    121a:	8e 83       	std	Y+6, r24	; 0x06
    121c:	9f 83       	std	Y+7, r25	; 0x07
				SpeedFromEEPROMch[4] = my_eeprom_read_char(fan_4_EEPROM_adr);
    121e:	88 e0       	ldi	r24, 0x08	; 8
    1220:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    1224:	88 87       	std	Y+8, r24	; 0x08
    1226:	99 87       	std	Y+9, r25	; 0x09
				SpeedFromEEPROMch[5] = my_eeprom_read_char(fan_5_EEPROM_adr);
    1228:	8a e0       	ldi	r24, 0x0A	; 10
    122a:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    122e:	8a 87       	std	Y+10, r24	; 0x0a
    1230:	9b 87       	std	Y+11, r25	; 0x0b
				SpeedFromEEPROMch[6] = my_eeprom_read_char(fan_6_EEPROM_adr);
    1232:	8c e0       	ldi	r24, 0x0C	; 12
    1234:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    1238:	8c 87       	std	Y+12, r24	; 0x0c
    123a:	9d 87       	std	Y+13, r25	; 0x0d
				SpeedFromEEPROMch[7] = my_eeprom_read_char(fan_7_EEPROM_adr);
    123c:	8e e0       	ldi	r24, 0x0E	; 14
    123e:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    1242:	8e 87       	std	Y+14, r24	; 0x0e
    1244:	9f 87       	std	Y+15, r25	; 0x0f
				
				//
				for (int i = 0; i<=7; i++)
    1246:	c0 e0       	ldi	r28, 0x00	; 0
    1248:	d0 e0       	ldi	r29, 0x00	; 0
    124a:	60 c0       	rjmp	.+192    	; 0x130c <UART_MENU+0x4cc>
				{
					SpeedToEEPROMch[i] = Tacho_filter(i);	//Reading the rpm value for the tachometer
    124c:	8c 2f       	mov	r24, r28
    124e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Tacho_filter>
    1252:	fc 01       	movw	r30, r24
    1254:	ce 01       	movw	r24, r28
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	dc 01       	movw	r26, r24
    125c:	a1 52       	subi	r26, 0x21	; 33
    125e:	bc 4b       	sbci	r27, 0xBC	; 188
    1260:	ed 93       	st	X+, r30
    1262:	fc 93       	st	X, r31
					
					if (SpeedFromEEPROMch[i] != 0)
    1264:	dc 01       	movw	r26, r24
    1266:	a1 51       	subi	r26, 0x11	; 17
    1268:	bc 4b       	sbci	r27, 0xBC	; 188
    126a:	4d 91       	ld	r20, X+
    126c:	5c 91       	ld	r21, X
    126e:	41 15       	cp	r20, r1
    1270:	51 05       	cpc	r21, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <UART_MENU+0x436>
    1274:	4a c0       	rjmp	.+148    	; 0x130a <UART_MENU+0x4ca>
					{
						SpeedToEEPROMch[i] = ((19*SpeedFromEEPROMch[i]/20) + (SpeedToEEPROMch[i]/20));	//Calculating new value for EEPROM
    1276:	83 e1       	ldi	r24, 0x13	; 19
    1278:	84 9f       	mul	r24, r20
    127a:	90 01       	movw	r18, r0
    127c:	85 9f       	mul	r24, r21
    127e:	30 0d       	add	r19, r0
    1280:	11 24       	eor	r1, r1
    1282:	ad ec       	ldi	r26, 0xCD	; 205
    1284:	bc ec       	ldi	r27, 0xCC	; 204
    1286:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__umulhisi3>
    128a:	8c 01       	movw	r16, r24
    128c:	12 95       	swap	r17
    128e:	02 95       	swap	r16
    1290:	0f 70       	andi	r16, 0x0F	; 15
    1292:	01 27       	eor	r16, r17
    1294:	1f 70       	andi	r17, 0x0F	; 15
    1296:	01 27       	eor	r16, r17
    1298:	9f 01       	movw	r18, r30
    129a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__umulhisi3>
    129e:	92 95       	swap	r25
    12a0:	82 95       	swap	r24
    12a2:	8f 70       	andi	r24, 0x0F	; 15
    12a4:	89 27       	eor	r24, r25
    12a6:	9f 70       	andi	r25, 0x0F	; 15
    12a8:	89 27       	eor	r24, r25
    12aa:	08 0f       	add	r16, r24
    12ac:	19 1f       	adc	r17, r25
    12ae:	fe 01       	movw	r30, r28
    12b0:	ee 0f       	add	r30, r30
    12b2:	ff 1f       	adc	r31, r31
    12b4:	e1 52       	subi	r30, 0x21	; 33
    12b6:	fc 4b       	sbci	r31, 0xBC	; 188
    12b8:	00 83       	st	Z, r16
    12ba:	11 83       	std	Z+1, r17	; 0x01
						
						if ((SpeedFromEEPROMch[i]*0.99) > SpeedToEEPROMch[i])	//Predicting fault in fan
    12bc:	ba 01       	movw	r22, r20
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__floatunsisf>
    12c6:	24 ea       	ldi	r18, 0xA4	; 164
    12c8:	30 e7       	ldi	r19, 0x70	; 112
    12ca:	4d e7       	ldi	r20, 0x7D	; 125
    12cc:	5f e3       	ldi	r21, 0x3F	; 63
    12ce:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__mulsf3>
    12d2:	6b 01       	movw	r12, r22
    12d4:	7c 01       	movw	r14, r24
    12d6:	b8 01       	movw	r22, r16
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__floatunsisf>
    12e0:	9b 01       	movw	r18, r22
    12e2:	ac 01       	movw	r20, r24
    12e4:	c7 01       	movw	r24, r14
    12e6:	b6 01       	movw	r22, r12
    12e8:	0e 94 16 0b 	call	0x162c	; 0x162c <__gesf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	6c f4       	brge	.+26     	; 0x130a <UART_MENU+0x4ca>
						{
							TxBuffer_StringWrite(TxBuffer,"Fault predicted in fan ");
    12f0:	63 e1       	ldi	r22, 0x13	; 19
    12f2:	73 e4       	ldi	r23, 0x43	; 67
    12f4:	8a e3       	ldi	r24, 0x3A	; 58
    12f6:	94 e4       	ldi	r25, 0x44	; 68
    12f8:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
							TxBuffer_IntWrite(TxBuffer, i);
    12fc:	be 01       	movw	r22, r28
    12fe:	8a e3       	ldi	r24, 0x3A	; 58
    1300:	94 e4       	ldi	r25, 0x44	; 68
    1302:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
							UART_NewLine();
    1306:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
				SpeedFromEEPROMch[5] = my_eeprom_read_char(fan_5_EEPROM_adr);
				SpeedFromEEPROMch[6] = my_eeprom_read_char(fan_6_EEPROM_adr);
				SpeedFromEEPROMch[7] = my_eeprom_read_char(fan_7_EEPROM_adr);
				
				//
				for (int i = 0; i<=7; i++)
    130a:	21 96       	adiw	r28, 0x01	; 1
    130c:	c8 30       	cpi	r28, 0x08	; 8
    130e:	d1 05       	cpc	r29, r1
    1310:	0c f4       	brge	.+2      	; 0x1314 <UART_MENU+0x4d4>
    1312:	9c cf       	rjmp	.-200    	; 0x124c <UART_MENU+0x40c>
						}
					}
				}
				
				//Updates values to EEPROM
				my_eeprom_update_char(fan_0_EEPROM_adr, SpeedToEEPROMch[0]);
    1314:	cf ed       	ldi	r28, 0xDF	; 223
    1316:	d3 e4       	ldi	r29, 0x43	; 67
    1318:	68 81       	ld	r22, Y
    131a:	79 81       	ldd	r23, Y+1	; 0x01
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_1_EEPROM_adr, SpeedToEEPROMch[1]);
    1322:	6a 81       	ldd	r22, Y+2	; 0x02
    1324:	7b 81       	ldd	r23, Y+3	; 0x03
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_2_EEPROM_adr, SpeedToEEPROMch[2]);
    132c:	6c 81       	ldd	r22, Y+4	; 0x04
    132e:	7d 81       	ldd	r23, Y+5	; 0x05
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_3_EEPROM_adr, SpeedToEEPROMch[3]);
    1336:	6e 81       	ldd	r22, Y+6	; 0x06
    1338:	7f 81       	ldd	r23, Y+7	; 0x07
    133a:	86 e0       	ldi	r24, 0x06	; 6
    133c:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_4_EEPROM_adr, SpeedToEEPROMch[4]);
    1340:	68 85       	ldd	r22, Y+8	; 0x08
    1342:	79 85       	ldd	r23, Y+9	; 0x09
    1344:	88 e0       	ldi	r24, 0x08	; 8
    1346:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_5_EEPROM_adr, SpeedToEEPROMch[5]);
    134a:	6a 85       	ldd	r22, Y+10	; 0x0a
    134c:	7b 85       	ldd	r23, Y+11	; 0x0b
    134e:	8a e0       	ldi	r24, 0x0A	; 10
    1350:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_6_EEPROM_adr, SpeedToEEPROMch[6]);
    1354:	6c 85       	ldd	r22, Y+12	; 0x0c
    1356:	7d 85       	ldd	r23, Y+13	; 0x0d
    1358:	8c e0       	ldi	r24, 0x0C	; 12
    135a:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_7_EEPROM_adr, SpeedToEEPROMch[7]);
    135e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1360:	7f 85       	ldd	r23, Y+15	; 0x0f
    1362:	8e e0       	ldi	r24, 0x0E	; 14
    1364:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				TxBuffer_StringWrite(TxBuffer,"Saving done");
    1368:	6b e2       	ldi	r22, 0x2B	; 43
    136a:	73 e4       	ldi	r23, 0x43	; 67
    136c:	8a e3       	ldi	r24, 0x3A	; 58
    136e:	94 e4       	ldi	r25, 0x44	; 68
    1370:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
				break;
    1374:	87 c0       	rjmp	.+270    	; 0x1484 <UART_MENU+0x644>
				
				case commandResetEEPROM:
				//Sets value to zero at every EEPROM adresse
				my_eeprom_update_char(fan_0_EEPROM_adr, 0);
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_1_EEPROM_adr, 0);
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_2_EEPROM_adr, 0);
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_3_EEPROM_adr, 0);
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	86 e0       	ldi	r24, 0x06	; 6
    139a:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_4_EEPROM_adr, 0);
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	88 e0       	ldi	r24, 0x08	; 8
    13a4:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_5_EEPROM_adr, 0);
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	8a e0       	ldi	r24, 0x0A	; 10
    13ae:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_6_EEPROM_adr, 0);
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	8c e0       	ldi	r24, 0x0C	; 12
    13b8:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				my_eeprom_update_char(fan_7_EEPROM_adr, 0);
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	8e e0       	ldi	r24, 0x0E	; 14
    13c2:	0e 94 98 01 	call	0x330	; 0x330 <my_eeprom_update_char>
				
				TxBuffer_StringWrite(TxBuffer, "EEPROM has been reset");
    13c6:	67 e3       	ldi	r22, 0x37	; 55
    13c8:	73 e4       	ldi	r23, 0x43	; 67
    13ca:	8a e3       	ldi	r24, 0x3A	; 58
    13cc:	94 e4       	ldi	r25, 0x44	; 68
    13ce:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
				break;
    13d2:	58 c0       	rjmp	.+176    	; 0x1484 <UART_MENU+0x644>
				
				case commandTrendData:
				//Read RPM values from trend data in EEPROM
				SpeedFromEEPROMch[0] = my_eeprom_read_char(fan_0_EEPROM_adr);
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    13da:	cf ee       	ldi	r28, 0xEF	; 239
    13dc:	d3 e4       	ldi	r29, 0x43	; 67
    13de:	88 83       	st	Y, r24
    13e0:	99 83       	std	Y+1, r25	; 0x01
				SpeedFromEEPROMch[1] = my_eeprom_read_char(fan_1_EEPROM_adr);
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    13e8:	8a 83       	std	Y+2, r24	; 0x02
    13ea:	9b 83       	std	Y+3, r25	; 0x03
				SpeedFromEEPROMch[2] = my_eeprom_read_char(fan_2_EEPROM_adr);
    13ec:	84 e0       	ldi	r24, 0x04	; 4
    13ee:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    13f2:	8c 83       	std	Y+4, r24	; 0x04
    13f4:	9d 83       	std	Y+5, r25	; 0x05
				SpeedFromEEPROMch[3] = my_eeprom_read_char(fan_3_EEPROM_adr);
    13f6:	86 e0       	ldi	r24, 0x06	; 6
    13f8:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    13fc:	8e 83       	std	Y+6, r24	; 0x06
    13fe:	9f 83       	std	Y+7, r25	; 0x07
				SpeedFromEEPROMch[4] = my_eeprom_read_char(fan_4_EEPROM_adr);
    1400:	88 e0       	ldi	r24, 0x08	; 8
    1402:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    1406:	88 87       	std	Y+8, r24	; 0x08
    1408:	99 87       	std	Y+9, r25	; 0x09
				SpeedFromEEPROMch[5] = my_eeprom_read_char(fan_5_EEPROM_adr);
    140a:	8a e0       	ldi	r24, 0x0A	; 10
    140c:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    1410:	8a 87       	std	Y+10, r24	; 0x0a
    1412:	9b 87       	std	Y+11, r25	; 0x0b
				SpeedFromEEPROMch[6] = my_eeprom_read_char(fan_6_EEPROM_adr);
    1414:	8c e0       	ldi	r24, 0x0C	; 12
    1416:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    141a:	8c 87       	std	Y+12, r24	; 0x0c
    141c:	9d 87       	std	Y+13, r25	; 0x0d
				SpeedFromEEPROMch[7] = my_eeprom_read_char(fan_7_EEPROM_adr);
    141e:	8e e0       	ldi	r24, 0x0E	; 14
    1420:	0e 94 ac 01 	call	0x358	; 0x358 <my_eeprom_read_char>
    1424:	8e 87       	std	Y+14, r24	; 0x0e
    1426:	9f 87       	std	Y+15, r25	; 0x0f
				
				//Presenting the data in the UART menu
				UART_NewLine();
    1428:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
				for (int i = 0; i<=7; i++)
    142c:	c0 e0       	ldi	r28, 0x00	; 0
    142e:	d0 e0       	ldi	r29, 0x00	; 0
    1430:	1f c0       	rjmp	.+62     	; 0x1470 <UART_MENU+0x630>
				{
					TxBuffer_StringWrite(TxBuffer, "Trend data for fan ");
    1432:	6d e4       	ldi	r22, 0x4D	; 77
    1434:	73 e4       	ldi	r23, 0x43	; 67
    1436:	8a e3       	ldi	r24, 0x3A	; 58
    1438:	94 e4       	ldi	r25, 0x44	; 68
    143a:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
					TxBuffer_IntWrite(TxBuffer, i);
    143e:	be 01       	movw	r22, r28
    1440:	8a e3       	ldi	r24, 0x3A	; 58
    1442:	94 e4       	ldi	r25, 0x44	; 68
    1444:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
					TxBuffer_StringWrite(TxBuffer, ": ");
    1448:	65 e5       	ldi	r22, 0x55	; 85
    144a:	70 e4       	ldi	r23, 0x40	; 64
    144c:	8a e3       	ldi	r24, 0x3A	; 58
    144e:	94 e4       	ldi	r25, 0x44	; 68
    1450:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
					TxBuffer_IntWrite(TxBuffer, SpeedFromEEPROMch[i]);
    1454:	fe 01       	movw	r30, r28
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	e1 51       	subi	r30, 0x11	; 17
    145c:	fc 4b       	sbci	r31, 0xBC	; 188
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	8a e3       	ldi	r24, 0x3A	; 58
    1464:	94 e4       	ldi	r25, 0x44	; 68
    1466:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TxBuffer_IntWrite>
					UART_NewLine();
    146a:	0e 94 b9 02 	call	0x572	; 0x572 <UART_NewLine>
				SpeedFromEEPROMch[6] = my_eeprom_read_char(fan_6_EEPROM_adr);
				SpeedFromEEPROMch[7] = my_eeprom_read_char(fan_7_EEPROM_adr);
				
				//Presenting the data in the UART menu
				UART_NewLine();
				for (int i = 0; i<=7; i++)
    146e:	21 96       	adiw	r28, 0x01	; 1
    1470:	c8 30       	cpi	r28, 0x08	; 8
    1472:	d1 05       	cpc	r29, r1
    1474:	f4 f2       	brlt	.-68     	; 0x1432 <UART_MENU+0x5f2>
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <UART_MENU+0x644>
					UART_NewLine();
				}
				break;
				
				default:
				TxBuffer_StringWrite(TxBuffer, "Unknown command!");
    1478:	61 e6       	ldi	r22, 0x61	; 97
    147a:	73 e4       	ldi	r23, 0x43	; 67
    147c:	8a e3       	ldi	r24, 0x3A	; 58
    147e:	94 e4       	ldi	r25, 0x44	; 68
    1480:	0e 94 96 06 	call	0xd2c	; 0xd2c <TxBuffer_StringWrite>
			}
		}
		ResetSHell();
    1484:	0e 94 05 03 	call	0x60a	; 0x60a <ResetSHell>
	}
	
}
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	08 95       	ret

0000149a <main>:
#include "AVR_Analog_RW.h"


//char TxBuffer[24];
int main(void){
	Buffer_init(); //Sets the buffer for UART Menu
    149a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Buffer_init>
	//PWM_init(); //PWM write init | Initialization of TCA clock
	Osc_init(); //Initialize Internal 16MHz Oscillator clock
    149e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Osc_init>
	UART3_init(); //Initialize UART
    14a2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <UART3_init>
	TCB0_init(); //Initialize TCB0 for measuring frequency
    14a6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <TCB0_init>
	
	sei(); //Global interrupt enable
    14aa:	78 94       	sei
	while (1)
	{
		UART_MENU();
    14ac:	0e 94 20 07 	call	0xe40	; 0xe40 <UART_MENU>
    14b0:	fd cf       	rjmp	.-6      	; 0x14ac <main+0x12>

000014b2 <__vector_53>:
	}

}

//Interrupt for the rx
ISR(USART3_RXC_vect){
    14b2:	1f 92       	push	r1
    14b4:	0f 92       	push	r0
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
    14bc:	0b b6       	in	r0, 0x3b	; 59
    14be:	0f 92       	push	r0
    14c0:	2f 93       	push	r18
    14c2:	3f 93       	push	r19
    14c4:	4f 93       	push	r20
    14c6:	5f 93       	push	r21
    14c8:	6f 93       	push	r22
    14ca:	7f 93       	push	r23
    14cc:	8f 93       	push	r24
    14ce:	9f 93       	push	r25
    14d0:	af 93       	push	r26
    14d2:	bf 93       	push	r27
    14d4:	ef 93       	push	r30
    14d6:	ff 93       	push	r31
	ISR_Func();
    14d8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <ISR_Func>
}
    14dc:	ff 91       	pop	r31
    14de:	ef 91       	pop	r30
    14e0:	bf 91       	pop	r27
    14e2:	af 91       	pop	r26
    14e4:	9f 91       	pop	r25
    14e6:	8f 91       	pop	r24
    14e8:	7f 91       	pop	r23
    14ea:	6f 91       	pop	r22
    14ec:	5f 91       	pop	r21
    14ee:	4f 91       	pop	r20
    14f0:	3f 91       	pop	r19
    14f2:	2f 91       	pop	r18
    14f4:	0f 90       	pop	r0
    14f6:	0b be       	out	0x3b, r0	; 59
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__fixunssfsi>:
    1502:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__fp_splitA>
    1506:	88 f0       	brcs	.+34     	; 0x152a <__fixunssfsi+0x28>
    1508:	9f 57       	subi	r25, 0x7F	; 127
    150a:	98 f0       	brcs	.+38     	; 0x1532 <__fixunssfsi+0x30>
    150c:	b9 2f       	mov	r27, r25
    150e:	99 27       	eor	r25, r25
    1510:	b7 51       	subi	r27, 0x17	; 23
    1512:	b0 f0       	brcs	.+44     	; 0x1540 <__fixunssfsi+0x3e>
    1514:	e1 f0       	breq	.+56     	; 0x154e <__fixunssfsi+0x4c>
    1516:	66 0f       	add	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	1a f0       	brmi	.+6      	; 0x1526 <__fixunssfsi+0x24>
    1520:	ba 95       	dec	r27
    1522:	c9 f7       	brne	.-14     	; 0x1516 <__fixunssfsi+0x14>
    1524:	14 c0       	rjmp	.+40     	; 0x154e <__fixunssfsi+0x4c>
    1526:	b1 30       	cpi	r27, 0x01	; 1
    1528:	91 f0       	breq	.+36     	; 0x154e <__fixunssfsi+0x4c>
    152a:	0e 94 0f 0b 	call	0x161e	; 0x161e <__fp_zero>
    152e:	b1 e0       	ldi	r27, 0x01	; 1
    1530:	08 95       	ret
    1532:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_zero>
    1536:	67 2f       	mov	r22, r23
    1538:	78 2f       	mov	r23, r24
    153a:	88 27       	eor	r24, r24
    153c:	b8 5f       	subi	r27, 0xF8	; 248
    153e:	39 f0       	breq	.+14     	; 0x154e <__fixunssfsi+0x4c>
    1540:	b9 3f       	cpi	r27, 0xF9	; 249
    1542:	cc f3       	brlt	.-14     	; 0x1536 <__fixunssfsi+0x34>
    1544:	86 95       	lsr	r24
    1546:	77 95       	ror	r23
    1548:	67 95       	ror	r22
    154a:	b3 95       	inc	r27
    154c:	d9 f7       	brne	.-10     	; 0x1544 <__fixunssfsi+0x42>
    154e:	3e f4       	brtc	.+14     	; 0x155e <__fixunssfsi+0x5c>
    1550:	90 95       	com	r25
    1552:	80 95       	com	r24
    1554:	70 95       	com	r23
    1556:	61 95       	neg	r22
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	8f 4f       	sbci	r24, 0xFF	; 255
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	08 95       	ret

00001560 <__floatunsisf>:
    1560:	e8 94       	clt
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <__floatsisf+0x12>

00001564 <__floatsisf>:
    1564:	97 fb       	bst	r25, 7
    1566:	3e f4       	brtc	.+14     	; 0x1576 <__floatsisf+0x12>
    1568:	90 95       	com	r25
    156a:	80 95       	com	r24
    156c:	70 95       	com	r23
    156e:	61 95       	neg	r22
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	8f 4f       	sbci	r24, 0xFF	; 255
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	99 23       	and	r25, r25
    1578:	a9 f0       	breq	.+42     	; 0x15a4 <__floatsisf+0x40>
    157a:	f9 2f       	mov	r31, r25
    157c:	96 e9       	ldi	r25, 0x96	; 150
    157e:	bb 27       	eor	r27, r27
    1580:	93 95       	inc	r25
    1582:	f6 95       	lsr	r31
    1584:	87 95       	ror	r24
    1586:	77 95       	ror	r23
    1588:	67 95       	ror	r22
    158a:	b7 95       	ror	r27
    158c:	f1 11       	cpse	r31, r1
    158e:	f8 cf       	rjmp	.-16     	; 0x1580 <__floatsisf+0x1c>
    1590:	fa f4       	brpl	.+62     	; 0x15d0 <__floatsisf+0x6c>
    1592:	bb 0f       	add	r27, r27
    1594:	11 f4       	brne	.+4      	; 0x159a <__floatsisf+0x36>
    1596:	60 ff       	sbrs	r22, 0
    1598:	1b c0       	rjmp	.+54     	; 0x15d0 <__floatsisf+0x6c>
    159a:	6f 5f       	subi	r22, 0xFF	; 255
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	8f 4f       	sbci	r24, 0xFF	; 255
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	16 c0       	rjmp	.+44     	; 0x15d0 <__floatsisf+0x6c>
    15a4:	88 23       	and	r24, r24
    15a6:	11 f0       	breq	.+4      	; 0x15ac <__floatsisf+0x48>
    15a8:	96 e9       	ldi	r25, 0x96	; 150
    15aa:	11 c0       	rjmp	.+34     	; 0x15ce <__floatsisf+0x6a>
    15ac:	77 23       	and	r23, r23
    15ae:	21 f0       	breq	.+8      	; 0x15b8 <__floatsisf+0x54>
    15b0:	9e e8       	ldi	r25, 0x8E	; 142
    15b2:	87 2f       	mov	r24, r23
    15b4:	76 2f       	mov	r23, r22
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <__floatsisf+0x5e>
    15b8:	66 23       	and	r22, r22
    15ba:	71 f0       	breq	.+28     	; 0x15d8 <__floatsisf+0x74>
    15bc:	96 e8       	ldi	r25, 0x86	; 134
    15be:	86 2f       	mov	r24, r22
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	2a f0       	brmi	.+10     	; 0x15d0 <__floatsisf+0x6c>
    15c6:	9a 95       	dec	r25
    15c8:	66 0f       	add	r22, r22
    15ca:	77 1f       	adc	r23, r23
    15cc:	88 1f       	adc	r24, r24
    15ce:	da f7       	brpl	.-10     	; 0x15c6 <__floatsisf+0x62>
    15d0:	88 0f       	add	r24, r24
    15d2:	96 95       	lsr	r25
    15d4:	87 95       	ror	r24
    15d6:	97 f9       	bld	r25, 7
    15d8:	08 95       	ret

000015da <__fp_split3>:
    15da:	57 fd       	sbrc	r21, 7
    15dc:	90 58       	subi	r25, 0x80	; 128
    15de:	44 0f       	add	r20, r20
    15e0:	55 1f       	adc	r21, r21
    15e2:	59 f0       	breq	.+22     	; 0x15fa <__fp_splitA+0x10>
    15e4:	5f 3f       	cpi	r21, 0xFF	; 255
    15e6:	71 f0       	breq	.+28     	; 0x1604 <__fp_splitA+0x1a>
    15e8:	47 95       	ror	r20

000015ea <__fp_splitA>:
    15ea:	88 0f       	add	r24, r24
    15ec:	97 fb       	bst	r25, 7
    15ee:	99 1f       	adc	r25, r25
    15f0:	61 f0       	breq	.+24     	; 0x160a <__fp_splitA+0x20>
    15f2:	9f 3f       	cpi	r25, 0xFF	; 255
    15f4:	79 f0       	breq	.+30     	; 0x1614 <__fp_splitA+0x2a>
    15f6:	87 95       	ror	r24
    15f8:	08 95       	ret
    15fa:	12 16       	cp	r1, r18
    15fc:	13 06       	cpc	r1, r19
    15fe:	14 06       	cpc	r1, r20
    1600:	55 1f       	adc	r21, r21
    1602:	f2 cf       	rjmp	.-28     	; 0x15e8 <__fp_split3+0xe>
    1604:	46 95       	lsr	r20
    1606:	f1 df       	rcall	.-30     	; 0x15ea <__fp_splitA>
    1608:	08 c0       	rjmp	.+16     	; 0x161a <__fp_splitA+0x30>
    160a:	16 16       	cp	r1, r22
    160c:	17 06       	cpc	r1, r23
    160e:	18 06       	cpc	r1, r24
    1610:	99 1f       	adc	r25, r25
    1612:	f1 cf       	rjmp	.-30     	; 0x15f6 <__fp_splitA+0xc>
    1614:	86 95       	lsr	r24
    1616:	71 05       	cpc	r23, r1
    1618:	61 05       	cpc	r22, r1
    161a:	08 94       	sec
    161c:	08 95       	ret

0000161e <__fp_zero>:
    161e:	e8 94       	clt

00001620 <__fp_szero>:
    1620:	bb 27       	eor	r27, r27
    1622:	66 27       	eor	r22, r22
    1624:	77 27       	eor	r23, r23
    1626:	cb 01       	movw	r24, r22
    1628:	97 f9       	bld	r25, 7
    162a:	08 95       	ret

0000162c <__gesf2>:
    162c:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fp_cmp>
    1630:	08 f4       	brcc	.+2      	; 0x1634 <__gesf2+0x8>
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	08 95       	ret

00001636 <__mulsf3>:
    1636:	0e 94 2e 0b 	call	0x165c	; 0x165c <__mulsf3x>
    163a:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_round>
    163e:	0e 94 b5 0b 	call	0x176a	; 0x176a <__fp_pscA>
    1642:	38 f0       	brcs	.+14     	; 0x1652 <__mulsf3+0x1c>
    1644:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fp_pscB>
    1648:	20 f0       	brcs	.+8      	; 0x1652 <__mulsf3+0x1c>
    164a:	95 23       	and	r25, r21
    164c:	11 f0       	breq	.+4      	; 0x1652 <__mulsf3+0x1c>
    164e:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__fp_inf>
    1652:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_nan>
    1656:	11 24       	eor	r1, r1
    1658:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_szero>

0000165c <__mulsf3x>:
    165c:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fp_split3>
    1660:	70 f3       	brcs	.-36     	; 0x163e <__mulsf3+0x8>

00001662 <__mulsf3_pse>:
    1662:	95 9f       	mul	r25, r21
    1664:	c1 f3       	breq	.-16     	; 0x1656 <__mulsf3+0x20>
    1666:	95 0f       	add	r25, r21
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	55 1f       	adc	r21, r21
    166c:	62 9f       	mul	r22, r18
    166e:	f0 01       	movw	r30, r0
    1670:	72 9f       	mul	r23, r18
    1672:	bb 27       	eor	r27, r27
    1674:	f0 0d       	add	r31, r0
    1676:	b1 1d       	adc	r27, r1
    1678:	63 9f       	mul	r22, r19
    167a:	aa 27       	eor	r26, r26
    167c:	f0 0d       	add	r31, r0
    167e:	b1 1d       	adc	r27, r1
    1680:	aa 1f       	adc	r26, r26
    1682:	64 9f       	mul	r22, r20
    1684:	66 27       	eor	r22, r22
    1686:	b0 0d       	add	r27, r0
    1688:	a1 1d       	adc	r26, r1
    168a:	66 1f       	adc	r22, r22
    168c:	82 9f       	mul	r24, r18
    168e:	22 27       	eor	r18, r18
    1690:	b0 0d       	add	r27, r0
    1692:	a1 1d       	adc	r26, r1
    1694:	62 1f       	adc	r22, r18
    1696:	73 9f       	mul	r23, r19
    1698:	b0 0d       	add	r27, r0
    169a:	a1 1d       	adc	r26, r1
    169c:	62 1f       	adc	r22, r18
    169e:	83 9f       	mul	r24, r19
    16a0:	a0 0d       	add	r26, r0
    16a2:	61 1d       	adc	r22, r1
    16a4:	22 1f       	adc	r18, r18
    16a6:	74 9f       	mul	r23, r20
    16a8:	33 27       	eor	r19, r19
    16aa:	a0 0d       	add	r26, r0
    16ac:	61 1d       	adc	r22, r1
    16ae:	23 1f       	adc	r18, r19
    16b0:	84 9f       	mul	r24, r20
    16b2:	60 0d       	add	r22, r0
    16b4:	21 1d       	adc	r18, r1
    16b6:	82 2f       	mov	r24, r18
    16b8:	76 2f       	mov	r23, r22
    16ba:	6a 2f       	mov	r22, r26
    16bc:	11 24       	eor	r1, r1
    16be:	9f 57       	subi	r25, 0x7F	; 127
    16c0:	50 40       	sbci	r21, 0x00	; 0
    16c2:	9a f0       	brmi	.+38     	; 0x16ea <__mulsf3_pse+0x88>
    16c4:	f1 f0       	breq	.+60     	; 0x1702 <__mulsf3_pse+0xa0>
    16c6:	88 23       	and	r24, r24
    16c8:	4a f0       	brmi	.+18     	; 0x16dc <__mulsf3_pse+0x7a>
    16ca:	ee 0f       	add	r30, r30
    16cc:	ff 1f       	adc	r31, r31
    16ce:	bb 1f       	adc	r27, r27
    16d0:	66 1f       	adc	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	91 50       	subi	r25, 0x01	; 1
    16d8:	50 40       	sbci	r21, 0x00	; 0
    16da:	a9 f7       	brne	.-22     	; 0x16c6 <__mulsf3_pse+0x64>
    16dc:	9e 3f       	cpi	r25, 0xFE	; 254
    16de:	51 05       	cpc	r21, r1
    16e0:	80 f0       	brcs	.+32     	; 0x1702 <__mulsf3_pse+0xa0>
    16e2:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__fp_inf>
    16e6:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_szero>
    16ea:	5f 3f       	cpi	r21, 0xFF	; 255
    16ec:	e4 f3       	brlt	.-8      	; 0x16e6 <__mulsf3_pse+0x84>
    16ee:	98 3e       	cpi	r25, 0xE8	; 232
    16f0:	d4 f3       	brlt	.-12     	; 0x16e6 <__mulsf3_pse+0x84>
    16f2:	86 95       	lsr	r24
    16f4:	77 95       	ror	r23
    16f6:	67 95       	ror	r22
    16f8:	b7 95       	ror	r27
    16fa:	f7 95       	ror	r31
    16fc:	e7 95       	ror	r30
    16fe:	9f 5f       	subi	r25, 0xFF	; 255
    1700:	c1 f7       	brne	.-16     	; 0x16f2 <__mulsf3_pse+0x90>
    1702:	fe 2b       	or	r31, r30
    1704:	88 0f       	add	r24, r24
    1706:	91 1d       	adc	r25, r1
    1708:	96 95       	lsr	r25
    170a:	87 95       	ror	r24
    170c:	97 f9       	bld	r25, 7
    170e:	08 95       	ret

00001710 <__fp_cmp>:
    1710:	99 0f       	add	r25, r25
    1712:	00 08       	sbc	r0, r0
    1714:	55 0f       	add	r21, r21
    1716:	aa 0b       	sbc	r26, r26
    1718:	e0 e8       	ldi	r30, 0x80	; 128
    171a:	fe ef       	ldi	r31, 0xFE	; 254
    171c:	16 16       	cp	r1, r22
    171e:	17 06       	cpc	r1, r23
    1720:	e8 07       	cpc	r30, r24
    1722:	f9 07       	cpc	r31, r25
    1724:	c0 f0       	brcs	.+48     	; 0x1756 <__fp_cmp+0x46>
    1726:	12 16       	cp	r1, r18
    1728:	13 06       	cpc	r1, r19
    172a:	e4 07       	cpc	r30, r20
    172c:	f5 07       	cpc	r31, r21
    172e:	98 f0       	brcs	.+38     	; 0x1756 <__fp_cmp+0x46>
    1730:	62 1b       	sub	r22, r18
    1732:	73 0b       	sbc	r23, r19
    1734:	84 0b       	sbc	r24, r20
    1736:	95 0b       	sbc	r25, r21
    1738:	39 f4       	brne	.+14     	; 0x1748 <__fp_cmp+0x38>
    173a:	0a 26       	eor	r0, r26
    173c:	61 f0       	breq	.+24     	; 0x1756 <__fp_cmp+0x46>
    173e:	23 2b       	or	r18, r19
    1740:	24 2b       	or	r18, r20
    1742:	25 2b       	or	r18, r21
    1744:	21 f4       	brne	.+8      	; 0x174e <__fp_cmp+0x3e>
    1746:	08 95       	ret
    1748:	0a 26       	eor	r0, r26
    174a:	09 f4       	brne	.+2      	; 0x174e <__fp_cmp+0x3e>
    174c:	a1 40       	sbci	r26, 0x01	; 1
    174e:	a6 95       	lsr	r26
    1750:	8f ef       	ldi	r24, 0xFF	; 255
    1752:	81 1d       	adc	r24, r1
    1754:	81 1d       	adc	r24, r1
    1756:	08 95       	ret

00001758 <__fp_inf>:
    1758:	97 f9       	bld	r25, 7
    175a:	9f 67       	ori	r25, 0x7F	; 127
    175c:	80 e8       	ldi	r24, 0x80	; 128
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	08 95       	ret

00001764 <__fp_nan>:
    1764:	9f ef       	ldi	r25, 0xFF	; 255
    1766:	80 ec       	ldi	r24, 0xC0	; 192
    1768:	08 95       	ret

0000176a <__fp_pscA>:
    176a:	00 24       	eor	r0, r0
    176c:	0a 94       	dec	r0
    176e:	16 16       	cp	r1, r22
    1770:	17 06       	cpc	r1, r23
    1772:	18 06       	cpc	r1, r24
    1774:	09 06       	cpc	r0, r25
    1776:	08 95       	ret

00001778 <__fp_pscB>:
    1778:	00 24       	eor	r0, r0
    177a:	0a 94       	dec	r0
    177c:	12 16       	cp	r1, r18
    177e:	13 06       	cpc	r1, r19
    1780:	14 06       	cpc	r1, r20
    1782:	05 06       	cpc	r0, r21
    1784:	08 95       	ret

00001786 <__fp_round>:
    1786:	09 2e       	mov	r0, r25
    1788:	03 94       	inc	r0
    178a:	00 0c       	add	r0, r0
    178c:	11 f4       	brne	.+4      	; 0x1792 <__fp_round+0xc>
    178e:	88 23       	and	r24, r24
    1790:	52 f0       	brmi	.+20     	; 0x17a6 <__fp_round+0x20>
    1792:	bb 0f       	add	r27, r27
    1794:	40 f4       	brcc	.+16     	; 0x17a6 <__fp_round+0x20>
    1796:	bf 2b       	or	r27, r31
    1798:	11 f4       	brne	.+4      	; 0x179e <__fp_round+0x18>
    179a:	60 ff       	sbrs	r22, 0
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <__fp_round+0x20>
    179e:	6f 5f       	subi	r22, 0xFF	; 255
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	8f 4f       	sbci	r24, 0xFF	; 255
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	08 95       	ret

000017a8 <__udivmodsi4>:
    17a8:	a1 e2       	ldi	r26, 0x21	; 33
    17aa:	1a 2e       	mov	r1, r26
    17ac:	aa 1b       	sub	r26, r26
    17ae:	bb 1b       	sub	r27, r27
    17b0:	fd 01       	movw	r30, r26
    17b2:	0d c0       	rjmp	.+26     	; 0x17ce <__udivmodsi4_ep>

000017b4 <__udivmodsi4_loop>:
    17b4:	aa 1f       	adc	r26, r26
    17b6:	bb 1f       	adc	r27, r27
    17b8:	ee 1f       	adc	r30, r30
    17ba:	ff 1f       	adc	r31, r31
    17bc:	a2 17       	cp	r26, r18
    17be:	b3 07       	cpc	r27, r19
    17c0:	e4 07       	cpc	r30, r20
    17c2:	f5 07       	cpc	r31, r21
    17c4:	20 f0       	brcs	.+8      	; 0x17ce <__udivmodsi4_ep>
    17c6:	a2 1b       	sub	r26, r18
    17c8:	b3 0b       	sbc	r27, r19
    17ca:	e4 0b       	sbc	r30, r20
    17cc:	f5 0b       	sbc	r31, r21

000017ce <__udivmodsi4_ep>:
    17ce:	66 1f       	adc	r22, r22
    17d0:	77 1f       	adc	r23, r23
    17d2:	88 1f       	adc	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	1a 94       	dec	r1
    17d8:	69 f7       	brne	.-38     	; 0x17b4 <__udivmodsi4_loop>
    17da:	60 95       	com	r22
    17dc:	70 95       	com	r23
    17de:	80 95       	com	r24
    17e0:	90 95       	com	r25
    17e2:	9b 01       	movw	r18, r22
    17e4:	ac 01       	movw	r20, r24
    17e6:	bd 01       	movw	r22, r26
    17e8:	cf 01       	movw	r24, r30
    17ea:	08 95       	ret

000017ec <__tablejump2__>:
    17ec:	ee 0f       	add	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	00 24       	eor	r0, r0
    17f2:	00 1c       	adc	r0, r0
    17f4:	0b be       	out	0x3b, r0	; 59
    17f6:	07 90       	elpm	r0, Z+
    17f8:	f6 91       	elpm	r31, Z
    17fa:	e0 2d       	mov	r30, r0
    17fc:	09 94       	ijmp

000017fe <__umulhisi3>:
    17fe:	a2 9f       	mul	r26, r18
    1800:	b0 01       	movw	r22, r0
    1802:	b3 9f       	mul	r27, r19
    1804:	c0 01       	movw	r24, r0
    1806:	a3 9f       	mul	r26, r19
    1808:	70 0d       	add	r23, r0
    180a:	81 1d       	adc	r24, r1
    180c:	11 24       	eor	r1, r1
    180e:	91 1d       	adc	r25, r1
    1810:	b2 9f       	mul	r27, r18
    1812:	70 0d       	add	r23, r0
    1814:	81 1d       	adc	r24, r1
    1816:	11 24       	eor	r1, r1
    1818:	91 1d       	adc	r25, r1
    181a:	08 95       	ret

0000181c <strcmp>:
    181c:	fb 01       	movw	r30, r22
    181e:	dc 01       	movw	r26, r24
    1820:	8d 91       	ld	r24, X+
    1822:	01 90       	ld	r0, Z+
    1824:	80 19       	sub	r24, r0
    1826:	01 10       	cpse	r0, r1
    1828:	d9 f3       	breq	.-10     	; 0x1820 <strcmp+0x4>
    182a:	99 0b       	sbc	r25, r25
    182c:	08 95       	ret

0000182e <strcpy>:
    182e:	fb 01       	movw	r30, r22
    1830:	dc 01       	movw	r26, r24
    1832:	01 90       	ld	r0, Z+
    1834:	0d 92       	st	X+, r0
    1836:	00 20       	and	r0, r0
    1838:	e1 f7       	brne	.-8      	; 0x1832 <strcpy+0x4>
    183a:	08 95       	ret

0000183c <sprintf>:
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	2e 97       	sbiw	r28, 0x0e	; 14
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0d 89       	ldd	r16, Y+21	; 0x15
    1850:	1e 89       	ldd	r17, Y+22	; 0x16
    1852:	86 e0       	ldi	r24, 0x06	; 6
    1854:	8c 83       	std	Y+4, r24	; 0x04
    1856:	09 83       	std	Y+1, r16	; 0x01
    1858:	1a 83       	std	Y+2, r17	; 0x02
    185a:	8f ef       	ldi	r24, 0xFF	; 255
    185c:	9f e7       	ldi	r25, 0x7F	; 127
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	ae 01       	movw	r20, r28
    1864:	47 5e       	subi	r20, 0xE7	; 231
    1866:	5f 4f       	sbci	r21, 0xFF	; 255
    1868:	6f 89       	ldd	r22, Y+23	; 0x17
    186a:	78 8d       	ldd	r23, Y+24	; 0x18
    186c:	ce 01       	movw	r24, r28
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	0e 94 47 0c 	call	0x188e	; 0x188e <vfprintf>
    1874:	ef 81       	ldd	r30, Y+7	; 0x07
    1876:	f8 85       	ldd	r31, Y+8	; 0x08
    1878:	e0 0f       	add	r30, r16
    187a:	f1 1f       	adc	r31, r17
    187c:	10 82       	st	Z, r1
    187e:	2e 96       	adiw	r28, 0x0e	; 14
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	08 95       	ret

0000188e <vfprintf>:
    188e:	2f 92       	push	r2
    1890:	3f 92       	push	r3
    1892:	4f 92       	push	r4
    1894:	5f 92       	push	r5
    1896:	6f 92       	push	r6
    1898:	7f 92       	push	r7
    189a:	8f 92       	push	r8
    189c:	9f 92       	push	r9
    189e:	af 92       	push	r10
    18a0:	bf 92       	push	r11
    18a2:	cf 92       	push	r12
    18a4:	df 92       	push	r13
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	2b 97       	sbiw	r28, 0x0b	; 11
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	6c 01       	movw	r12, r24
    18be:	7b 01       	movw	r14, r22
    18c0:	8a 01       	movw	r16, r20
    18c2:	fc 01       	movw	r30, r24
    18c4:	16 82       	std	Z+6, r1	; 0x06
    18c6:	17 82       	std	Z+7, r1	; 0x07
    18c8:	83 81       	ldd	r24, Z+3	; 0x03
    18ca:	81 ff       	sbrs	r24, 1
    18cc:	cc c1       	rjmp	.+920    	; 0x1c66 <vfprintf+0x3d8>
    18ce:	ce 01       	movw	r24, r28
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	3c 01       	movw	r6, r24
    18d4:	f6 01       	movw	r30, r12
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	f7 01       	movw	r30, r14
    18da:	93 fd       	sbrc	r25, 3
    18dc:	85 91       	lpm	r24, Z+
    18de:	93 ff       	sbrs	r25, 3
    18e0:	81 91       	ld	r24, Z+
    18e2:	7f 01       	movw	r14, r30
    18e4:	88 23       	and	r24, r24
    18e6:	09 f4       	brne	.+2      	; 0x18ea <vfprintf+0x5c>
    18e8:	ba c1       	rjmp	.+884    	; 0x1c5e <vfprintf+0x3d0>
    18ea:	85 32       	cpi	r24, 0x25	; 37
    18ec:	39 f4       	brne	.+14     	; 0x18fc <vfprintf+0x6e>
    18ee:	93 fd       	sbrc	r25, 3
    18f0:	85 91       	lpm	r24, Z+
    18f2:	93 ff       	sbrs	r25, 3
    18f4:	81 91       	ld	r24, Z+
    18f6:	7f 01       	movw	r14, r30
    18f8:	85 32       	cpi	r24, 0x25	; 37
    18fa:	29 f4       	brne	.+10     	; 0x1906 <vfprintf+0x78>
    18fc:	b6 01       	movw	r22, r12
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1904:	e7 cf       	rjmp	.-50     	; 0x18d4 <vfprintf+0x46>
    1906:	91 2c       	mov	r9, r1
    1908:	21 2c       	mov	r2, r1
    190a:	31 2c       	mov	r3, r1
    190c:	ff e1       	ldi	r31, 0x1F	; 31
    190e:	f3 15       	cp	r31, r3
    1910:	d8 f0       	brcs	.+54     	; 0x1948 <vfprintf+0xba>
    1912:	8b 32       	cpi	r24, 0x2B	; 43
    1914:	79 f0       	breq	.+30     	; 0x1934 <vfprintf+0xa6>
    1916:	38 f4       	brcc	.+14     	; 0x1926 <vfprintf+0x98>
    1918:	80 32       	cpi	r24, 0x20	; 32
    191a:	79 f0       	breq	.+30     	; 0x193a <vfprintf+0xac>
    191c:	83 32       	cpi	r24, 0x23	; 35
    191e:	a1 f4       	brne	.+40     	; 0x1948 <vfprintf+0xba>
    1920:	23 2d       	mov	r18, r3
    1922:	20 61       	ori	r18, 0x10	; 16
    1924:	1d c0       	rjmp	.+58     	; 0x1960 <vfprintf+0xd2>
    1926:	8d 32       	cpi	r24, 0x2D	; 45
    1928:	61 f0       	breq	.+24     	; 0x1942 <vfprintf+0xb4>
    192a:	80 33       	cpi	r24, 0x30	; 48
    192c:	69 f4       	brne	.+26     	; 0x1948 <vfprintf+0xba>
    192e:	23 2d       	mov	r18, r3
    1930:	21 60       	ori	r18, 0x01	; 1
    1932:	16 c0       	rjmp	.+44     	; 0x1960 <vfprintf+0xd2>
    1934:	83 2d       	mov	r24, r3
    1936:	82 60       	ori	r24, 0x02	; 2
    1938:	38 2e       	mov	r3, r24
    193a:	e3 2d       	mov	r30, r3
    193c:	e4 60       	ori	r30, 0x04	; 4
    193e:	3e 2e       	mov	r3, r30
    1940:	2a c0       	rjmp	.+84     	; 0x1996 <vfprintf+0x108>
    1942:	f3 2d       	mov	r31, r3
    1944:	f8 60       	ori	r31, 0x08	; 8
    1946:	1d c0       	rjmp	.+58     	; 0x1982 <vfprintf+0xf4>
    1948:	37 fc       	sbrc	r3, 7
    194a:	2d c0       	rjmp	.+90     	; 0x19a6 <vfprintf+0x118>
    194c:	20 ed       	ldi	r18, 0xD0	; 208
    194e:	28 0f       	add	r18, r24
    1950:	2a 30       	cpi	r18, 0x0A	; 10
    1952:	40 f0       	brcs	.+16     	; 0x1964 <vfprintf+0xd6>
    1954:	8e 32       	cpi	r24, 0x2E	; 46
    1956:	b9 f4       	brne	.+46     	; 0x1986 <vfprintf+0xf8>
    1958:	36 fc       	sbrc	r3, 6
    195a:	81 c1       	rjmp	.+770    	; 0x1c5e <vfprintf+0x3d0>
    195c:	23 2d       	mov	r18, r3
    195e:	20 64       	ori	r18, 0x40	; 64
    1960:	32 2e       	mov	r3, r18
    1962:	19 c0       	rjmp	.+50     	; 0x1996 <vfprintf+0x108>
    1964:	36 fe       	sbrs	r3, 6
    1966:	06 c0       	rjmp	.+12     	; 0x1974 <vfprintf+0xe6>
    1968:	8a e0       	ldi	r24, 0x0A	; 10
    196a:	98 9e       	mul	r9, r24
    196c:	20 0d       	add	r18, r0
    196e:	11 24       	eor	r1, r1
    1970:	92 2e       	mov	r9, r18
    1972:	11 c0       	rjmp	.+34     	; 0x1996 <vfprintf+0x108>
    1974:	ea e0       	ldi	r30, 0x0A	; 10
    1976:	2e 9e       	mul	r2, r30
    1978:	20 0d       	add	r18, r0
    197a:	11 24       	eor	r1, r1
    197c:	22 2e       	mov	r2, r18
    197e:	f3 2d       	mov	r31, r3
    1980:	f0 62       	ori	r31, 0x20	; 32
    1982:	3f 2e       	mov	r3, r31
    1984:	08 c0       	rjmp	.+16     	; 0x1996 <vfprintf+0x108>
    1986:	8c 36       	cpi	r24, 0x6C	; 108
    1988:	21 f4       	brne	.+8      	; 0x1992 <vfprintf+0x104>
    198a:	83 2d       	mov	r24, r3
    198c:	80 68       	ori	r24, 0x80	; 128
    198e:	38 2e       	mov	r3, r24
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <vfprintf+0x108>
    1992:	88 36       	cpi	r24, 0x68	; 104
    1994:	41 f4       	brne	.+16     	; 0x19a6 <vfprintf+0x118>
    1996:	f7 01       	movw	r30, r14
    1998:	93 fd       	sbrc	r25, 3
    199a:	85 91       	lpm	r24, Z+
    199c:	93 ff       	sbrs	r25, 3
    199e:	81 91       	ld	r24, Z+
    19a0:	7f 01       	movw	r14, r30
    19a2:	81 11       	cpse	r24, r1
    19a4:	b3 cf       	rjmp	.-154    	; 0x190c <vfprintf+0x7e>
    19a6:	98 2f       	mov	r25, r24
    19a8:	9f 7d       	andi	r25, 0xDF	; 223
    19aa:	95 54       	subi	r25, 0x45	; 69
    19ac:	93 30       	cpi	r25, 0x03	; 3
    19ae:	28 f4       	brcc	.+10     	; 0x19ba <vfprintf+0x12c>
    19b0:	0c 5f       	subi	r16, 0xFC	; 252
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	9f e3       	ldi	r25, 0x3F	; 63
    19b6:	99 83       	std	Y+1, r25	; 0x01
    19b8:	0d c0       	rjmp	.+26     	; 0x19d4 <vfprintf+0x146>
    19ba:	83 36       	cpi	r24, 0x63	; 99
    19bc:	31 f0       	breq	.+12     	; 0x19ca <vfprintf+0x13c>
    19be:	83 37       	cpi	r24, 0x73	; 115
    19c0:	71 f0       	breq	.+28     	; 0x19de <vfprintf+0x150>
    19c2:	83 35       	cpi	r24, 0x53	; 83
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <vfprintf+0x13a>
    19c6:	59 c0       	rjmp	.+178    	; 0x1a7a <vfprintf+0x1ec>
    19c8:	21 c0       	rjmp	.+66     	; 0x1a0c <vfprintf+0x17e>
    19ca:	f8 01       	movw	r30, r16
    19cc:	80 81       	ld	r24, Z
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	0e 5f       	subi	r16, 0xFE	; 254
    19d2:	1f 4f       	sbci	r17, 0xFF	; 255
    19d4:	88 24       	eor	r8, r8
    19d6:	83 94       	inc	r8
    19d8:	91 2c       	mov	r9, r1
    19da:	53 01       	movw	r10, r6
    19dc:	13 c0       	rjmp	.+38     	; 0x1a04 <vfprintf+0x176>
    19de:	28 01       	movw	r4, r16
    19e0:	f2 e0       	ldi	r31, 0x02	; 2
    19e2:	4f 0e       	add	r4, r31
    19e4:	51 1c       	adc	r5, r1
    19e6:	f8 01       	movw	r30, r16
    19e8:	a0 80       	ld	r10, Z
    19ea:	b1 80       	ldd	r11, Z+1	; 0x01
    19ec:	36 fe       	sbrs	r3, 6
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <vfprintf+0x168>
    19f0:	69 2d       	mov	r22, r9
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <vfprintf+0x16c>
    19f6:	6f ef       	ldi	r22, 0xFF	; 255
    19f8:	7f ef       	ldi	r23, 0xFF	; 255
    19fa:	c5 01       	movw	r24, r10
    19fc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <strnlen>
    1a00:	4c 01       	movw	r8, r24
    1a02:	82 01       	movw	r16, r4
    1a04:	f3 2d       	mov	r31, r3
    1a06:	ff 77       	andi	r31, 0x7F	; 127
    1a08:	3f 2e       	mov	r3, r31
    1a0a:	16 c0       	rjmp	.+44     	; 0x1a38 <vfprintf+0x1aa>
    1a0c:	28 01       	movw	r4, r16
    1a0e:	22 e0       	ldi	r18, 0x02	; 2
    1a10:	42 0e       	add	r4, r18
    1a12:	51 1c       	adc	r5, r1
    1a14:	f8 01       	movw	r30, r16
    1a16:	a0 80       	ld	r10, Z
    1a18:	b1 80       	ldd	r11, Z+1	; 0x01
    1a1a:	36 fe       	sbrs	r3, 6
    1a1c:	03 c0       	rjmp	.+6      	; 0x1a24 <vfprintf+0x196>
    1a1e:	69 2d       	mov	r22, r9
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <vfprintf+0x19a>
    1a24:	6f ef       	ldi	r22, 0xFF	; 255
    1a26:	7f ef       	ldi	r23, 0xFF	; 255
    1a28:	c5 01       	movw	r24, r10
    1a2a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <strnlen_P>
    1a2e:	4c 01       	movw	r8, r24
    1a30:	f3 2d       	mov	r31, r3
    1a32:	f0 68       	ori	r31, 0x80	; 128
    1a34:	3f 2e       	mov	r3, r31
    1a36:	82 01       	movw	r16, r4
    1a38:	33 fc       	sbrc	r3, 3
    1a3a:	1b c0       	rjmp	.+54     	; 0x1a72 <vfprintf+0x1e4>
    1a3c:	82 2d       	mov	r24, r2
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	88 16       	cp	r8, r24
    1a42:	99 06       	cpc	r9, r25
    1a44:	b0 f4       	brcc	.+44     	; 0x1a72 <vfprintf+0x1e4>
    1a46:	b6 01       	movw	r22, r12
    1a48:	80 e2       	ldi	r24, 0x20	; 32
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1a50:	2a 94       	dec	r2
    1a52:	f4 cf       	rjmp	.-24     	; 0x1a3c <vfprintf+0x1ae>
    1a54:	f5 01       	movw	r30, r10
    1a56:	37 fc       	sbrc	r3, 7
    1a58:	85 91       	lpm	r24, Z+
    1a5a:	37 fe       	sbrs	r3, 7
    1a5c:	81 91       	ld	r24, Z+
    1a5e:	5f 01       	movw	r10, r30
    1a60:	b6 01       	movw	r22, r12
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1a68:	21 10       	cpse	r2, r1
    1a6a:	2a 94       	dec	r2
    1a6c:	21 e0       	ldi	r18, 0x01	; 1
    1a6e:	82 1a       	sub	r8, r18
    1a70:	91 08       	sbc	r9, r1
    1a72:	81 14       	cp	r8, r1
    1a74:	91 04       	cpc	r9, r1
    1a76:	71 f7       	brne	.-36     	; 0x1a54 <vfprintf+0x1c6>
    1a78:	e8 c0       	rjmp	.+464    	; 0x1c4a <vfprintf+0x3bc>
    1a7a:	84 36       	cpi	r24, 0x64	; 100
    1a7c:	11 f0       	breq	.+4      	; 0x1a82 <vfprintf+0x1f4>
    1a7e:	89 36       	cpi	r24, 0x69	; 105
    1a80:	41 f5       	brne	.+80     	; 0x1ad2 <vfprintf+0x244>
    1a82:	f8 01       	movw	r30, r16
    1a84:	37 fe       	sbrs	r3, 7
    1a86:	07 c0       	rjmp	.+14     	; 0x1a96 <vfprintf+0x208>
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
    1a8c:	82 81       	ldd	r24, Z+2	; 0x02
    1a8e:	93 81       	ldd	r25, Z+3	; 0x03
    1a90:	0c 5f       	subi	r16, 0xFC	; 252
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	08 c0       	rjmp	.+16     	; 0x1aa6 <vfprintf+0x218>
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	07 2e       	mov	r0, r23
    1a9c:	00 0c       	add	r0, r0
    1a9e:	88 0b       	sbc	r24, r24
    1aa0:	99 0b       	sbc	r25, r25
    1aa2:	0e 5f       	subi	r16, 0xFE	; 254
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	f3 2d       	mov	r31, r3
    1aa8:	ff 76       	andi	r31, 0x6F	; 111
    1aaa:	3f 2e       	mov	r3, r31
    1aac:	97 ff       	sbrs	r25, 7
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <vfprintf+0x234>
    1ab0:	90 95       	com	r25
    1ab2:	80 95       	com	r24
    1ab4:	70 95       	com	r23
    1ab6:	61 95       	neg	r22
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	8f 4f       	sbci	r24, 0xFF	; 255
    1abc:	9f 4f       	sbci	r25, 0xFF	; 255
    1abe:	f0 68       	ori	r31, 0x80	; 128
    1ac0:	3f 2e       	mov	r3, r31
    1ac2:	2a e0       	ldi	r18, 0x0A	; 10
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	a3 01       	movw	r20, r6
    1ac8:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__ultoa_invert>
    1acc:	88 2e       	mov	r8, r24
    1ace:	86 18       	sub	r8, r6
    1ad0:	45 c0       	rjmp	.+138    	; 0x1b5c <vfprintf+0x2ce>
    1ad2:	85 37       	cpi	r24, 0x75	; 117
    1ad4:	31 f4       	brne	.+12     	; 0x1ae2 <vfprintf+0x254>
    1ad6:	23 2d       	mov	r18, r3
    1ad8:	2f 7e       	andi	r18, 0xEF	; 239
    1ada:	b2 2e       	mov	r11, r18
    1adc:	2a e0       	ldi	r18, 0x0A	; 10
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	25 c0       	rjmp	.+74     	; 0x1b2c <vfprintf+0x29e>
    1ae2:	93 2d       	mov	r25, r3
    1ae4:	99 7f       	andi	r25, 0xF9	; 249
    1ae6:	b9 2e       	mov	r11, r25
    1ae8:	8f 36       	cpi	r24, 0x6F	; 111
    1aea:	c1 f0       	breq	.+48     	; 0x1b1c <vfprintf+0x28e>
    1aec:	18 f4       	brcc	.+6      	; 0x1af4 <vfprintf+0x266>
    1aee:	88 35       	cpi	r24, 0x58	; 88
    1af0:	79 f0       	breq	.+30     	; 0x1b10 <vfprintf+0x282>
    1af2:	b5 c0       	rjmp	.+362    	; 0x1c5e <vfprintf+0x3d0>
    1af4:	80 37       	cpi	r24, 0x70	; 112
    1af6:	19 f0       	breq	.+6      	; 0x1afe <vfprintf+0x270>
    1af8:	88 37       	cpi	r24, 0x78	; 120
    1afa:	21 f0       	breq	.+8      	; 0x1b04 <vfprintf+0x276>
    1afc:	b0 c0       	rjmp	.+352    	; 0x1c5e <vfprintf+0x3d0>
    1afe:	e9 2f       	mov	r30, r25
    1b00:	e0 61       	ori	r30, 0x10	; 16
    1b02:	be 2e       	mov	r11, r30
    1b04:	b4 fe       	sbrs	r11, 4
    1b06:	0d c0       	rjmp	.+26     	; 0x1b22 <vfprintf+0x294>
    1b08:	fb 2d       	mov	r31, r11
    1b0a:	f4 60       	ori	r31, 0x04	; 4
    1b0c:	bf 2e       	mov	r11, r31
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <vfprintf+0x294>
    1b10:	34 fe       	sbrs	r3, 4
    1b12:	0a c0       	rjmp	.+20     	; 0x1b28 <vfprintf+0x29a>
    1b14:	29 2f       	mov	r18, r25
    1b16:	26 60       	ori	r18, 0x06	; 6
    1b18:	b2 2e       	mov	r11, r18
    1b1a:	06 c0       	rjmp	.+12     	; 0x1b28 <vfprintf+0x29a>
    1b1c:	28 e0       	ldi	r18, 0x08	; 8
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	05 c0       	rjmp	.+10     	; 0x1b2c <vfprintf+0x29e>
    1b22:	20 e1       	ldi	r18, 0x10	; 16
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <vfprintf+0x29e>
    1b28:	20 e1       	ldi	r18, 0x10	; 16
    1b2a:	32 e0       	ldi	r19, 0x02	; 2
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	b7 fe       	sbrs	r11, 7
    1b30:	07 c0       	rjmp	.+14     	; 0x1b40 <vfprintf+0x2b2>
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	0c 5f       	subi	r16, 0xFC	; 252
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	06 c0       	rjmp	.+12     	; 0x1b4c <vfprintf+0x2be>
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 5f       	subi	r16, 0xFE	; 254
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4c:	a3 01       	movw	r20, r6
    1b4e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__ultoa_invert>
    1b52:	88 2e       	mov	r8, r24
    1b54:	86 18       	sub	r8, r6
    1b56:	fb 2d       	mov	r31, r11
    1b58:	ff 77       	andi	r31, 0x7F	; 127
    1b5a:	3f 2e       	mov	r3, r31
    1b5c:	36 fe       	sbrs	r3, 6
    1b5e:	0d c0       	rjmp	.+26     	; 0x1b7a <vfprintf+0x2ec>
    1b60:	23 2d       	mov	r18, r3
    1b62:	2e 7f       	andi	r18, 0xFE	; 254
    1b64:	a2 2e       	mov	r10, r18
    1b66:	89 14       	cp	r8, r9
    1b68:	58 f4       	brcc	.+22     	; 0x1b80 <vfprintf+0x2f2>
    1b6a:	34 fe       	sbrs	r3, 4
    1b6c:	0b c0       	rjmp	.+22     	; 0x1b84 <vfprintf+0x2f6>
    1b6e:	32 fc       	sbrc	r3, 2
    1b70:	09 c0       	rjmp	.+18     	; 0x1b84 <vfprintf+0x2f6>
    1b72:	83 2d       	mov	r24, r3
    1b74:	8e 7e       	andi	r24, 0xEE	; 238
    1b76:	a8 2e       	mov	r10, r24
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <vfprintf+0x2f6>
    1b7a:	b8 2c       	mov	r11, r8
    1b7c:	a3 2c       	mov	r10, r3
    1b7e:	03 c0       	rjmp	.+6      	; 0x1b86 <vfprintf+0x2f8>
    1b80:	b8 2c       	mov	r11, r8
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <vfprintf+0x2f8>
    1b84:	b9 2c       	mov	r11, r9
    1b86:	a4 fe       	sbrs	r10, 4
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <vfprintf+0x31a>
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e8 0d       	add	r30, r8
    1b8e:	f1 1d       	adc	r31, r1
    1b90:	80 81       	ld	r24, Z
    1b92:	80 33       	cpi	r24, 0x30	; 48
    1b94:	21 f4       	brne	.+8      	; 0x1b9e <vfprintf+0x310>
    1b96:	9a 2d       	mov	r25, r10
    1b98:	99 7e       	andi	r25, 0xE9	; 233
    1b9a:	a9 2e       	mov	r10, r25
    1b9c:	09 c0       	rjmp	.+18     	; 0x1bb0 <vfprintf+0x322>
    1b9e:	a2 fe       	sbrs	r10, 2
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <vfprintf+0x320>
    1ba2:	b3 94       	inc	r11
    1ba4:	b3 94       	inc	r11
    1ba6:	04 c0       	rjmp	.+8      	; 0x1bb0 <vfprintf+0x322>
    1ba8:	8a 2d       	mov	r24, r10
    1baa:	86 78       	andi	r24, 0x86	; 134
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <vfprintf+0x322>
    1bae:	b3 94       	inc	r11
    1bb0:	a3 fc       	sbrc	r10, 3
    1bb2:	11 c0       	rjmp	.+34     	; 0x1bd6 <vfprintf+0x348>
    1bb4:	a0 fe       	sbrs	r10, 0
    1bb6:	06 c0       	rjmp	.+12     	; 0x1bc4 <vfprintf+0x336>
    1bb8:	b2 14       	cp	r11, r2
    1bba:	88 f4       	brcc	.+34     	; 0x1bde <vfprintf+0x350>
    1bbc:	28 0c       	add	r2, r8
    1bbe:	92 2c       	mov	r9, r2
    1bc0:	9b 18       	sub	r9, r11
    1bc2:	0e c0       	rjmp	.+28     	; 0x1be0 <vfprintf+0x352>
    1bc4:	b2 14       	cp	r11, r2
    1bc6:	60 f4       	brcc	.+24     	; 0x1be0 <vfprintf+0x352>
    1bc8:	b6 01       	movw	r22, r12
    1bca:	80 e2       	ldi	r24, 0x20	; 32
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1bd2:	b3 94       	inc	r11
    1bd4:	f7 cf       	rjmp	.-18     	; 0x1bc4 <vfprintf+0x336>
    1bd6:	b2 14       	cp	r11, r2
    1bd8:	18 f4       	brcc	.+6      	; 0x1be0 <vfprintf+0x352>
    1bda:	2b 18       	sub	r2, r11
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <vfprintf+0x354>
    1bde:	98 2c       	mov	r9, r8
    1be0:	21 2c       	mov	r2, r1
    1be2:	a4 fe       	sbrs	r10, 4
    1be4:	10 c0       	rjmp	.+32     	; 0x1c06 <vfprintf+0x378>
    1be6:	b6 01       	movw	r22, r12
    1be8:	80 e3       	ldi	r24, 0x30	; 48
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1bf0:	a2 fe       	sbrs	r10, 2
    1bf2:	17 c0       	rjmp	.+46     	; 0x1c22 <vfprintf+0x394>
    1bf4:	a1 fc       	sbrc	r10, 1
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <vfprintf+0x370>
    1bf8:	88 e7       	ldi	r24, 0x78	; 120
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <vfprintf+0x374>
    1bfe:	88 e5       	ldi	r24, 0x58	; 88
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	b6 01       	movw	r22, r12
    1c04:	0c c0       	rjmp	.+24     	; 0x1c1e <vfprintf+0x390>
    1c06:	8a 2d       	mov	r24, r10
    1c08:	86 78       	andi	r24, 0x86	; 134
    1c0a:	59 f0       	breq	.+22     	; 0x1c22 <vfprintf+0x394>
    1c0c:	a1 fe       	sbrs	r10, 1
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <vfprintf+0x386>
    1c10:	8b e2       	ldi	r24, 0x2B	; 43
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <vfprintf+0x388>
    1c14:	80 e2       	ldi	r24, 0x20	; 32
    1c16:	a7 fc       	sbrc	r10, 7
    1c18:	8d e2       	ldi	r24, 0x2D	; 45
    1c1a:	b6 01       	movw	r22, r12
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1c22:	89 14       	cp	r8, r9
    1c24:	38 f4       	brcc	.+14     	; 0x1c34 <vfprintf+0x3a6>
    1c26:	b6 01       	movw	r22, r12
    1c28:	80 e3       	ldi	r24, 0x30	; 48
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1c30:	9a 94       	dec	r9
    1c32:	f7 cf       	rjmp	.-18     	; 0x1c22 <vfprintf+0x394>
    1c34:	8a 94       	dec	r8
    1c36:	f3 01       	movw	r30, r6
    1c38:	e8 0d       	add	r30, r8
    1c3a:	f1 1d       	adc	r31, r1
    1c3c:	80 81       	ld	r24, Z
    1c3e:	b6 01       	movw	r22, r12
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1c46:	81 10       	cpse	r8, r1
    1c48:	f5 cf       	rjmp	.-22     	; 0x1c34 <vfprintf+0x3a6>
    1c4a:	22 20       	and	r2, r2
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <vfprintf+0x3c2>
    1c4e:	42 ce       	rjmp	.-892    	; 0x18d4 <vfprintf+0x46>
    1c50:	b6 01       	movw	r22, r12
    1c52:	80 e2       	ldi	r24, 0x20	; 32
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1c5a:	2a 94       	dec	r2
    1c5c:	f6 cf       	rjmp	.-20     	; 0x1c4a <vfprintf+0x3bc>
    1c5e:	f6 01       	movw	r30, r12
    1c60:	86 81       	ldd	r24, Z+6	; 0x06
    1c62:	97 81       	ldd	r25, Z+7	; 0x07
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <vfprintf+0x3dc>
    1c66:	8f ef       	ldi	r24, 0xFF	; 255
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	2b 96       	adiw	r28, 0x0b	; 11
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	bf 90       	pop	r11
    1c82:	af 90       	pop	r10
    1c84:	9f 90       	pop	r9
    1c86:	8f 90       	pop	r8
    1c88:	7f 90       	pop	r7
    1c8a:	6f 90       	pop	r6
    1c8c:	5f 90       	pop	r5
    1c8e:	4f 90       	pop	r4
    1c90:	3f 90       	pop	r3
    1c92:	2f 90       	pop	r2
    1c94:	08 95       	ret

00001c96 <strnlen_P>:
    1c96:	fc 01       	movw	r30, r24
    1c98:	05 90       	lpm	r0, Z+
    1c9a:	61 50       	subi	r22, 0x01	; 1
    1c9c:	70 40       	sbci	r23, 0x00	; 0
    1c9e:	01 10       	cpse	r0, r1
    1ca0:	d8 f7       	brcc	.-10     	; 0x1c98 <strnlen_P+0x2>
    1ca2:	80 95       	com	r24
    1ca4:	90 95       	com	r25
    1ca6:	8e 0f       	add	r24, r30
    1ca8:	9f 1f       	adc	r25, r31
    1caa:	08 95       	ret

00001cac <strnlen>:
    1cac:	fc 01       	movw	r30, r24
    1cae:	61 50       	subi	r22, 0x01	; 1
    1cb0:	70 40       	sbci	r23, 0x00	; 0
    1cb2:	01 90       	ld	r0, Z+
    1cb4:	01 10       	cpse	r0, r1
    1cb6:	d8 f7       	brcc	.-10     	; 0x1cae <strnlen+0x2>
    1cb8:	80 95       	com	r24
    1cba:	90 95       	com	r25
    1cbc:	8e 0f       	add	r24, r30
    1cbe:	9f 1f       	adc	r25, r31
    1cc0:	08 95       	ret

00001cc2 <fputc>:
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	fb 01       	movw	r30, r22
    1ccc:	23 81       	ldd	r18, Z+3	; 0x03
    1cce:	21 fd       	sbrc	r18, 1
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <fputc+0x16>
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	9f ef       	ldi	r25, 0xFF	; 255
    1cd6:	2c c0       	rjmp	.+88     	; 0x1d30 <fputc+0x6e>
    1cd8:	22 ff       	sbrs	r18, 2
    1cda:	16 c0       	rjmp	.+44     	; 0x1d08 <fputc+0x46>
    1cdc:	46 81       	ldd	r20, Z+6	; 0x06
    1cde:	57 81       	ldd	r21, Z+7	; 0x07
    1ce0:	24 81       	ldd	r18, Z+4	; 0x04
    1ce2:	35 81       	ldd	r19, Z+5	; 0x05
    1ce4:	42 17       	cp	r20, r18
    1ce6:	53 07       	cpc	r21, r19
    1ce8:	44 f4       	brge	.+16     	; 0x1cfa <fputc+0x38>
    1cea:	a0 81       	ld	r26, Z
    1cec:	b1 81       	ldd	r27, Z+1	; 0x01
    1cee:	9d 01       	movw	r18, r26
    1cf0:	2f 5f       	subi	r18, 0xFF	; 255
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf4:	20 83       	st	Z, r18
    1cf6:	31 83       	std	Z+1, r19	; 0x01
    1cf8:	8c 93       	st	X, r24
    1cfa:	26 81       	ldd	r18, Z+6	; 0x06
    1cfc:	37 81       	ldd	r19, Z+7	; 0x07
    1cfe:	2f 5f       	subi	r18, 0xFF	; 255
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	26 83       	std	Z+6, r18	; 0x06
    1d04:	37 83       	std	Z+7, r19	; 0x07
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <fputc+0x6e>
    1d08:	8b 01       	movw	r16, r22
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	fb 01       	movw	r30, r22
    1d0e:	00 84       	ldd	r0, Z+8	; 0x08
    1d10:	f1 85       	ldd	r31, Z+9	; 0x09
    1d12:	e0 2d       	mov	r30, r0
    1d14:	09 95       	icall
    1d16:	89 2b       	or	r24, r25
    1d18:	e1 f6       	brne	.-72     	; 0x1cd2 <fputc+0x10>
    1d1a:	d8 01       	movw	r26, r16
    1d1c:	16 96       	adiw	r26, 0x06	; 6
    1d1e:	8d 91       	ld	r24, X+
    1d20:	9c 91       	ld	r25, X
    1d22:	17 97       	sbiw	r26, 0x07	; 7
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	16 96       	adiw	r26, 0x06	; 6
    1d28:	8d 93       	st	X+, r24
    1d2a:	9c 93       	st	X, r25
    1d2c:	17 97       	sbiw	r26, 0x07	; 7
    1d2e:	ce 01       	movw	r24, r28
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <__ultoa_invert>:
    1d3a:	fa 01       	movw	r30, r20
    1d3c:	aa 27       	eor	r26, r26
    1d3e:	28 30       	cpi	r18, 0x08	; 8
    1d40:	51 f1       	breq	.+84     	; 0x1d96 <__ultoa_invert+0x5c>
    1d42:	20 31       	cpi	r18, 0x10	; 16
    1d44:	81 f1       	breq	.+96     	; 0x1da6 <__ultoa_invert+0x6c>
    1d46:	e8 94       	clt
    1d48:	6f 93       	push	r22
    1d4a:	6e 7f       	andi	r22, 0xFE	; 254
    1d4c:	6e 5f       	subi	r22, 0xFE	; 254
    1d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d50:	8f 4f       	sbci	r24, 0xFF	; 255
    1d52:	9f 4f       	sbci	r25, 0xFF	; 255
    1d54:	af 4f       	sbci	r26, 0xFF	; 255
    1d56:	b1 e0       	ldi	r27, 0x01	; 1
    1d58:	3e d0       	rcall	.+124    	; 0x1dd6 <__ultoa_invert+0x9c>
    1d5a:	b4 e0       	ldi	r27, 0x04	; 4
    1d5c:	3c d0       	rcall	.+120    	; 0x1dd6 <__ultoa_invert+0x9c>
    1d5e:	67 0f       	add	r22, r23
    1d60:	78 1f       	adc	r23, r24
    1d62:	89 1f       	adc	r24, r25
    1d64:	9a 1f       	adc	r25, r26
    1d66:	a1 1d       	adc	r26, r1
    1d68:	68 0f       	add	r22, r24
    1d6a:	79 1f       	adc	r23, r25
    1d6c:	8a 1f       	adc	r24, r26
    1d6e:	91 1d       	adc	r25, r1
    1d70:	a1 1d       	adc	r26, r1
    1d72:	6a 0f       	add	r22, r26
    1d74:	71 1d       	adc	r23, r1
    1d76:	81 1d       	adc	r24, r1
    1d78:	91 1d       	adc	r25, r1
    1d7a:	a1 1d       	adc	r26, r1
    1d7c:	20 d0       	rcall	.+64     	; 0x1dbe <__ultoa_invert+0x84>
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <__ultoa_invert+0x48>
    1d80:	68 94       	set
    1d82:	3f 91       	pop	r19
    1d84:	2a e0       	ldi	r18, 0x0A	; 10
    1d86:	26 9f       	mul	r18, r22
    1d88:	11 24       	eor	r1, r1
    1d8a:	30 19       	sub	r19, r0
    1d8c:	30 5d       	subi	r19, 0xD0	; 208
    1d8e:	31 93       	st	Z+, r19
    1d90:	de f6       	brtc	.-74     	; 0x1d48 <__ultoa_invert+0xe>
    1d92:	cf 01       	movw	r24, r30
    1d94:	08 95       	ret
    1d96:	46 2f       	mov	r20, r22
    1d98:	47 70       	andi	r20, 0x07	; 7
    1d9a:	40 5d       	subi	r20, 0xD0	; 208
    1d9c:	41 93       	st	Z+, r20
    1d9e:	b3 e0       	ldi	r27, 0x03	; 3
    1da0:	0f d0       	rcall	.+30     	; 0x1dc0 <__ultoa_invert+0x86>
    1da2:	c9 f7       	brne	.-14     	; 0x1d96 <__ultoa_invert+0x5c>
    1da4:	f6 cf       	rjmp	.-20     	; 0x1d92 <__ultoa_invert+0x58>
    1da6:	46 2f       	mov	r20, r22
    1da8:	4f 70       	andi	r20, 0x0F	; 15
    1daa:	40 5d       	subi	r20, 0xD0	; 208
    1dac:	4a 33       	cpi	r20, 0x3A	; 58
    1dae:	18 f0       	brcs	.+6      	; 0x1db6 <__ultoa_invert+0x7c>
    1db0:	49 5d       	subi	r20, 0xD9	; 217
    1db2:	31 fd       	sbrc	r19, 1
    1db4:	40 52       	subi	r20, 0x20	; 32
    1db6:	41 93       	st	Z+, r20
    1db8:	02 d0       	rcall	.+4      	; 0x1dbe <__ultoa_invert+0x84>
    1dba:	a9 f7       	brne	.-22     	; 0x1da6 <__ultoa_invert+0x6c>
    1dbc:	ea cf       	rjmp	.-44     	; 0x1d92 <__ultoa_invert+0x58>
    1dbe:	b4 e0       	ldi	r27, 0x04	; 4
    1dc0:	a6 95       	lsr	r26
    1dc2:	97 95       	ror	r25
    1dc4:	87 95       	ror	r24
    1dc6:	77 95       	ror	r23
    1dc8:	67 95       	ror	r22
    1dca:	ba 95       	dec	r27
    1dcc:	c9 f7       	brne	.-14     	; 0x1dc0 <__ultoa_invert+0x86>
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	61 05       	cpc	r22, r1
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	08 95       	ret
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	ac 01       	movw	r20, r24
    1dda:	0a 2e       	mov	r0, r26
    1ddc:	06 94       	lsr	r0
    1dde:	57 95       	ror	r21
    1de0:	47 95       	ror	r20
    1de2:	37 95       	ror	r19
    1de4:	27 95       	ror	r18
    1de6:	ba 95       	dec	r27
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <__ultoa_invert+0xa2>
    1dea:	62 0f       	add	r22, r18
    1dec:	73 1f       	adc	r23, r19
    1dee:	84 1f       	adc	r24, r20
    1df0:	95 1f       	adc	r25, r21
    1df2:	a0 1d       	adc	r26, r0
    1df4:	08 95       	ret

00001df6 <_exit>:
    1df6:	f8 94       	cli

00001df8 <__stop_program>:
    1df8:	ff cf       	rjmp	.-2      	; 0x1df8 <__stop_program>
