
MK_prosjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004c2  00804000  000034c4  00003558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  008044c2  008044c2  00003a1a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003a1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00003ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007b58  00000000  00000000  00003d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038c1  00000000  00000000  0000b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fd7  00000000  00000000  0000f179  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  00011150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039f6  00000000  00000000  000118b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000148b  00000000  00000000  000152a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00016731  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 01 	jmp	0x256	; 0x256 <__ctors_end>
       4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
       8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
       c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      10:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      14:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__vector_5>
      18:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      1c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      20:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      24:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      28:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      2c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      34:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      38:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      3c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      40:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      44:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      48:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      4c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      50:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      54:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      58:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      5c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      60:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      64:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      68:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      6c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      70:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      74:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      78:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      7c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      80:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      84:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      88:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      8c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      90:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      94:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      98:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      9c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      a0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      a4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      a8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      ac:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      b0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      b4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      b8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      bc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      c0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      c4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      c8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      cc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      d0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      d4:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__vector_53>
      d8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      dc:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      e0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      e4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      e8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      ec:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      f0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      f4:	13 0b       	sbc	r17, r19
      f6:	40 0b       	sbc	r20, r16
      f8:	4c 0b       	sbc	r20, r28
      fa:	c7 0b       	sbc	r28, r23
      fc:	b3 0c       	add	r11, r3
      fe:	b6 0c       	add	r11, r6
     100:	b9 0c       	add	r11, r9
     102:	bc 0c       	add	r11, r12
     104:	bf 0c       	add	r11, r15

00000106 <__trampolines_end>:
     106:	6e 61       	ori	r22, 0x1E	; 30
     108:	6e 00       	.word	0x006e	; ????

0000010a <__c.2332>:
     10a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     11a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     12a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     13a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     14a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     15a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     16a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     17a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     18a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     19a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1aa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1ba:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ca:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1da:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ea:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1fa:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000208 <__c.2529>:
     208:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     218:	47 00                                               G.

0000021a <pstr_an>:
     21a:	61 6e 00                                            an.

0000021d <pstr_nfinity>:
     21d:	6e 66 69 6e 69 74 79 00                             nfinity.

00000225 <pwr_m10>:
     225:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     235:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000023d <pwr_p10>:
     23d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     24d:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000256 <__ctors_end>:
     256:	11 24       	eor	r1, r1
     258:	1f be       	out	0x3f, r1	; 63
     25a:	cf ef       	ldi	r28, 0xFF	; 255
     25c:	cd bf       	out	0x3d, r28	; 61
     25e:	df e7       	ldi	r29, 0x7F	; 127
     260:	de bf       	out	0x3e, r29	; 62

00000262 <__do_copy_data>:
     262:	14 e4       	ldi	r17, 0x44	; 68
     264:	a0 e0       	ldi	r26, 0x00	; 0
     266:	b0 e4       	ldi	r27, 0x40	; 64
     268:	e4 ec       	ldi	r30, 0xC4	; 196
     26a:	f4 e3       	ldi	r31, 0x34	; 52
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	0b bf       	out	0x3b, r16	; 59
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x14>
     272:	07 90       	elpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	a2 3c       	cpi	r26, 0xC2	; 194
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0x10>

0000027c <__do_clear_bss>:
     27c:	25 e4       	ldi	r18, 0x45	; 69
     27e:	a2 ec       	ldi	r26, 0xC2	; 194
     280:	b4 e4       	ldi	r27, 0x44	; 68
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	a9 36       	cpi	r26, 0x69	; 105
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <main>
     290:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <_exit>

00000294 <__bad_interrupt>:
     294:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000298 <dutycalc>:
     298:	68 2f       	mov	r22, r24
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__floatsisf>
     2a4:	2a e0       	ldi	r18, 0x0A	; 10
     2a6:	37 ed       	ldi	r19, 0xD7	; 215
     2a8:	43 e2       	ldi	r20, 0x23	; 35
     2aa:	5c e3       	ldi	r21, 0x3C	; 60
     2ac:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__mulsf3>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	4f e7       	ldi	r20, 0x7F	; 127
     2b6:	53 e4       	ldi	r21, 0x43	; 67
     2b8:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__mulsf3>
     2bc:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fixunssfsi>
     2c0:	86 2f       	mov	r24, r22
     2c2:	08 95       	ret

000002c4 <AnalogWrite>:
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	c8 2f       	mov	r28, r24
     2ca:	d6 2f       	mov	r29, r22
     2cc:	81 11       	cpse	r24, r1
     2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <AnalogWrite+0x20>
     2d0:	86 2f       	mov	r24, r22
     2d2:	0e 94 4c 01 	call	0x298	; 0x298 <dutycalc>
     2d6:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
     2da:	e0 e6       	ldi	r30, 0x60	; 96
     2dc:	f4 e0       	ldi	r31, 0x04	; 4
     2de:	80 81       	ld	r24, Z
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	80 83       	st	Z, r24
     2e4:	c1 30       	cpi	r28, 0x01	; 1
     2e6:	51 f4       	brne	.+20     	; 0x2fc <AnalogWrite+0x38>
     2e8:	8d 2f       	mov	r24, r29
     2ea:	0e 94 4c 01 	call	0x298	; 0x298 <dutycalc>
     2ee:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7e0a2a>
     2f2:	e0 e6       	ldi	r30, 0x60	; 96
     2f4:	f4 e0       	ldi	r31, 0x04	; 4
     2f6:	80 81       	ld	r24, Z
     2f8:	82 60       	ori	r24, 0x02	; 2
     2fa:	80 83       	st	Z, r24
     2fc:	c2 30       	cpi	r28, 0x02	; 2
     2fe:	51 f4       	brne	.+20     	; 0x314 <AnalogWrite+0x50>
     300:	8d 2f       	mov	r24, r29
     302:	0e 94 4c 01 	call	0x298	; 0x298 <dutycalc>
     306:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7e0a2c>
     30a:	e0 e6       	ldi	r30, 0x60	; 96
     30c:	f4 e0       	ldi	r31, 0x04	; 4
     30e:	80 81       	ld	r24, Z
     310:	84 60       	ori	r24, 0x04	; 4
     312:	80 83       	st	Z, r24
     314:	c3 30       	cpi	r28, 0x03	; 3
     316:	51 f4       	brne	.+20     	; 0x32c <AnalogWrite+0x68>
     318:	8d 2f       	mov	r24, r29
     31a:	0e 94 4c 01 	call	0x298	; 0x298 <dutycalc>
     31e:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
     322:	e0 e6       	ldi	r30, 0x60	; 96
     324:	f4 e0       	ldi	r31, 0x04	; 4
     326:	80 81       	ld	r24, Z
     328:	88 60       	ori	r24, 0x08	; 8
     32a:	80 83       	st	Z, r24
     32c:	c4 30       	cpi	r28, 0x04	; 4
     32e:	51 f4       	brne	.+20     	; 0x344 <AnalogWrite+0x80>
     330:	8d 2f       	mov	r24, r29
     332:	0e 94 4c 01 	call	0x298	; 0x298 <dutycalc>
     336:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <__TEXT_REGION_LENGTH__+0x7e0a6c>
     33a:	e0 e2       	ldi	r30, 0x20	; 32
     33c:	f4 e0       	ldi	r31, 0x04	; 4
     33e:	80 81       	ld	r24, Z
     340:	82 60       	ori	r24, 0x02	; 2
     342:	80 83       	st	Z, r24
     344:	c5 30       	cpi	r28, 0x05	; 5
     346:	51 f4       	brne	.+20     	; 0x35c <AnalogWrite+0x98>
     348:	8d 2f       	mov	r24, r29
     34a:	0e 94 4c 01 	call	0x298	; 0x298 <dutycalc>
     34e:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <__TEXT_REGION_LENGTH__+0x7e0a69>
     352:	e0 e2       	ldi	r30, 0x20	; 32
     354:	f4 e0       	ldi	r31, 0x04	; 4
     356:	80 81       	ld	r24, Z
     358:	84 60       	ori	r24, 0x04	; 4
     35a:	80 83       	st	Z, r24
     35c:	c6 30       	cpi	r28, 0x06	; 6
     35e:	51 f4       	brne	.+20     	; 0x374 <AnalogWrite+0xb0>
     360:	8d 2f       	mov	r24, r29
     362:	0e 94 4c 01 	call	0x298	; 0x298 <dutycalc>
     366:	80 93 6b 0a 	sts	0x0A6B, r24	; 0x800a6b <__TEXT_REGION_LENGTH__+0x7e0a6b>
     36a:	e0 e2       	ldi	r30, 0x20	; 32
     36c:	f4 e0       	ldi	r31, 0x04	; 4
     36e:	80 81       	ld	r24, Z
     370:	80 61       	ori	r24, 0x10	; 16
     372:	80 83       	st	Z, r24
     374:	c7 30       	cpi	r28, 0x07	; 7
     376:	51 f4       	brne	.+20     	; 0x38c <AnalogWrite+0xc8>
     378:	8d 2f       	mov	r24, r29
     37a:	0e 94 4c 01 	call	0x298	; 0x298 <dutycalc>
     37e:	80 93 6d 0a 	sts	0x0A6D, r24	; 0x800a6d <__TEXT_REGION_LENGTH__+0x7e0a6d>
     382:	e0 e2       	ldi	r30, 0x20	; 32
     384:	f4 e0       	ldi	r31, 0x04	; 4
     386:	80 81       	ld	r24, Z
     388:	80 62       	ori	r24, 0x20	; 32
     38a:	80 83       	st	Z, r24
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <Read_Tacho>:
     392:	81 11       	cpse	r24, r1
     394:	04 c0       	rjmp	.+8      	; 0x39e <Read_Tacho+0xc>
     396:	80 e4       	ldi	r24, 0x40	; 64
     398:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     39c:	29 c0       	rjmp	.+82     	; 0x3f0 <Read_Tacho+0x5e>
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	21 f4       	brne	.+8      	; 0x3aa <Read_Tacho+0x18>
     3a2:	81 e4       	ldi	r24, 0x41	; 65
     3a4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3a8:	23 c0       	rjmp	.+70     	; 0x3f0 <Read_Tacho+0x5e>
     3aa:	82 30       	cpi	r24, 0x02	; 2
     3ac:	21 f4       	brne	.+8      	; 0x3b6 <Read_Tacho+0x24>
     3ae:	82 e4       	ldi	r24, 0x42	; 66
     3b0:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3b4:	1d c0       	rjmp	.+58     	; 0x3f0 <Read_Tacho+0x5e>
     3b6:	83 30       	cpi	r24, 0x03	; 3
     3b8:	21 f4       	brne	.+8      	; 0x3c2 <Read_Tacho+0x30>
     3ba:	83 e4       	ldi	r24, 0x43	; 67
     3bc:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3c0:	17 c0       	rjmp	.+46     	; 0x3f0 <Read_Tacho+0x5e>
     3c2:	84 30       	cpi	r24, 0x04	; 4
     3c4:	21 f4       	brne	.+8      	; 0x3ce <Read_Tacho+0x3c>
     3c6:	84 e4       	ldi	r24, 0x44	; 68
     3c8:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3cc:	11 c0       	rjmp	.+34     	; 0x3f0 <Read_Tacho+0x5e>
     3ce:	85 30       	cpi	r24, 0x05	; 5
     3d0:	21 f4       	brne	.+8      	; 0x3da <Read_Tacho+0x48>
     3d2:	85 e4       	ldi	r24, 0x45	; 69
     3d4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <Read_Tacho+0x5e>
     3da:	86 30       	cpi	r24, 0x06	; 6
     3dc:	21 f4       	brne	.+8      	; 0x3e6 <Read_Tacho+0x54>
     3de:	86 e4       	ldi	r24, 0x46	; 70
     3e0:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <Read_Tacho+0x5e>
     3e6:	87 30       	cpi	r24, 0x07	; 7
     3e8:	19 f4       	brne	.+6      	; 0x3f0 <Read_Tacho+0x5e>
     3ea:	87 e4       	ldi	r24, 0x47	; 71
     3ec:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__TEXT_REGION_LENGTH__+0x7e023e>
     3f6:	20 91 0c 0b 	lds	r18, 0x0B0C	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
     3fa:	30 91 0d 0b 	lds	r19, 0x0B0D	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
     3fe:	c9 01       	movw	r24, r18
     400:	a0 e0       	ldi	r26, 0x00	; 0
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	00 97       	sbiw	r24, 0x00	; 0
     406:	a1 05       	cpc	r26, r1
     408:	b1 05       	cpc	r27, r1
     40a:	79 f0       	breq	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     40c:	9c 01       	movw	r18, r24
     40e:	ad 01       	movw	r20, r26
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	44 1f       	adc	r20, r20
     416:	55 1f       	adc	r21, r21
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	70 e7       	ldi	r23, 0x70	; 112
     41c:	88 e3       	ldi	r24, 0x38	; 56
     41e:	99 e3       	ldi	r25, 0x39	; 57
     420:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
     424:	ca 01       	movw	r24, r20
     426:	b9 01       	movw	r22, r18
     428:	03 c0       	rjmp	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	cb 01       	movw	r24, r22
     430:	10 92 0c 0b 	sts	0x0B0C, r1	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
     434:	10 92 0d 0b 	sts	0x0B0D, r1	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
     438:	08 95       	ret

0000043a <TCA0_init>:
     43a:	e0 ee       	ldi	r30, 0xE0	; 224
     43c:	f5 e0       	ldi	r31, 0x05	; 5
     43e:	86 81       	ldd	r24, Z+6	; 0x06
     440:	83 60       	ori	r24, 0x03	; 3
     442:	86 83       	std	Z+6, r24	; 0x06
     444:	e0 e0       	ldi	r30, 0x00	; 0
     446:	fa e0       	ldi	r31, 0x0A	; 10
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	83 83       	std	Z+3, r24	; 0x03
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	87 a3       	std	Z+39, r24	; 0x27
     450:	86 a3       	std	Z+38, r24	; 0x26
     452:	89 e0       	ldi	r24, 0x09	; 9
     454:	80 83       	st	Z, r24
     456:	87 e0       	ldi	r24, 0x07	; 7
     458:	81 83       	std	Z+1, r24	; 0x01
     45a:	81 81       	ldd	r24, Z+1	; 0x01
     45c:	80 67       	ori	r24, 0x70	; 112
     45e:	81 83       	std	Z+1, r24	; 0x01
     460:	08 95       	ret

00000462 <TCA1_init>:
     462:	e0 e2       	ldi	r30, 0x20	; 32
     464:	f4 e0       	ldi	r31, 0x04	; 4
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
     46c:	83 85       	ldd	r24, Z+11	; 0x0b
     46e:	88 60       	ori	r24, 0x08	; 8
     470:	83 87       	std	Z+11, r24	; 0x0b
     472:	e0 ee       	ldi	r30, 0xE0	; 224
     474:	f5 e0       	ldi	r31, 0x05	; 5
     476:	86 81       	ldd	r24, Z+6	; 0x06
     478:	86 83       	std	Z+6, r24	; 0x06
     47a:	e0 e4       	ldi	r30, 0x40	; 64
     47c:	fa e0       	ldi	r31, 0x0A	; 10
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	83 83       	std	Z+3, r24	; 0x03
     482:	8f ef       	ldi	r24, 0xFF	; 255
     484:	87 a3       	std	Z+39, r24	; 0x27
     486:	86 a3       	std	Z+38, r24	; 0x26
     488:	89 e0       	ldi	r24, 0x09	; 9
     48a:	80 83       	st	Z, r24
     48c:	84 e0       	ldi	r24, 0x04	; 4
     48e:	81 83       	std	Z+1, r24	; 0x01
     490:	81 81       	ldd	r24, Z+1	; 0x01
     492:	80 67       	ori	r24, 0x70	; 112
     494:	81 83       	std	Z+1, r24	; 0x01
     496:	08 95       	ret

00000498 <PWM_init>:
     498:	0e 94 31 02 	call	0x462	; 0x462 <TCA1_init>
     49c:	0e 94 1d 02 	call	0x43a	; 0x43a <TCA0_init>
     4a0:	08 95       	ret

000004a2 <TCB0_init>:
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
     4a8:	e0 e0       	ldi	r30, 0x00	; 0
     4aa:	fb e0       	ldi	r31, 0x0B	; 11
     4ac:	14 86       	std	Z+12, r1	; 0x0c
     4ae:	15 86       	std	Z+13, r1	; 0x0d
     4b0:	12 86       	std	Z+10, r1	; 0x0a
     4b2:	13 86       	std	Z+11, r1	; 0x0b
     4b4:	80 81       	ld	r24, Z
     4b6:	81 60       	ori	r24, 0x01	; 1
     4b8:	80 83       	st	Z, r24
     4ba:	83 e1       	ldi	r24, 0x13	; 19
     4bc:	81 83       	std	Z+1, r24	; 0x01
     4be:	84 81       	ldd	r24, Z+4	; 0x04
     4c0:	81 60       	ori	r24, 0x01	; 1
     4c2:	84 83       	std	Z+4, r24	; 0x04
     4c4:	08 95       	ret

000004c6 <RTC_init>:
     4c6:	9c 01       	movw	r18, r24
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	88 ed       	ldi	r24, 0xD8	; 216
     4cc:	84 bf       	out	0x34, r24	; 52
     4ce:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     4d2:	e0 e4       	ldi	r30, 0x40	; 64
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	87 83       	std	Z+7, r24	; 0x07
     4da:	22 87       	std	Z+10, r18	; 0x0a
     4dc:	33 87       	std	Z+11, r19	; 0x0b
     4de:	92 83       	std	Z+2, r25	; 0x02
     4e0:	89 e7       	ldi	r24, 0x79	; 121
     4e2:	80 83       	st	Z, r24
     4e4:	08 95       	ret

000004e6 <Osc_init>:
     4e6:	88 0f       	add	r24, r24
     4e8:	88 0f       	add	r24, r24
     4ea:	98 ed       	ldi	r25, 0xD8	; 216
     4ec:	94 bf       	out	0x34, r25	; 52
     4ee:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     4f2:	08 95       	ret

000004f4 <System_init>:
     4f4:	0e 94 4c 02 	call	0x498	; 0x498 <PWM_init>
     4f8:	87 e0       	ldi	r24, 0x07	; 7
     4fa:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Osc_init>
     4fe:	60 e8       	ldi	r22, 0x80	; 128
     500:	75 e2       	ldi	r23, 0x25	; 37
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 30 09 	call	0x1260	; 0x1260 <UART3_init>
     50a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <TCB0_init>
     50e:	0e 94 29 03 	call	0x652	; 0x652 <TWI_init>
     512:	80 e1       	ldi	r24, 0x10	; 16
     514:	9e e0       	ldi	r25, 0x0E	; 14
     516:	0e 94 63 02 	call	0x4c6	; 0x4c6 <RTC_init>
     51a:	78 94       	sei
     51c:	08 95       	ret

0000051e <TWI_EndRead>:
     51e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     522:	88 23       	and	r24, r24
     524:	e4 f7       	brge	.-8      	; 0x51e <TWI_EndRead>
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
     52c:	08 95       	ret

0000052e <TWI_ReadTempdata>:
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 08 17 	call	0x2e10	; 0x2e10 <malloc>
     53a:	ec 01       	movw	r28, r24
     53c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     540:	88 23       	and	r24, r24
     542:	e4 f7       	brge	.-8      	; 0x53c <TWI_ReadTempdata+0xe>
     544:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     548:	80 93 cb 44 	sts	0x44CB, r24	; 0x8044cb <status>
     54c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     550:	88 23       	and	r24, r24
     552:	e4 f7       	brge	.-8      	; 0x54c <TWI_ReadTempdata+0x1e>
     554:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     558:	80 93 ca 44 	sts	0x44CA, r24	; 0x8044ca <humidbyteH>
     55c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     560:	88 23       	and	r24, r24
     562:	e4 f7       	brge	.-8      	; 0x55c <TWI_ReadTempdata+0x2e>
     564:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     568:	80 93 c9 44 	sts	0x44C9, r24	; 0x8044c9 <humidbyteL>
     56c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     570:	88 23       	and	r24, r24
     572:	e4 f7       	brge	.-8      	; 0x56c <TWI_ReadTempdata+0x3e>
     574:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     578:	80 93 c8 44 	sts	0x44C8, r24	; 0x8044c8 <humidtempbyte>
     57c:	80 91 c8 44 	lds	r24, 0x44C8	; 0x8044c8 <humidtempbyte>
     580:	88 83       	st	Y, r24
     582:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     586:	88 23       	and	r24, r24
     588:	e4 f7       	brge	.-8      	; 0x582 <TWI_ReadTempdata+0x54>
     58a:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     58e:	80 93 c7 44 	sts	0x44C7, r24	; 0x8044c7 <tempbyteH>
     592:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <tempbyteH>
     596:	89 83       	std	Y+1, r24	; 0x01
     598:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     59c:	88 23       	and	r24, r24
     59e:	e4 f7       	brge	.-8      	; 0x598 <TWI_ReadTempdata+0x6a>
     5a0:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     5a4:	80 93 c6 44 	sts	0x44C6, r24	; 0x8044c6 <tempbyteL>
     5a8:	80 91 c6 44 	lds	r24, 0x44C6	; 0x8044c6 <tempbyteL>
     5ac:	8a 83       	std	Y+2, r24	; 0x02
     5ae:	0e 94 8f 02 	call	0x51e	; 0x51e <TWI_EndRead>
     5b2:	ce 01       	movw	r24, r28
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <TWI_TransmittData>:
     5ba:	e5 e0       	ldi	r30, 0x05	; 5
     5bc:	f9 e0       	ldi	r31, 0x09	; 9
     5be:	90 81       	ld	r25, Z
     5c0:	90 71       	andi	r25, 0x10	; 16
     5c2:	20 81       	ld	r18, Z
     5c4:	22 95       	swap	r18
     5c6:	26 95       	lsr	r18
     5c8:	26 95       	lsr	r18
     5ca:	23 70       	andi	r18, 0x03	; 3
     5cc:	31 e0       	ldi	r19, 0x01	; 1
     5ce:	23 27       	eor	r18, r19
     5d0:	42 2f       	mov	r20, r18
     5d2:	41 70       	andi	r20, 0x01	; 1
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	9a 01       	movw	r18, r20
     5d8:	29 2b       	or	r18, r25
     5da:	23 2b       	or	r18, r19
     5dc:	71 f7       	brne	.-36     	; 0x5ba <TWI_TransmittData>
     5de:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     5e2:	08 95       	ret

000005e4 <TWI_EndWrite>:
     5e4:	e5 e0       	ldi	r30, 0x05	; 5
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	80 81       	ld	r24, Z
     5ea:	80 71       	andi	r24, 0x10	; 16
     5ec:	90 81       	ld	r25, Z
     5ee:	92 95       	swap	r25
     5f0:	96 95       	lsr	r25
     5f2:	96 95       	lsr	r25
     5f4:	93 70       	andi	r25, 0x03	; 3
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	92 27       	eor	r25, r18
     5fa:	49 2f       	mov	r20, r25
     5fc:	41 70       	andi	r20, 0x01	; 1
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	9a 01       	movw	r18, r20
     602:	28 2b       	or	r18, r24
     604:	c9 01       	movw	r24, r18
     606:	89 2b       	or	r24, r25
     608:	69 f7       	brne	.-38     	; 0x5e4 <TWI_EndWrite>
     60a:	83 e0       	ldi	r24, 0x03	; 3
     60c:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
     610:	08 95       	ret

00000612 <TWI_TransmittAddr>:
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	86 2b       	or	r24, r22
     61a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
     61e:	08 95       	ret

00000620 <TWI_StartTemp>:
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	88 e3       	ldi	r24, 0x38	; 56
     624:	0e 94 09 03 	call	0x612	; 0x612 <TWI_TransmittAddr>
     628:	8c ea       	ldi	r24, 0xAC	; 172
     62a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TWI_TransmittData>
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TWI_TransmittData>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TWI_TransmittData>
     63a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <TWI_EndWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63e:	2f e7       	ldi	r18, 0x7F	; 127
     640:	89 ea       	ldi	r24, 0xA9	; 169
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	21 50       	subi	r18, 0x01	; 1
     646:	80 40       	sbci	r24, 0x00	; 0
     648:	90 40       	sbci	r25, 0x00	; 0
     64a:	e1 f7       	brne	.-8      	; 0x644 <TWI_StartTemp+0x24>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <TWI_StartTemp+0x2e>
     64e:	00 00       	nop
     650:	08 95       	ret

00000652 <TWI_init>:
     652:	e0 e0       	ldi	r30, 0x00	; 0
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	8b e4       	ldi	r24, 0x4B	; 75
     658:	86 83       	std	Z+6, r24	; 0x06
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	83 83       	std	Z+3, r24	; 0x03
     65e:	85 83       	std	Z+5, r24	; 0x05
     660:	83 81       	ldd	r24, Z+3	; 0x03
     662:	82 60       	ori	r24, 0x02	; 2
     664:	83 83       	std	Z+3, r24	; 0x03
     666:	08 95       	ret

00000668 <TempCalc>:
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	60 91 c8 44 	lds	r22, 0x44C8	; 0x8044c8 <humidtempbyte>
     670:	6f 70       	andi	r22, 0x0F	; 15
     672:	86 2f       	mov	r24, r22
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	bc 01       	movw	r22, r24
     67c:	55 27       	eor	r21, r21
     67e:	44 27       	eor	r20, r20
     680:	80 91 c7 44 	lds	r24, 0x44C7	; 0x8044c7 <tempbyteH>
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	98 2f       	mov	r25, r24
     688:	88 27       	eor	r24, r24
     68a:	20 91 c6 44 	lds	r18, 0x44C6	; 0x8044c6 <tempbyteL>
     68e:	82 2b       	or	r24, r18
     690:	a0 e0       	ldi	r26, 0x00	; 0
     692:	b0 e0       	ldi	r27, 0x00	; 0
     694:	8a 01       	movw	r16, r20
     696:	9b 01       	movw	r18, r22
     698:	08 2b       	or	r16, r24
     69a:	19 2b       	or	r17, r25
     69c:	2a 2b       	or	r18, r26
     69e:	3b 2b       	or	r19, r27
     6a0:	c9 01       	movw	r24, r18
     6a2:	b8 01       	movw	r22, r16
     6a4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__floatunsisf>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	55 e3       	ldi	r21, 0x35	; 53
     6b0:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__mulsf3>
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	48 e4       	ldi	r20, 0x48	; 72
     6ba:	53 e4       	ldi	r21, 0x43	; 67
     6bc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__mulsf3>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	48 e4       	ldi	r20, 0x48	; 72
     6c6:	52 e4       	ldi	r21, 0x42	; 66
     6c8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__subsf3>
     6cc:	60 93 c2 44 	sts	0x44C2, r22	; 0x8044c2 <__data_end>
     6d0:	70 93 c3 44 	sts	0x44C3, r23	; 0x8044c3 <__data_end+0x1>
     6d4:	80 93 c4 44 	sts	0x44C4, r24	; 0x8044c4 <__data_end+0x2>
     6d8:	90 93 c5 44 	sts	0x44C5, r25	; 0x8044c5 <__data_end+0x3>
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <TempToUART>:
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	7f 93       	push	r23
     6e8:	6f 93       	push	r22
     6ea:	87 e0       	ldi	r24, 0x07	; 7
     6ec:	90 e4       	ldi	r25, 0x40	; 64
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	84 e3       	ldi	r24, 0x34	; 52
     6f4:	95 e4       	ldi	r25, 0x45	; 69
     6f6:	9f 93       	push	r25
     6f8:	8f 93       	push	r24
     6fa:	0e 94 bd 19 	call	0x337a	; 0x337a <sprintf>
     6fe:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
     702:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
     706:	8d b7       	in	r24, 0x3d	; 61
     708:	9e b7       	in	r25, 0x3e	; 62
     70a:	08 96       	adiw	r24, 0x08	; 8
     70c:	8d bf       	out	0x3d, r24	; 61
     70e:	9e bf       	out	0x3e, r25	; 62
     710:	08 95       	ret

00000712 <TWI_getTemp>:
     712:	0e 94 10 03 	call	0x620	; 0x620 <TWI_StartTemp>
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	88 e3       	ldi	r24, 0x38	; 56
     71a:	0e 94 09 03 	call	0x612	; 0x612 <TWI_TransmittAddr>
     71e:	0e 94 97 02 	call	0x52e	; 0x52e <TWI_ReadTempdata>
     722:	fc 01       	movw	r30, r24
     724:	80 81       	ld	r24, Z
     726:	80 93 c8 44 	sts	0x44C8, r24	; 0x8044c8 <humidtempbyte>
     72a:	81 81       	ldd	r24, Z+1	; 0x01
     72c:	80 93 c7 44 	sts	0x44C7, r24	; 0x8044c7 <tempbyteH>
     730:	82 81       	ldd	r24, Z+2	; 0x02
     732:	80 93 c6 44 	sts	0x44C6, r24	; 0x8044c6 <tempbyteL>
     736:	0e 94 34 03 	call	0x668	; 0x668 <TempCalc>
     73a:	60 93 c2 44 	sts	0x44C2, r22	; 0x8044c2 <__data_end>
     73e:	70 93 c3 44 	sts	0x44C3, r23	; 0x8044c3 <__data_end+0x1>
     742:	80 93 c4 44 	sts	0x44C4, r24	; 0x8044c4 <__data_end+0x2>
     746:	90 93 c5 44 	sts	0x44C5, r25	; 0x8044c5 <__data_end+0x3>
     74a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <TempToUART>
     74e:	2f ef       	ldi	r18, 0xFF	; 255
     750:	83 ed       	ldi	r24, 0xD3	; 211
     752:	90 e3       	ldi	r25, 0x30	; 48
     754:	21 50       	subi	r18, 0x01	; 1
     756:	80 40       	sbci	r24, 0x00	; 0
     758:	90 40       	sbci	r25, 0x00	; 0
     75a:	e1 f7       	brne	.-8      	; 0x754 <TWI_getTemp+0x42>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <TWI_getTemp+0x4c>
     75e:	00 00       	nop
     760:	08 95       	ret

00000762 <ISR_TWI>:
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0e 94 89 03 	call	0x712	; 0x712 <TWI_getTemp>
     76e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <EEPROM_SaveFanStatus>
     772:	c0 90 c2 44 	lds	r12, 0x44C2	; 0x8044c2 <__data_end>
     776:	d0 90 c3 44 	lds	r13, 0x44C3	; 0x8044c3 <__data_end+0x1>
     77a:	e0 90 c4 44 	lds	r14, 0x44C4	; 0x8044c4 <__data_end+0x2>
     77e:	f0 90 c5 44 	lds	r15, 0x44C5	; 0x8044c5 <__data_end+0x3>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	4c e8       	ldi	r20, 0x8C	; 140
     788:	52 e4       	ldi	r21, 0x42	; 66
     78a:	c7 01       	movw	r24, r14
     78c:	b6 01       	movw	r22, r12
     78e:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__gesf2>
     792:	18 16       	cp	r1, r24
     794:	3c f4       	brge	.+14     	; 0x7a4 <ISR_TWI+0x42>
     796:	83 e1       	ldi	r24, 0x13	; 19
     798:	90 e4       	ldi	r25, 0x40	; 64
     79a:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
     79e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
     7a2:	19 c0       	rjmp	.+50     	; 0x7d6 <ISR_TWI+0x74>
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	4a ea       	ldi	r20, 0xAA	; 170
     7aa:	52 e4       	ldi	r21, 0x42	; 66
     7ac:	c7 01       	movw	r24, r14
     7ae:	b6 01       	movw	r22, r12
     7b0:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__gesf2>
     7b4:	18 16       	cp	r1, r24
     7b6:	4c f4       	brge	.+18     	; 0x7ca <ISR_TWI+0x68>
     7b8:	8e e1       	ldi	r24, 0x1E	; 30
     7ba:	90 e4       	ldi	r25, 0x40	; 64
     7bc:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
     7c0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
     7c4:	0e 94 21 0a 	call	0x1442	; 0x1442 <AllOFF>
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <ISR_TWI+0x74>
     7ca:	8a e3       	ldi	r24, 0x3A	; 58
     7cc:	90 e4       	ldi	r25, 0x40	; 64
     7ce:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
     7d2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	08 95       	ret

000007e0 <my_eeprom_update_byte>:
     7e0:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
     7e4:	91 fd       	sbrc	r25, 1
     7e6:	fc cf       	rjmp	.-8      	; 0x7e0 <my_eeprom_update_byte>
     7e8:	9d e9       	ldi	r25, 0x9D	; 157
     7ea:	23 e1       	ldi	r18, 0x13	; 19
     7ec:	94 bf       	out	0x34, r25	; 52
     7ee:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
     7f2:	e8 2f       	mov	r30, r24
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	fc 5e       	subi	r31, 0xEC	; 236
     7f8:	60 83       	st	Z, r22
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	94 bf       	out	0x34, r25	; 52
     7fe:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
     802:	08 95       	ret

00000804 <my_eeprom_update_char>:
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	c8 2f       	mov	r28, r24
     80a:	d6 2f       	mov	r29, r22
     80c:	67 2f       	mov	r22, r23
     80e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <my_eeprom_update_byte>
     812:	6d 2f       	mov	r22, r29
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	8c 0f       	add	r24, r28
     818:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <my_eeprom_update_byte>
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <my_eeprom_read_byte>:
     822:	e8 2f       	mov	r30, r24
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	fc 5e       	subi	r31, 0xEC	; 236
     828:	80 81       	ld	r24, Z
     82a:	08 95       	ret

0000082c <my_eeprom_read_char>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	d8 2f       	mov	r29, r24
     832:	0e 94 11 04 	call	0x822	; 0x822 <my_eeprom_read_byte>
     836:	c8 2f       	mov	r28, r24
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	8d 0f       	add	r24, r29
     83c:	0e 94 11 04 	call	0x822	; 0x822 <my_eeprom_read_byte>
     840:	2c 2f       	mov	r18, r28
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	32 2f       	mov	r19, r18
     846:	22 27       	eor	r18, r18
     848:	a9 01       	movw	r20, r18
     84a:	48 2b       	or	r20, r24
     84c:	ca 01       	movw	r24, r20
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <EEPROM_ReadAll>:
		TxBuffer_StringWrite(": ");
		TxBuffer_IntWrite(TxBuffer, SpeedFromEEPROMch[i]);
		UART_NewLine();
	}
}
void EEPROM_ReadAll(void){
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
	//Read RPM values from trend data in EEPROM
	SpeedFromEEPROMch[0] = my_eeprom_read_char(fan_0_EEPROM_adr);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 16 04 	call	0x82c	; 0x82c <my_eeprom_read_char>
     85e:	c9 ee       	ldi	r28, 0xE9	; 233
     860:	d4 e4       	ldi	r29, 0x44	; 68
     862:	88 83       	st	Y, r24
     864:	99 83       	std	Y+1, r25	; 0x01
	SpeedFromEEPROMch[1] = my_eeprom_read_char(fan_1_EEPROM_adr);
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e 94 16 04 	call	0x82c	; 0x82c <my_eeprom_read_char>
     86c:	8a 83       	std	Y+2, r24	; 0x02
     86e:	9b 83       	std	Y+3, r25	; 0x03
	SpeedFromEEPROMch[2] = my_eeprom_read_char(fan_2_EEPROM_adr);
     870:	84 e0       	ldi	r24, 0x04	; 4
     872:	0e 94 16 04 	call	0x82c	; 0x82c <my_eeprom_read_char>
     876:	8c 83       	std	Y+4, r24	; 0x04
     878:	9d 83       	std	Y+5, r25	; 0x05
	SpeedFromEEPROMch[3] = my_eeprom_read_char(fan_3_EEPROM_adr);
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	0e 94 16 04 	call	0x82c	; 0x82c <my_eeprom_read_char>
     880:	8e 83       	std	Y+6, r24	; 0x06
     882:	9f 83       	std	Y+7, r25	; 0x07
	SpeedFromEEPROMch[4] = my_eeprom_read_char(fan_4_EEPROM_adr);
     884:	88 e0       	ldi	r24, 0x08	; 8
     886:	0e 94 16 04 	call	0x82c	; 0x82c <my_eeprom_read_char>
     88a:	88 87       	std	Y+8, r24	; 0x08
     88c:	99 87       	std	Y+9, r25	; 0x09
	SpeedFromEEPROMch[5] = my_eeprom_read_char(fan_5_EEPROM_adr);
     88e:	8a e0       	ldi	r24, 0x0A	; 10
     890:	0e 94 16 04 	call	0x82c	; 0x82c <my_eeprom_read_char>
     894:	8a 87       	std	Y+10, r24	; 0x0a
     896:	9b 87       	std	Y+11, r25	; 0x0b
	SpeedFromEEPROMch[6] = my_eeprom_read_char(fan_6_EEPROM_adr);
     898:	8c e0       	ldi	r24, 0x0C	; 12
     89a:	0e 94 16 04 	call	0x82c	; 0x82c <my_eeprom_read_char>
     89e:	8c 87       	std	Y+12, r24	; 0x0c
     8a0:	9d 87       	std	Y+13, r25	; 0x0d
	SpeedFromEEPROMch[7] = my_eeprom_read_char(fan_7_EEPROM_adr);
     8a2:	8e e0       	ldi	r24, 0x0E	; 14
     8a4:	0e 94 16 04 	call	0x82c	; 0x82c <my_eeprom_read_char>
     8a8:	8e 87       	std	Y+14, r24	; 0x0e
     8aa:	9f 87       	std	Y+15, r25	; 0x0f
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <UART_Echo>:
		TxBuffer_StringWrite("help, wrong syntax");
	}
}
void UART_Echo(char recvbyte){
	
	if(((recvbyte > 31) && (recvbyte != backspace127)) || (recvbyte == Bell) || (recvbyte == CR) || (recvbyte == LF)){
     8b2:	80 32       	cpi	r24, 0x20	; 32
     8b4:	10 f0       	brcs	.+4      	; 0x8ba <UART_Echo+0x8>
     8b6:	8f 37       	cpi	r24, 0x7F	; 127
     8b8:	31 f4       	brne	.+12     	; 0x8c6 <UART_Echo+0x14>
     8ba:	87 30       	cpi	r24, 0x07	; 7
     8bc:	21 f0       	breq	.+8      	; 0x8c6 <UART_Echo+0x14>
     8be:	8d 30       	cpi	r24, 0x0D	; 13
     8c0:	11 f0       	breq	.+4      	; 0x8c6 <UART_Echo+0x14>
     8c2:	8a 30       	cpi	r24, 0x0A	; 10
     8c4:	61 f4       	brne	.+24     	; 0x8de <UART_Echo+0x2c>
		if(RingbufferFull){
     8c6:	90 91 cd 44 	lds	r25, 0x44CD	; 0x8044cd <RingbufferFull>
     8ca:	99 23       	and	r25, r25
     8cc:	21 f0       	breq	.+8      	; 0x8d6 <UART_Echo+0x24>
			UART_TX_BUFFER = Bell;								//Writes bell(end of line alert)
     8ce:	97 e0       	ldi	r25, 0x07	; 7
     8d0:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <UART_Echo+0x28>
			} else {
			UART_TX_BUFFER = recvbyte;							//Puts the received byte in the tx-buffer
     8d6:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
		}
		NoBackspace = 0;										//Lower the NoBackspace FLag, since something is written
     8da:	10 92 64 45 	sts	0x4564, r1	; 0x804564 <NoBackspace>
	}
	if((recvbyte == backspace) || (recvbyte == backspace127)) { //Check if backspace is pressed
     8de:	88 30       	cpi	r24, 0x08	; 8
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <UART_Echo+0x34>
     8e2:	8f 37       	cpi	r24, 0x7F	; 127
     8e4:	91 f4       	brne	.+36     	; 0x90a <UART_Echo+0x58>
		if(RingbufferTail == RingbufferHead){				    //Check if buffer is empty
     8e6:	20 91 ce 44 	lds	r18, 0x44CE	; 0x8044ce <RingbufferTail>
     8ea:	90 91 cf 44 	lds	r25, 0x44CF	; 0x8044cf <RingbufferHead>
     8ee:	29 13       	cpse	r18, r25
     8f0:	0a c0       	rjmp	.+20     	; 0x906 <UART_Echo+0x54>
			if(NoBackspace == 0){								//Check if NoBackspace flag is low, if so raise it
     8f2:	90 91 64 45 	lds	r25, 0x4564	; 0x804564 <NoBackspace>
     8f6:	91 11       	cpse	r25, r1
     8f8:	08 c0       	rjmp	.+16     	; 0x90a <UART_Echo+0x58>
				NoBackspace = 1;                                //The flag is to disable the user from using backspace
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	90 93 64 45 	sts	0x4564, r25	; 0x804564 <NoBackspace>
				UART_TX_BUFFER = recvbyte;						//Sends the received byte since | backspace
     900:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     904:	08 95       	ret
			}
			} else {
			UART_TX_BUFFER = recvbyte;							//Sends the recieved byte, thats not the ones checked above
     906:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     90a:	08 95       	ret

0000090c <SearchForCommand>:
	}
}

//Function for finding the incoming command
char SearchForCommand(void){
	for(uint8_t CompareCommand = 0; CompareCommand < NoOfCommands; CompareCommand++){ //Searching command for command in the commandarray
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	1c c0       	rjmp	.+56     	; 0x948 <SearchForCommand+0x3c>
		for(uint8_t CompareChar = 0; CompareChar < MaxCommandLength; CompareChar++){  //Search character for character in the commandarray
			if(commandArray[CompareCommand][CompareChar] == ProcessedBuffer[CompareChar]){ //Check if the command in the received data is equal to commands that are available
     910:	29 2f       	mov	r18, r25
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	4d e0       	ldi	r20, 0x0D	; 13
     916:	84 9f       	mul	r24, r20
     918:	f0 01       	movw	r30, r0
     91a:	11 24       	eor	r1, r1
     91c:	e3 5b       	subi	r30, 0xB3	; 179
     91e:	fb 4b       	sbci	r31, 0xBB	; 187
     920:	e2 0f       	add	r30, r18
     922:	f3 1f       	adc	r31, r19
     924:	40 81       	ld	r20, Z
     926:	f9 01       	movw	r30, r18
     928:	e3 5f       	subi	r30, 0xF3	; 243
     92a:	fa 4b       	sbci	r31, 0xBA	; 186
     92c:	20 81       	ld	r18, Z
     92e:	42 13       	cpse	r20, r18
     930:	04 c0       	rjmp	.+8      	; 0x93a <SearchForCommand+0x2e>
				if(ProcessedBuffer[CompareChar] == 0){
     932:	21 11       	cpse	r18, r1
     934:	03 c0       	rjmp	.+6      	; 0x93c <SearchForCommand+0x30>
					return CompareCommand + 1;
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	08 95       	ret
				}
				} else {
				CompareChar = MaxCommandLength;
     93a:	9d e0       	ldi	r25, 0x0D	; 13
}

//Function for finding the incoming command
char SearchForCommand(void){
	for(uint8_t CompareCommand = 0; CompareCommand < NoOfCommands; CompareCommand++){ //Searching command for command in the commandarray
		for(uint8_t CompareChar = 0; CompareChar < MaxCommandLength; CompareChar++){  //Search character for character in the commandarray
     93c:	9f 5f       	subi	r25, 0xFF	; 255
     93e:	01 c0       	rjmp	.+2      	; 0x942 <SearchForCommand+0x36>
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	9d 30       	cpi	r25, 0x0D	; 13
     944:	28 f3       	brcs	.-54     	; 0x910 <SearchForCommand+0x4>
	}
}

//Function for finding the incoming command
char SearchForCommand(void){
	for(uint8_t CompareCommand = 0; CompareCommand < NoOfCommands; CompareCommand++){ //Searching command for command in the commandarray
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	89 30       	cpi	r24, 0x09	; 9
     94a:	d0 f3       	brcs	.-12     	; 0x940 <SearchForCommand+0x34>
				} else {
				CompareChar = MaxCommandLength;
			}
		}
	}
	return 0; //Process done
     94c:	80 e0       	ldi	r24, 0x00	; 0
}
     94e:	08 95       	ret

00000950 <CharInBUF>:
}

//Function for adding character in to the rx-buffer
void CharInBUF(char incomingchar){
	
	if(incomingchar == backspace || incomingchar == backspace127){
     950:	88 30       	cpi	r24, 0x08	; 8
     952:	11 f0       	breq	.+4      	; 0x958 <CharInBUF+0x8>
     954:	8f 37       	cpi	r24, 0x7F	; 127
     956:	b9 f4       	brne	.+46     	; 0x986 <CharInBUF+0x36>
		if(RingbufferHead != RingbufferTail){ //Check if its not empty
     958:	90 91 cf 44 	lds	r25, 0x44CF	; 0x8044cf <RingbufferHead>
     95c:	80 91 ce 44 	lds	r24, 0x44CE	; 0x8044ce <RingbufferTail>
     960:	98 17       	cp	r25, r24
     962:	09 f4       	brne	.+2      	; 0x966 <CharInBUF+0x16>
     964:	51 c0       	rjmp	.+162    	; 0xa08 <CharInBUF+0xb8>
			if(RingbufferHead == 0){
     966:	80 91 cf 44 	lds	r24, 0x44CF	; 0x8044cf <RingbufferHead>
     96a:	81 11       	cpse	r24, r1
     96c:	04 c0       	rjmp	.+8      	; 0x976 <CharInBUF+0x26>
				RingbufferHead = RxBufferLength - 1;
     96e:	87 e1       	ldi	r24, 0x17	; 23
     970:	80 93 cf 44 	sts	0x44CF, r24	; 0x8044cf <RingbufferHead>
     974:	05 c0       	rjmp	.+10     	; 0x980 <CharInBUF+0x30>
				} else {
				RingbufferHead--; //Decrease buffer index, since it is being emptied | move one character back until emtied
     976:	80 91 cf 44 	lds	r24, 0x44CF	; 0x8044cf <RingbufferHead>
     97a:	81 50       	subi	r24, 0x01	; 1
     97c:	80 93 cf 44 	sts	0x44CF, r24	; 0x8044cf <RingbufferHead>
			}
			RingbufferFull = FALSE;	//Lower the flag, since it is empty
     980:	10 92 cd 44 	sts	0x44CD, r1	; 0x8044cd <RingbufferFull>
     984:	08 95       	ret
		}
		} else {
		
		if(RingbufferFull){ //Check if the the flag raise is true (if its still full)
     986:	90 91 cd 44 	lds	r25, 0x44CD	; 0x8044cd <RingbufferFull>
     98a:	99 23       	and	r25, r25
     98c:	99 f0       	breq	.+38     	; 0x9b4 <CharInBUF+0x64>
			if((RingbufferTail - RingbufferHead == 1) || ((RingbufferHead == RxBufferLength - 1) && (RingbufferTail == 0))){
     98e:	20 91 ce 44 	lds	r18, 0x44CE	; 0x8044ce <RingbufferTail>
     992:	90 91 cf 44 	lds	r25, 0x44CF	; 0x8044cf <RingbufferHead>
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	29 1b       	sub	r18, r25
     99a:	31 09       	sbc	r19, r1
     99c:	21 30       	cpi	r18, 0x01	; 1
     99e:	31 05       	cpc	r19, r1
     9a0:	49 f0       	breq	.+18     	; 0x9b4 <CharInBUF+0x64>
     9a2:	90 91 cf 44 	lds	r25, 0x44CF	; 0x8044cf <RingbufferHead>
     9a6:	97 31       	cpi	r25, 0x17	; 23
     9a8:	19 f4       	brne	.+6      	; 0x9b0 <CharInBUF+0x60>
     9aa:	90 91 ce 44 	lds	r25, 0x44CE	; 0x8044ce <RingbufferTail>
     9ae:	91 11       	cpse	r25, r1
				//Buffer is full, the byte gets ignored
				} else {
				//The claim is false, change flag back | not full
				RingbufferFull = FALSE;
     9b0:	10 92 cd 44 	sts	0x44CD, r1	; 0x8044cd <RingbufferFull>
			}
		}
		//If the rxbuffer is not full, put a char into it
		if(!RingbufferFull){
     9b4:	90 91 cd 44 	lds	r25, 0x44CD	; 0x8044cd <RingbufferFull>
     9b8:	91 11       	cpse	r25, r1
     9ba:	26 c0       	rjmp	.+76     	; 0xa08 <CharInBUF+0xb8>
			RxBuffer[RingbufferHead] = incomingchar; //Put char in to buffer
     9bc:	e0 91 cf 44 	lds	r30, 0x44CF	; 0x8044cf <RingbufferHead>
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	e4 5e       	subi	r30, 0xE4	; 228
     9c4:	fa 4b       	sbci	r31, 0xBA	; 186
     9c6:	80 83       	st	Z, r24
			//Checks again if the buffer is full, since a new character is put in it
			if((RingbufferTail - RingbufferHead == 1) || ((RingbufferHead == RxBufferLength - 1) && (RingbufferTail == 0))){
     9c8:	80 91 ce 44 	lds	r24, 0x44CE	; 0x8044ce <RingbufferTail>
     9cc:	20 91 cf 44 	lds	r18, 0x44CF	; 0x8044cf <RingbufferHead>
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	82 1b       	sub	r24, r18
     9d4:	91 09       	sbc	r25, r1
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	41 f0       	breq	.+16     	; 0x9ea <CharInBUF+0x9a>
     9da:	80 91 cf 44 	lds	r24, 0x44CF	; 0x8044cf <RingbufferHead>
     9de:	87 31       	cpi	r24, 0x17	; 23
     9e0:	41 f4       	brne	.+16     	; 0x9f2 <CharInBUF+0xa2>
     9e2:	80 91 ce 44 	lds	r24, 0x44CE	; 0x8044ce <RingbufferTail>
     9e6:	81 11       	cpse	r24, r1
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <CharInBUF+0xa2>
				RingbufferFull = TRUE; //Buffer is full, and the full flag will be raised
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	80 93 cd 44 	sts	0x44CD, r24	; 0x8044cd <RingbufferFull>
     9f0:	08 95       	ret
				} else {
				RingbufferHead++; //If its not full, increase the index of the buffer, since a new character is put in to it
     9f2:	80 91 cf 44 	lds	r24, 0x44CF	; 0x8044cf <RingbufferHead>
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	80 93 cf 44 	sts	0x44CF, r24	; 0x8044cf <RingbufferHead>
				
				//If the buffer has reached the end, wrap around
				if(RingbufferHead >= RxBufferLength){
     9fc:	80 91 cf 44 	lds	r24, 0x44CF	; 0x8044cf <RingbufferHead>
     a00:	88 31       	cpi	r24, 0x18	; 24
     a02:	10 f0       	brcs	.+4      	; 0xa08 <CharInBUF+0xb8>
					RingbufferHead = 0; //Buffer wrapped around
     a04:	10 92 cf 44 	sts	0x44CF, r1	; 0x8044cf <RingbufferHead>
     a08:	08 95       	ret

00000a0a <UART_getRxBufferChar>:
}

//Function to extract character for character from the Rx-buffer
char UART_getRxBufferChar(void){
	char BufferChar; //Temporary character to return
	if(RingbufferHead == RingbufferTail){ //Check if the buffer is empty, return 0 if true
     a0a:	90 91 cf 44 	lds	r25, 0x44CF	; 0x8044cf <RingbufferHead>
     a0e:	80 91 ce 44 	lds	r24, 0x44CE	; 0x8044ce <RingbufferTail>
     a12:	98 17       	cp	r25, r24
     a14:	91 f0       	breq	.+36     	; 0xa3a <UART_getRxBufferChar+0x30>
		return 0;
		} else {
		BufferChar = RxBuffer[RingbufferTail]; //Saves each char in buffer to return
     a16:	e0 91 ce 44 	lds	r30, 0x44CE	; 0x8044ce <RingbufferTail>
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	e4 5e       	subi	r30, 0xE4	; 228
     a1e:	fa 4b       	sbci	r31, 0xBA	; 186
     a20:	80 81       	ld	r24, Z
		RingbufferTail++;					   //Increment tail, since characters is extracted from buffer
     a22:	90 91 ce 44 	lds	r25, 0x44CE	; 0x8044ce <RingbufferTail>
     a26:	9f 5f       	subi	r25, 0xFF	; 255
     a28:	90 93 ce 44 	sts	0x44CE, r25	; 0x8044ce <RingbufferTail>
		if (RingbufferTail >= RxBufferLength){ //Is all characters sent, if so reset buffer
     a2c:	90 91 ce 44 	lds	r25, 0x44CE	; 0x8044ce <RingbufferTail>
     a30:	98 31       	cpi	r25, 0x18	; 24
     a32:	20 f0       	brcs	.+8      	; 0xa3c <UART_getRxBufferChar+0x32>
			RingbufferTail = 0;				   //Reset buffer
     a34:	10 92 ce 44 	sts	0x44CE, r1	; 0x8044ce <RingbufferTail>
     a38:	08 95       	ret

//Function to extract character for character from the Rx-buffer
char UART_getRxBufferChar(void){
	char BufferChar; //Temporary character to return
	if(RingbufferHead == RingbufferTail){ //Check if the buffer is empty, return 0 if true
		return 0;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
		if (RingbufferTail >= RxBufferLength){ //Is all characters sent, if so reset buffer
			RingbufferTail = 0;				   //Reset buffer
		}
		return BufferChar; //Return buffer, one character at the time
	}
}
     a3c:	08 95       	ret

00000a3e <ProcessWord>:
	}
	TxBuffer_StringWrite("PWM fully on all fans, fans off");
}

//Function for processing the characters, so its easy to check for correct commands
char ProcessWord(void){
     a3e:	cf 93       	push	r28
	for(uint8_t LoopNo = 0; LoopNo < MaxWordLength; LoopNo++){ //Scroll through, to ensure that all characters in buffer is checked
     a40:	c0 e0       	ldi	r28, 0x00	; 0
     a42:	16 c0       	rjmp	.+44     	; 0xa70 <ProcessWord+0x32>
		uint8_t RxChar; //Make a temporary Rx character to check each character in buffer
		RxChar = UART_getRxBufferChar(); //Gets characters from the rx buffer via UART_getRXBufferChar();
     a44:	0e 94 05 05 	call	0xa0a	; 0xa0a <UART_getRxBufferChar>
		if(RxChar == 0 && LoopNo == 0){ //Check if no char is received
     a48:	81 11       	cpse	r24, r1
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <ProcessWord+0x12>
     a4c:	cc 23       	and	r28, r28
     a4e:	a1 f0       	breq	.+40     	; 0xa78 <ProcessWord+0x3a>
			return 0; //Ready for checking
		}
		if(RxChar > 32){
     a50:	81 32       	cpi	r24, 0x21	; 33
     a52:	38 f0       	brcs	.+14     	; 0xa62 <ProcessWord+0x24>
			ProcessedBuffer[LoopNo] = RxChar; //Puts the characters in a buffer for the Processed Characters
     a54:	ec 2f       	mov	r30, r28
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	e3 5f       	subi	r30, 0xF3	; 243
     a5a:	fa 4b       	sbci	r31, 0xBA	; 186
     a5c:	80 83       	st	Z, r24
	TxBuffer_StringWrite("PWM fully on all fans, fans off");
}

//Function for processing the characters, so its easy to check for correct commands
char ProcessWord(void){
	for(uint8_t LoopNo = 0; LoopNo < MaxWordLength; LoopNo++){ //Scroll through, to ensure that all characters in buffer is checked
     a5e:	cf 5f       	subi	r28, 0xFF	; 255
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <ProcessWord+0x32>
			return 0; //Ready for checking
		}
		if(RxChar > 32){
			ProcessedBuffer[LoopNo] = RxChar; //Puts the characters in a buffer for the Processed Characters
			} else {
			ProcessedBuffer[LoopNo] = 0; //Tops up the buffer with a "Stop-bit" (Null-character)
     a62:	ec 2f       	mov	r30, r28
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	e3 5f       	subi	r30, 0xF3	; 243
     a68:	fa 4b       	sbci	r31, 0xBA	; 186
     a6a:	10 82       	st	Z, r1
			break; //exit loop
		}
	}
	
	return 1; //Process done
     a6c:	81 e0       	ldi	r24, 0x01	; 1
		}
		if(RxChar > 32){
			ProcessedBuffer[LoopNo] = RxChar; //Puts the characters in a buffer for the Processed Characters
			} else {
			ProcessedBuffer[LoopNo] = 0; //Tops up the buffer with a "Stop-bit" (Null-character)
			break; //exit loop
     a6e:	05 c0       	rjmp	.+10     	; 0xa7a <ProcessWord+0x3c>
	TxBuffer_StringWrite("PWM fully on all fans, fans off");
}

//Function for processing the characters, so its easy to check for correct commands
char ProcessWord(void){
	for(uint8_t LoopNo = 0; LoopNo < MaxWordLength; LoopNo++){ //Scroll through, to ensure that all characters in buffer is checked
     a70:	cc 30       	cpi	r28, 0x0C	; 12
     a72:	40 f3       	brcs	.-48     	; 0xa44 <ProcessWord+0x6>
			ProcessedBuffer[LoopNo] = 0; //Tops up the buffer with a "Stop-bit" (Null-character)
			break; //exit loop
		}
	}
	
	return 1; //Process done
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <ProcessWord+0x3c>
char ProcessWord(void){
	for(uint8_t LoopNo = 0; LoopNo < MaxWordLength; LoopNo++){ //Scroll through, to ensure that all characters in buffer is checked
		uint8_t RxChar; //Make a temporary Rx character to check each character in buffer
		RxChar = UART_getRxBufferChar(); //Gets characters from the rx buffer via UART_getRXBufferChar();
		if(RxChar == 0 && LoopNo == 0){ //Check if no char is received
			return 0; //Ready for checking
     a78:	80 e0       	ldi	r24, 0x00	; 0
			break; //exit loop
		}
	}
	
	return 1; //Process done
}
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <Ringbuffer_Reset>:
	}
}

//Reset the buffer values
void Ringbuffer_Reset(void){
	RingbufferHead = 0;
     a7e:	10 92 cf 44 	sts	0x44CF, r1	; 0x8044cf <RingbufferHead>
	RingbufferTail = 0;
     a82:	10 92 ce 44 	sts	0x44CE, r1	; 0x8044ce <RingbufferTail>
	RingbufferFull = 0;
     a86:	10 92 cd 44 	sts	0x44CD, r1	; 0x8044cd <RingbufferFull>
     a8a:	08 95       	ret

00000a8c <UART_SendChar>:
	UART_SendChar(LF);
}

//Send one character at a time
void UART_SendChar(char CharToSend){
	while(!TxBufferFlag){ //Checking the Tx-Flag
     a8c:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
     a90:	95 ff       	sbrs	r25, 5
     a92:	fc cf       	rjmp	.-8      	; 0xa8c <UART_SendChar>
		//Loop until buffer is empty
	}
	UART_TX_BUFFER = CharToSend; //When Tx-buffer is ready, send data to buffer
     a94:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     a98:	08 95       	ret

00000a9a <UART_NewLine>:
	RingbufferFull = 0;
}

//Function for new line, by sending both CR and LF | Next line, cursor position leftmost
void UART_NewLine(void){
	UART_SendChar(CR);
     a9a:	8d e0       	ldi	r24, 0x0D	; 13
     a9c:	0e 94 46 05 	call	0xa8c	; 0xa8c <UART_SendChar>
	UART_SendChar(LF);
     aa0:	8a e0       	ldi	r24, 0x0A	; 10
     aa2:	0e 94 46 05 	call	0xa8c	; 0xa8c <UART_SendChar>
     aa6:	08 95       	ret

00000aa8 <UART_SendBuffer>:
	}
	UART_TX_BUFFER = CharToSend; //When Tx-buffer is ready, send data to buffer
}

//Function for sending the whole buffer (strings)
void UART_SendBuffer(void){
     aa8:	cf 93       	push	r28
	for(uint8_t SendLoop = 0; SendLoop < TxBufferLength; SendLoop++){ //Loops trough the whole tx-buffer, to ensure that all characters will be sent
     aaa:	c0 e0       	ldi	r28, 0x00	; 0
     aac:	0a c0       	rjmp	.+20     	; 0xac2 <UART_SendBuffer+0x1a>
		char TxChar;				 //Saves each character in the buffer, in a temporary tx-buffer character
		TxChar = TxBuffer[SendLoop]; //Saves one character at the time
     aae:	ec 2f       	mov	r30, r28
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	ec 5c       	subi	r30, 0xCC	; 204
     ab4:	fa 4b       	sbci	r31, 0xBA	; 186
     ab6:	80 81       	ld	r24, Z
		if (TxChar!=0){				 //Checks for the "stop-bit" in the temporary character
     ab8:	88 23       	and	r24, r24
     aba:	29 f0       	breq	.+10     	; 0xac6 <UART_SendBuffer+0x1e>
			UART_SendChar(TxChar);	 //Sends the data as long it has not reached the end
     abc:	0e 94 46 05 	call	0xa8c	; 0xa8c <UART_SendChar>
	UART_TX_BUFFER = CharToSend; //When Tx-buffer is ready, send data to buffer
}

//Function for sending the whole buffer (strings)
void UART_SendBuffer(void){
	for(uint8_t SendLoop = 0; SendLoop < TxBufferLength; SendLoop++){ //Loops trough the whole tx-buffer, to ensure that all characters will be sent
     ac0:	cf 5f       	subi	r28, 0xFF	; 255
     ac2:	c0 33       	cpi	r28, 0x30	; 48
     ac4:	a0 f3       	brcs	.-24     	; 0xaae <UART_SendBuffer+0x6>
			UART_SendChar(TxChar);	 //Sends the data as long it has not reached the end
			}else{
			return;					 //Return out of loop, when the "stop-bit" comes
		}
	}
}
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <UART_DigitsCheck>:
	return speed;
}
int UART_DigitsCheck(void){
	int numofdigits = 0;
	
	for(int i = 0; ProcessedBuffer[i] != 0; i++){
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
		UART_SendBuffer();
	}
	return speed;
}
int UART_DigitsCheck(void){
	int numofdigits = 0;
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
	
	for(int i = 0; ProcessedBuffer[i] != 0; i++){
     ad2:	09 c0       	rjmp	.+18     	; 0xae6 <UART_DigitsCheck+0x1c>
		ProcessedBuffer[i] = ProcessedBuffer[i] - '0';
     ad4:	f9 01       	movw	r30, r18
     ad6:	e3 5f       	subi	r30, 0xF3	; 243
     ad8:	fa 4b       	sbci	r31, 0xBA	; 186
     ada:	90 53       	subi	r25, 0x30	; 48
     adc:	90 83       	st	Z, r25
		numofdigits++;
     ade:	4f 5f       	subi	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
	return speed;
}
int UART_DigitsCheck(void){
	int numofdigits = 0;
	
	for(int i = 0; ProcessedBuffer[i] != 0; i++){
     ae2:	2f 5f       	subi	r18, 0xFF	; 255
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	f9 01       	movw	r30, r18
     ae8:	e3 5f       	subi	r30, 0xF3	; 243
     aea:	fa 4b       	sbci	r31, 0xBA	; 186
     aec:	90 81       	ld	r25, Z
     aee:	91 11       	cpse	r25, r1
     af0:	f1 cf       	rjmp	.-30     	; 0xad4 <UART_DigitsCheck+0xa>
		ProcessedBuffer[i] = ProcessedBuffer[i] - '0';
		numofdigits++;
	}
	return numofdigits;
}
     af2:	ca 01       	movw	r24, r20
     af4:	08 95       	ret

00000af6 <UART_EchoCheck>:
		
	}
	return speed;
}
void UART_EchoCheck(void){
	if (EchoON){
     af6:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <EchoON>
     afa:	88 23       	and	r24, r24
     afc:	51 f0       	breq	.+20     	; 0xb12 <UART_EchoCheck+0x1c>
		strcpy(TxBuffer,"Echo is on");
     afe:	8b e0       	ldi	r24, 0x0B	; 11
     b00:	ed e3       	ldi	r30, 0x3D	; 61
     b02:	f0 e4       	ldi	r31, 0x40	; 64
     b04:	a4 e3       	ldi	r26, 0x34	; 52
     b06:	b5 e4       	ldi	r27, 0x45	; 69
     b08:	01 90       	ld	r0, Z+
     b0a:	0d 92       	st	X+, r0
     b0c:	8a 95       	dec	r24
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <UART_EchoCheck+0x12>
     b10:	08 95       	ret
		}else{
		strcpy(TxBuffer,"Echo is off");
     b12:	8c e0       	ldi	r24, 0x0C	; 12
     b14:	e8 e4       	ldi	r30, 0x48	; 72
     b16:	f0 e4       	ldi	r31, 0x40	; 64
     b18:	a4 e3       	ldi	r26, 0x34	; 52
     b1a:	b5 e4       	ldi	r27, 0x45	; 69
     b1c:	01 90       	ld	r0, Z+
     b1e:	0d 92       	st	X+, r0
     b20:	8a 95       	dec	r24
     b22:	e1 f7       	brne	.-8      	; 0xb1c <UART_EchoCheck+0x26>
     b24:	08 95       	ret

00000b26 <ResetSHell>:
	}
}
void ResetSHell(){
	UART_NewLine();
     b26:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	strcpy(TxBuffer,"Write an command: ");
     b2a:	83 e1       	ldi	r24, 0x13	; 19
     b2c:	e4 e5       	ldi	r30, 0x54	; 84
     b2e:	f0 e4       	ldi	r31, 0x40	; 64
     b30:	a4 e3       	ldi	r26, 0x34	; 52
     b32:	b5 e4       	ldi	r27, 0x45	; 69
     b34:	01 90       	ld	r0, Z+
     b36:	0d 92       	st	X+, r0
     b38:	8a 95       	dec	r24
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <ResetSHell+0xe>
	UART_SendBuffer();
     b3c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	Ringbuffer_Reset();
     b40:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Ringbuffer_Reset>
	NoBackspace = 1;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <NoBackspace>
	RecvCommand = 0;
     b4a:	10 92 d0 44 	sts	0x44D0, r1	; 0x8044d0 <RecvCommand>
     b4e:	08 95       	ret

00000b50 <NumCheck>:
}
int NumCheck(int num){
	int n = 0;
	
	if (!(ProcessedBuffer[num] <= 9 && ProcessedBuffer[num] >= 0)){
     b50:	83 5f       	subi	r24, 0xF3	; 243
     b52:	9a 4b       	sbci	r25, 0xBA	; 186
     b54:	fc 01       	movw	r30, r24
     b56:	80 81       	ld	r24, Z
     b58:	8a 30       	cpi	r24, 0x0A	; 10
     b5a:	80 f0       	brcs	.+32     	; 0xb7c <NumCheck+0x2c>
		strcpy(TxBuffer,"Please enter a number");
     b5c:	86 e1       	ldi	r24, 0x16	; 22
     b5e:	e7 e6       	ldi	r30, 0x67	; 103
     b60:	f0 e4       	ldi	r31, 0x40	; 64
     b62:	a4 e3       	ldi	r26, 0x34	; 52
     b64:	b5 e4       	ldi	r27, 0x45	; 69
     b66:	01 90       	ld	r0, Z+
     b68:	0d 92       	st	X+, r0
     b6a:	8a 95       	dec	r24
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <NumCheck+0x16>
		UART_SendBuffer();
     b6e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		UART_NewLine();
     b72:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		n = 404;
     b76:	84 e9       	ldi	r24, 0x94	; 148
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	08 95       	ret
		} else {
		n = ProcessedBuffer[num];
     b7c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return n;
}
     b7e:	08 95       	ret

00000b80 <UART_CheckFanInput>:
}

int UART_CheckFanInput(char digits){
	int tempspeed = 0;
	
	if(digits == 1){
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	49 f4       	brne	.+18     	; 0xb96 <UART_CheckFanInput+0x16>
		n1 = NumCheck(0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 a8 05 	call	0xb50	; 0xb50 <NumCheck>
     b8c:	80 93 1a 45 	sts	0x451A, r24	; 0x80451a <n1>
     b90:	90 93 1b 45 	sts	0x451B, r25	; 0x80451b <n1+0x1>
     b94:	6f c0       	rjmp	.+222    	; 0xc74 <UART_CheckFanInput+0xf4>
		
		tempspeed = n1;
		} else if (digits == 2) {
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	11 f5       	brne	.+68     	; 0xbde <UART_CheckFanInput+0x5e>
		n1 = NumCheck(0);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 a8 05 	call	0xb50	; 0xb50 <NumCheck>
     ba2:	80 93 1a 45 	sts	0x451A, r24	; 0x80451a <n1>
     ba6:	90 93 1b 45 	sts	0x451B, r25	; 0x80451b <n1+0x1>
		n2 = NumCheck(1);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 a8 05 	call	0xb50	; 0xb50 <NumCheck>
     bb2:	80 93 09 45 	sts	0x4509, r24	; 0x804509 <n2>
     bb6:	90 93 0a 45 	sts	0x450A, r25	; 0x80450a <n2+0x1>
		tempspeed = n1*10 + n2;
     bba:	20 91 1a 45 	lds	r18, 0x451A	; 0x80451a <n1>
     bbe:	30 91 1b 45 	lds	r19, 0x451B	; 0x80451b <n1+0x1>
     bc2:	a9 01       	movw	r20, r18
     bc4:	44 0f       	add	r20, r20
     bc6:	55 1f       	adc	r21, r21
     bc8:	22 0f       	add	r18, r18
     bca:	33 1f       	adc	r19, r19
     bcc:	22 0f       	add	r18, r18
     bce:	33 1f       	adc	r19, r19
     bd0:	22 0f       	add	r18, r18
     bd2:	33 1f       	adc	r19, r19
     bd4:	24 0f       	add	r18, r20
     bd6:	35 1f       	adc	r19, r21
     bd8:	82 0f       	add	r24, r18
     bda:	93 1f       	adc	r25, r19
     bdc:	4b c0       	rjmp	.+150    	; 0xc74 <UART_CheckFanInput+0xf4>
		} else if (digits == 3){
     bde:	83 30       	cpi	r24, 0x03	; 3
     be0:	09 f0       	breq	.+2      	; 0xbe4 <UART_CheckFanInput+0x64>
     be2:	46 c0       	rjmp	.+140    	; 0xc70 <UART_CheckFanInput+0xf0>
		n1 = NumCheck(0);
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 a8 05 	call	0xb50	; 0xb50 <NumCheck>
     bec:	80 93 1a 45 	sts	0x451A, r24	; 0x80451a <n1>
     bf0:	90 93 1b 45 	sts	0x451B, r25	; 0x80451b <n1+0x1>
		n2 = NumCheck(1);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 a8 05 	call	0xb50	; 0xb50 <NumCheck>
     bfc:	80 93 09 45 	sts	0x4509, r24	; 0x804509 <n2>
     c00:	90 93 0a 45 	sts	0x450A, r25	; 0x80450a <n2+0x1>
		if(n1 != 1 || n2 != 0){
     c04:	20 91 1a 45 	lds	r18, 0x451A	; 0x80451a <n1>
     c08:	30 91 1b 45 	lds	r19, 0x451B	; 0x80451b <n1+0x1>
     c0c:	21 30       	cpi	r18, 0x01	; 1
     c0e:	31 05       	cpc	r19, r1
     c10:	11 f4       	brne	.+4      	; 0xc16 <UART_CheckFanInput+0x96>
     c12:	89 2b       	or	r24, r25
     c14:	e9 f0       	breq	.+58     	; 0xc50 <UART_CheckFanInput+0xd0>
			strcpy(TxBuffer,"Number is greater then 100 or not a number");
     c16:	8b e2       	ldi	r24, 0x2B	; 43
     c18:	ed e7       	ldi	r30, 0x7D	; 125
     c1a:	f0 e4       	ldi	r31, 0x40	; 64
     c1c:	a4 e3       	ldi	r26, 0x34	; 52
     c1e:	b5 e4       	ldi	r27, 0x45	; 69
     c20:	01 90       	ld	r0, Z+
     c22:	0d 92       	st	X+, r0
     c24:	8a 95       	dec	r24
     c26:	e1 f7       	brne	.-8      	; 0xc20 <UART_CheckFanInput+0xa0>
			UART_SendBuffer();
     c28:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
			UART_NewLine();
     c2c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
			strcpy(TxBuffer,"Put in a number between 0 and 100");
     c30:	82 e2       	ldi	r24, 0x22	; 34
     c32:	e8 ea       	ldi	r30, 0xA8	; 168
     c34:	f0 e4       	ldi	r31, 0x40	; 64
     c36:	a4 e3       	ldi	r26, 0x34	; 52
     c38:	b5 e4       	ldi	r27, 0x45	; 69
     c3a:	01 90       	ld	r0, Z+
     c3c:	0d 92       	st	X+, r0
     c3e:	8a 95       	dec	r24
     c40:	e1 f7       	brne	.-8      	; 0xc3a <UART_CheckFanInput+0xba>
			UART_SendBuffer();
     c42:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
			UART_NewLine();
     c46:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
			tempspeed = 404;
     c4a:	84 e9       	ldi	r24, 0x94	; 148
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	12 c0       	rjmp	.+36     	; 0xc74 <UART_CheckFanInput+0xf4>
			} else {
			tempspeed = 100;
			strcpy(TxBuffer,"Argument is 100, PWM is fully on");
     c50:	81 e2       	ldi	r24, 0x21	; 33
     c52:	ea ec       	ldi	r30, 0xCA	; 202
     c54:	f0 e4       	ldi	r31, 0x40	; 64
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b5 e4       	ldi	r27, 0x45	; 69
     c5a:	01 90       	ld	r0, Z+
     c5c:	0d 92       	st	X+, r0
     c5e:	8a 95       	dec	r24
     c60:	e1 f7       	brne	.-8      	; 0xc5a <UART_CheckFanInput+0xda>
			UART_SendBuffer();
     c62:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
			UART_NewLine();
     c66:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
			strcpy(TxBuffer,"Put in a number between 0 and 100");
			UART_SendBuffer();
			UART_NewLine();
			tempspeed = 404;
			} else {
			tempspeed = 100;
     c6a:	84 e6       	ldi	r24, 0x64	; 100
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <UART_CheckFanInput+0xf4>
	}
	return numofdigits;
}

int UART_CheckFanInput(char digits){
	int tempspeed = 0;
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
			strcpy(TxBuffer,"Argument is 100, PWM is fully on");
			UART_SendBuffer();
			UART_NewLine();
		}
	}
	if (tempspeed > 100){
     c74:	85 36       	cpi	r24, 0x65	; 101
     c76:	91 05       	cpc	r25, r1
     c78:	dc f0       	brlt	.+54     	; 0xcb0 <UART_CheckFanInput+0x130>
		strcpy(TxBuffer,"Wrong Input");
     c7a:	8c e0       	ldi	r24, 0x0C	; 12
     c7c:	eb ee       	ldi	r30, 0xEB	; 235
     c7e:	f0 e4       	ldi	r31, 0x40	; 64
     c80:	a4 e3       	ldi	r26, 0x34	; 52
     c82:	b5 e4       	ldi	r27, 0x45	; 69
     c84:	01 90       	ld	r0, Z+
     c86:	0d 92       	st	X+, r0
     c88:	8a 95       	dec	r24
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <UART_CheckFanInput+0x104>
		UART_SendBuffer();
     c8c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		UART_NewLine();
     c90:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		strcpy(TxBuffer,"Try again");
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	e7 ef       	ldi	r30, 0xF7	; 247
     c98:	f0 e4       	ldi	r31, 0x40	; 64
     c9a:	a4 e3       	ldi	r26, 0x34	; 52
     c9c:	b5 e4       	ldi	r27, 0x45	; 69
     c9e:	01 90       	ld	r0, Z+
     ca0:	0d 92       	st	X+, r0
     ca2:	8a 95       	dec	r24
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <UART_CheckFanInput+0x11e>
		UART_SendBuffer();
     ca6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		UART_NewLine();
     caa:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <UART_CheckFanInput+0x138>
		} else {
		speed = tempspeed;
     cb0:	80 93 0b 45 	sts	0x450B, r24	; 0x80450b <speed>
     cb4:	90 93 0c 45 	sts	0x450C, r25	; 0x80450c <speed+0x1>
		
	}
	return speed;
}
     cb8:	80 91 0b 45 	lds	r24, 0x450B	; 0x80450b <speed>
     cbc:	90 91 0c 45 	lds	r25, 0x450C	; 0x80450c <speed+0x1>
     cc0:	08 95       	ret

00000cc2 <UART_FanSpeedSet>:
			return;					 //Return out of loop, when the "stop-bit" comes
		}
	}
}

int UART_FanSpeedSet(){
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
	int channel = 0;
	channel = ProcessedBuffer[0] - '0';
     cca:	c0 91 0d 45 	lds	r28, 0x450D	; 0x80450d <ProcessedBuffer>
     cce:	d0 e0       	ldi	r29, 0x00	; 0
     cd0:	e0 97       	sbiw	r28, 0x30	; 48
	if(ProcessWord() != 0){
     cd2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ProcessWord>
     cd6:	88 23       	and	r24, r24
     cd8:	09 f4       	brne	.+2      	; 0xcdc <UART_FanSpeedSet+0x1a>
     cda:	63 c0       	rjmp	.+198    	; 0xda2 <UART_FanSpeedSet+0xe0>
		int numofdigits = 0;
		
		numofdigits = UART_DigitsCheck();
     cdc:	0e 94 65 05 	call	0xaca	; 0xaca <UART_DigitsCheck>
     ce0:	8c 01       	movw	r16, r24

		
		if (numofdigits == 1){
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	c1 f4       	brne	.+48     	; 0xd16 <UART_FanSpeedSet+0x54>
			if(ProcessedBuffer[0] == 0){
     ce6:	80 91 0d 45 	lds	r24, 0x450D	; 0x80450d <ProcessedBuffer>
     cea:	81 11       	cpse	r24, r1
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <UART_FanSpeedSet+0x46>
				strcpy(TxBuffer,"Argument is 0, PWM off, fan full power");
     cee:	87 e2       	ldi	r24, 0x27	; 39
     cf0:	e1 e0       	ldi	r30, 0x01	; 1
     cf2:	f1 e4       	ldi	r31, 0x41	; 65
     cf4:	a4 e3       	ldi	r26, 0x34	; 52
     cf6:	b5 e4       	ldi	r27, 0x45	; 69
     cf8:	01 90       	ld	r0, Z+
     cfa:	0d 92       	st	X+, r0
     cfc:	8a 95       	dec	r24
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <UART_FanSpeedSet+0x36>
				UART_SendBuffer();
     d00:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
				UART_NewLine();
     d04:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
			}
			speed = UART_CheckFanInput(1);
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	0e 94 c0 05 	call	0xb80	; 0xb80 <UART_CheckFanInput>
     d0e:	80 93 0b 45 	sts	0x450B, r24	; 0x80450b <speed>
     d12:	90 93 0c 45 	sts	0x450C, r25	; 0x80450c <speed+0x1>
		}
		if(numofdigits == 2){
     d16:	02 30       	cpi	r16, 0x02	; 2
     d18:	11 05       	cpc	r17, r1
     d1a:	c9 f4       	brne	.+50     	; 0xd4e <UART_FanSpeedSet+0x8c>
			if(ProcessedBuffer[0] == 0){
     d1c:	80 91 0d 45 	lds	r24, 0x450D	; 0x80450d <ProcessedBuffer>
     d20:	81 11       	cpse	r24, r1
     d22:	0e c0       	rjmp	.+28     	; 0xd40 <UART_FanSpeedSet+0x7e>
				strcpy(TxBuffer,"Argument can't start with 0");
     d24:	8c e1       	ldi	r24, 0x1C	; 28
     d26:	e8 e2       	ldi	r30, 0x28	; 40
     d28:	f1 e4       	ldi	r31, 0x41	; 65
     d2a:	a4 e3       	ldi	r26, 0x34	; 52
     d2c:	b5 e4       	ldi	r27, 0x45	; 69
     d2e:	01 90       	ld	r0, Z+
     d30:	0d 92       	st	X+, r0
     d32:	8a 95       	dec	r24
     d34:	e1 f7       	brne	.-8      	; 0xd2e <UART_FanSpeedSet+0x6c>
				UART_SendBuffer();
     d36:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
				UART_NewLine();
     d3a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <UART_FanSpeedSet+0x8c>
				} else {
				
				speed = UART_CheckFanInput(2);
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	0e 94 c0 05 	call	0xb80	; 0xb80 <UART_CheckFanInput>
     d46:	80 93 0b 45 	sts	0x450B, r24	; 0x80450b <speed>
     d4a:	90 93 0c 45 	sts	0x450C, r25	; 0x80450c <speed+0x1>
				
			}
		}
		if(numofdigits == 3){
     d4e:	03 30       	cpi	r16, 0x03	; 3
     d50:	11 05       	cpc	r17, r1
     d52:	39 f4       	brne	.+14     	; 0xd62 <UART_FanSpeedSet+0xa0>
			speed = UART_CheckFanInput(3);
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	0e 94 c0 05 	call	0xb80	; 0xb80 <UART_CheckFanInput>
     d5a:	80 93 0b 45 	sts	0x450B, r24	; 0x80450b <speed>
     d5e:	90 93 0c 45 	sts	0x450C, r25	; 0x80450c <speed+0x1>
			
		}
		sprintf(TxBuffer,"Fan %u",channel);
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	84 e4       	ldi	r24, 0x44	; 68
     d68:	91 e4       	ldi	r25, 0x41	; 65
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	84 e3       	ldi	r24, 0x34	; 52
     d70:	95 e4       	ldi	r25, 0x45	; 69
     d72:	9f 93       	push	r25
     d74:	8f 93       	push	r24
     d76:	0e 94 bd 19 	call	0x337a	; 0x337a <sprintf>
		UART_SendBuffer();
     d7a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		strcpy(TxBuffer," written to: ");
     d7e:	8e e0       	ldi	r24, 0x0E	; 14
     d80:	eb e4       	ldi	r30, 0x4B	; 75
     d82:	f1 e4       	ldi	r31, 0x41	; 65
     d84:	a4 e3       	ldi	r26, 0x34	; 52
     d86:	b5 e4       	ldi	r27, 0x45	; 69
     d88:	01 90       	ld	r0, Z+
     d8a:	0d 92       	st	X+, r0
     d8c:	8a 95       	dec	r24
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <UART_FanSpeedSet+0xc6>
		UART_SendBuffer();
     d90:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0b c0       	rjmp	.+22     	; 0xdb8 <UART_FanSpeedSet+0xf6>

		} else {
		strcpy(TxBuffer,"No number argument");
     da2:	83 e1       	ldi	r24, 0x13	; 19
     da4:	e9 e5       	ldi	r30, 0x59	; 89
     da6:	f1 e4       	ldi	r31, 0x41	; 65
     da8:	a4 e3       	ldi	r26, 0x34	; 52
     daa:	b5 e4       	ldi	r27, 0x45	; 69
     dac:	01 90       	ld	r0, Z+
     dae:	0d 92       	st	X+, r0
     db0:	8a 95       	dec	r24
     db2:	e1 f7       	brne	.-8      	; 0xdac <UART_FanSpeedSet+0xea>
		UART_SendBuffer();
     db4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	}
	return speed;
}
     db8:	80 91 0b 45 	lds	r24, 0x450B	; 0x80450b <speed>
     dbc:	90 91 0c 45 	lds	r25, 0x450C	; 0x80450c <speed+0x1>
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <LengthofInt>:
	}
	
	
}

uint8_t LengthofInt(uint32_t tacho){
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
	//Function for finding the length of an integer
	int count = 0;
     dce:	c0 e0       	ldi	r28, 0x00	; 0
     dd0:	d0 e0       	ldi	r29, 0x00	; 0
	while(tacho!=0) //Run until tacho value is zero
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <LengthofInt+0x1c>
	{
		tacho=tacho/10; //divide until tacho is 0,....
     dd4:	2a e0       	ldi	r18, 0x0A	; 10
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
     de0:	ca 01       	movw	r24, r20
     de2:	b9 01       	movw	r22, r18
		count++;		//Count for each round to get the length
     de4:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t LengthofInt(uint32_t tacho){
	//Function for finding the length of an integer
	int count = 0;
	while(tacho!=0) //Run until tacho value is zero
     de6:	61 15       	cp	r22, r1
     de8:	71 05       	cpc	r23, r1
     dea:	81 05       	cpc	r24, r1
     dec:	91 05       	cpc	r25, r1
     dee:	91 f7       	brne	.-28     	; 0xdd4 <LengthofInt+0xa>
	{
		tacho=tacho/10; //divide until tacho is 0,....
		count++;		//Count for each round to get the length
	}
	return count;
}
     df0:	8c 2f       	mov	r24, r28
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <UART_TitleAll>:
	//SECOND ROW
	UART_Row(1,5);
}

void UART_TitleAll(void){
	UART_NewLine();
     df8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	strcpy(TxBuffer,"  TACHO - VALUES   |");
     dfc:	85 e1       	ldi	r24, 0x15	; 21
     dfe:	ec e6       	ldi	r30, 0x6C	; 108
     e00:	f1 e4       	ldi	r31, 0x41	; 65
     e02:	a4 e3       	ldi	r26, 0x34	; 52
     e04:	b5 e4       	ldi	r27, 0x45	; 69
     e06:	01 90       	ld	r0, Z+
     e08:	0d 92       	st	X+, r0
     e0a:	8a 95       	dec	r24
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <UART_TitleAll+0xe>
	UART_SendBuffer();
     e0e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	strcpy(TxBuffer,"      ALL FANS      |");
     e12:	86 e1       	ldi	r24, 0x16	; 22
     e14:	e1 e8       	ldi	r30, 0x81	; 129
     e16:	f1 e4       	ldi	r31, 0x41	; 65
     e18:	a4 e3       	ldi	r26, 0x34	; 52
     e1a:	b5 e4       	ldi	r27, 0x45	; 69
     e1c:	01 90       	ld	r0, Z+
     e1e:	0d 92       	st	X+, r0
     e20:	8a 95       	dec	r24
     e22:	e1 f7       	brne	.-8      	; 0xe1c <UART_TitleAll+0x24>
	UART_SendBuffer();
     e24:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	UART_NewLine();
     e28:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	UART_NewLine();
     e2c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
     e30:	08 95       	ret

00000e32 <Tacho_filter>:
		}
		UART_NewLine();
	}
	UART_NewLine();
}
int Tacho_filter(char ch){ //Need too "filter" out the first value since the first reading is always wrong
     e32:	cf 93       	push	r28
     e34:	c8 2f       	mov	r28, r24
	uint32_t filter_val = 0;
	filter_val = Read_Tacho(ch);
     e36:	0e 94 c9 01 	call	0x392	; 0x392 <Read_Tacho>
     e3a:	2f ef       	ldi	r18, 0xFF	; 255
     e3c:	83 ef       	ldi	r24, 0xF3	; 243
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	21 50       	subi	r18, 0x01	; 1
     e42:	80 40       	sbci	r24, 0x00	; 0
     e44:	90 40       	sbci	r25, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <Tacho_filter+0xe>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <Tacho_filter+0x18>
     e4a:	00 00       	nop
	_delay_ms(40);
	filter_val = Read_Tacho(ch);
     e4c:	8c 2f       	mov	r24, r28
     e4e:	0e 94 c9 01 	call	0x392	; 0x392 <Read_Tacho>
	return filter_val;
}
     e52:	cb 01       	movw	r24, r22
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <EEPROM_CalcValue>:
	my_eeprom_update_char(fan_5_EEPROM_adr, SpeedToEEPROMch[5]);
	my_eeprom_update_char(fan_6_EEPROM_adr, SpeedToEEPROMch[6]);
	my_eeprom_update_char(fan_7_EEPROM_adr, SpeedToEEPROMch[7]);
	TxBuffer_StringWrite("Saving done");
}
void EEPROM_CalcValue(void){
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
	for (int i = 0; i<=7; i++)
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
     e60:	37 c0       	rjmp	.+110    	; 0xed0 <EEPROM_CalcValue+0x78>
	{
		SpeedToEEPROMch[i] = Tacho_filter(i);	//Reading the rpm value for the tachometer
     e62:	8c 2f       	mov	r24, r28
     e64:	0e 94 19 07 	call	0xe32	; 0xe32 <Tacho_filter>
     e68:	ac 01       	movw	r20, r24
     e6a:	ce 01       	movw	r24, r28
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	fc 01       	movw	r30, r24
     e72:	e7 52       	subi	r30, 0x27	; 39
     e74:	fb 4b       	sbci	r31, 0xBB	; 187
     e76:	40 83       	st	Z, r20
     e78:	51 83       	std	Z+1, r21	; 0x01
		
		if (SpeedFromEEPROMch[i] != 0) //Check for 0 value (after reset)
     e7a:	fc 01       	movw	r30, r24
     e7c:	e7 51       	subi	r30, 0x17	; 23
     e7e:	fb 4b       	sbci	r31, 0xBB	; 187
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	19 f1       	breq	.+70     	; 0xece <EEPROM_CalcValue+0x76>
		{
			SpeedToEEPROMch[i] = ((19*SpeedFromEEPROMch[i]/20) + (SpeedToEEPROMch[i]/20));	//Calculating new value for EEPROM
     e88:	63 e1       	ldi	r22, 0x13	; 19
     e8a:	68 9f       	mul	r22, r24
     e8c:	90 01       	movw	r18, r0
     e8e:	69 9f       	mul	r22, r25
     e90:	30 0d       	add	r19, r0
     e92:	11 24       	eor	r1, r1
     e94:	ad ec       	ldi	r26, 0xCD	; 205
     e96:	bc ec       	ldi	r27, 0xCC	; 204
     e98:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__umulhisi3>
     e9c:	fc 01       	movw	r30, r24
     e9e:	f2 95       	swap	r31
     ea0:	e2 95       	swap	r30
     ea2:	ef 70       	andi	r30, 0x0F	; 15
     ea4:	ef 27       	eor	r30, r31
     ea6:	ff 70       	andi	r31, 0x0F	; 15
     ea8:	ef 27       	eor	r30, r31
     eaa:	9a 01       	movw	r18, r20
     eac:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__umulhisi3>
     eb0:	92 95       	swap	r25
     eb2:	82 95       	swap	r24
     eb4:	8f 70       	andi	r24, 0x0F	; 15
     eb6:	89 27       	eor	r24, r25
     eb8:	9f 70       	andi	r25, 0x0F	; 15
     eba:	89 27       	eor	r24, r25
     ebc:	8e 0f       	add	r24, r30
     ebe:	9f 1f       	adc	r25, r31
     ec0:	fe 01       	movw	r30, r28
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	e7 52       	subi	r30, 0x27	; 39
     ec8:	fb 4b       	sbci	r31, 0xBB	; 187
     eca:	80 83       	st	Z, r24
     ecc:	91 83       	std	Z+1, r25	; 0x01
	my_eeprom_update_char(fan_6_EEPROM_adr, SpeedToEEPROMch[6]);
	my_eeprom_update_char(fan_7_EEPROM_adr, SpeedToEEPROMch[7]);
	TxBuffer_StringWrite("Saving done");
}
void EEPROM_CalcValue(void){
	for (int i = 0; i<=7; i++)
     ece:	21 96       	adiw	r28, 0x01	; 1
     ed0:	c8 30       	cpi	r28, 0x08	; 8
     ed2:	d1 05       	cpc	r29, r1
     ed4:	34 f2       	brlt	.-116    	; 0xe62 <EEPROM_CalcValue+0xa>
		if (SpeedFromEEPROMch[i] != 0) //Check for 0 value (after reset)
		{
			SpeedToEEPROMch[i] = ((19*SpeedFromEEPROMch[i]/20) + (SpeedToEEPROMch[i]/20));	//Calculating new value for EEPROM
		}
	}
}
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <UART_ReadChannel>:
		} else {
		n = ProcessedBuffer[num];
	}
	return n;
}
void UART_ReadChannel(char ch){
     edc:	df 92       	push	r13
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	d8 2e       	mov	r13, r24
	uint32_t tacho = 0;
	uint8_t count = 0;
	int left_shift = 0;
	int right_shift = 0;
	
	tacho = Tacho_filter(ch);
     eec:	0e 94 19 07 	call	0xe32	; 0xe32 <Tacho_filter>
     ef0:	bc 01       	movw	r22, r24
     ef2:	99 0f       	add	r25, r25
     ef4:	88 0b       	sbc	r24, r24
     ef6:	99 0b       	sbc	r25, r25

	count = LengthofInt(tacho);
     ef8:	0e 94 e5 06 	call	0xdca	; 0xdca <LengthofInt>
	
	//Title
	if(count == 0){
     efc:	81 11       	cpse	r24, r1
     efe:	06 c0       	rjmp	.+12     	; 0xf0c <UART_ReadChannel+0x30>
		left_shift = count;
     f00:	e8 2e       	mov	r14, r24
     f02:	f1 2c       	mov	r15, r1
		right_shift = left_shift + 1;
     f04:	87 01       	movw	r16, r14
     f06:	0f 5f       	subi	r16, 0xFF	; 255
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
     f0a:	08 c0       	rjmp	.+16     	; 0xf1c <UART_ReadChannel+0x40>
	}
	else {
		left_shift = (count-3);
     f0c:	08 2f       	mov	r16, r24
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	78 01       	movw	r14, r16
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	e8 1a       	sub	r14, r24
     f16:	f1 08       	sbc	r15, r1
		right_shift = left_shift + 2;
     f18:	01 50       	subi	r16, 0x01	; 1
     f1a:	11 09       	sbc	r17, r1
	}
	UART_NewLine();
     f1c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	for(int k = 0; k <= (left_shift);k++ ){
     f20:	c0 e0       	ldi	r28, 0x00	; 0
     f22:	d0 e0       	ldi	r29, 0x00	; 0
     f24:	09 c0       	rjmp	.+18     	; 0xf38 <UART_ReadChannel+0x5c>
		
		strcpy(TxBuffer," ");
     f26:	80 e2       	ldi	r24, 0x20	; 32
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	80 93 34 45 	sts	0x4534, r24	; 0x804534 <TxBuffer>
     f2e:	90 93 35 45 	sts	0x4535, r25	; 0x804535 <TxBuffer+0x1>
		UART_SendBuffer();
     f32:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	else {
		left_shift = (count-3);
		right_shift = left_shift + 2;
	}
	UART_NewLine();
	for(int k = 0; k <= (left_shift);k++ ){
     f36:	21 96       	adiw	r28, 0x01	; 1
     f38:	ec 16       	cp	r14, r28
     f3a:	fd 06       	cpc	r15, r29
     f3c:	a4 f7       	brge	.-24     	; 0xf26 <UART_ReadChannel+0x4a>
		
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	strcpy(TxBuffer," TACHO - VALUES");
     f3e:	80 e1       	ldi	r24, 0x10	; 16
     f40:	e7 e9       	ldi	r30, 0x97	; 151
     f42:	f1 e4       	ldi	r31, 0x41	; 65
     f44:	a4 e3       	ldi	r26, 0x34	; 52
     f46:	b5 e4       	ldi	r27, 0x45	; 69
     f48:	01 90       	ld	r0, Z+
     f4a:	0d 92       	st	X+, r0
     f4c:	8a 95       	dec	r24
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <UART_ReadChannel+0x6c>
	UART_SendBuffer();
     f50:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	for(int k = 0; k <= right_shift;k++ ){
     f54:	c0 e0       	ldi	r28, 0x00	; 0
     f56:	d0 e0       	ldi	r29, 0x00	; 0
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <UART_ReadChannel+0x90>
		
		strcpy(TxBuffer," ");
     f5a:	80 e2       	ldi	r24, 0x20	; 32
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	80 93 34 45 	sts	0x4534, r24	; 0x804534 <TxBuffer>
     f62:	90 93 35 45 	sts	0x4535, r25	; 0x804535 <TxBuffer+0x1>
		UART_SendBuffer();
     f66:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		UART_SendBuffer();
		
	}
	strcpy(TxBuffer," TACHO - VALUES");
	UART_SendBuffer();
	for(int k = 0; k <= right_shift;k++ ){
     f6a:	21 96       	adiw	r28, 0x01	; 1
     f6c:	0c 17       	cp	r16, r28
     f6e:	1d 07       	cpc	r17, r29
     f70:	a4 f7       	brge	.-24     	; 0xf5a <UART_ReadChannel+0x7e>
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	
	strcpy(TxBuffer,"|");
     f72:	8c e7       	ldi	r24, 0x7C	; 124
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	80 93 34 45 	sts	0x4534, r24	; 0x804534 <TxBuffer>
     f7a:	90 93 35 45 	sts	0x4535, r25	; 0x804535 <TxBuffer+0x1>
	UART_SendBuffer();
     f7e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	UART_NewLine();
     f82:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	for(int k = 0; k <= left_shift;k++ ){
     f86:	c0 e0       	ldi	r28, 0x00	; 0
     f88:	d0 e0       	ldi	r29, 0x00	; 0
     f8a:	09 c0       	rjmp	.+18     	; 0xf9e <UART_ReadChannel+0xc2>
		
		strcpy(TxBuffer," ");
     f8c:	80 e2       	ldi	r24, 0x20	; 32
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	80 93 34 45 	sts	0x4534, r24	; 0x804534 <TxBuffer>
     f94:	90 93 35 45 	sts	0x4535, r25	; 0x804535 <TxBuffer+0x1>
		UART_SendBuffer();
     f98:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	}
	
	strcpy(TxBuffer,"|");
	UART_SendBuffer();
	UART_NewLine();
	for(int k = 0; k <= left_shift;k++ ){
     f9c:	21 96       	adiw	r28, 0x01	; 1
     f9e:	ec 16       	cp	r14, r28
     fa0:	fd 06       	cpc	r15, r29
     fa2:	a4 f7       	brge	.-24     	; 0xf8c <UART_ReadChannel+0xb0>
		
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	strcpy(TxBuffer,"  FAN CHANNEL ");
     fa4:	c4 e3       	ldi	r28, 0x34	; 52
     fa6:	d5 e4       	ldi	r29, 0x45	; 69
     fa8:	8f e0       	ldi	r24, 0x0F	; 15
     faa:	e7 ea       	ldi	r30, 0xA7	; 167
     fac:	f1 e4       	ldi	r31, 0x41	; 65
     fae:	de 01       	movw	r26, r28
     fb0:	01 90       	ld	r0, Z+
     fb2:	0d 92       	st	X+, r0
     fb4:	8a 95       	dec	r24
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <UART_ReadChannel+0xd4>
	UART_SendBuffer();
     fb8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	sprintf(TxBuffer,"%u",ch);
     fbc:	ed 2c       	mov	r14, r13
     fbe:	f1 2c       	mov	r15, r1
     fc0:	1f 92       	push	r1
     fc2:	df 92       	push	r13
     fc4:	88 e4       	ldi	r24, 0x48	; 72
     fc6:	91 e4       	ldi	r25, 0x41	; 65
     fc8:	9f 93       	push	r25
     fca:	8f 93       	push	r24
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	0e 94 bd 19 	call	0x337a	; 0x337a <sprintf>
	UART_SendBuffer();
     fd4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	
	for(int k = 0; k <= right_shift;k++ ){
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	c0 e0       	ldi	r28, 0x00	; 0
     fe6:	d0 e0       	ldi	r29, 0x00	; 0
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <UART_ReadChannel+0x120>
		
		strcpy(TxBuffer," ");
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	80 93 34 45 	sts	0x4534, r24	; 0x804534 <TxBuffer>
     ff2:	90 93 35 45 	sts	0x4535, r25	; 0x804535 <TxBuffer+0x1>
		UART_SendBuffer();
     ff6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	strcpy(TxBuffer,"  FAN CHANNEL ");
	UART_SendBuffer();
	sprintf(TxBuffer,"%u",ch);
	UART_SendBuffer();
	
	for(int k = 0; k <= right_shift;k++ ){
     ffa:	21 96       	adiw	r28, 0x01	; 1
     ffc:	0c 17       	cp	r16, r28
     ffe:	1d 07       	cpc	r17, r29
    1000:	a4 f7       	brge	.-24     	; 0xfea <UART_ReadChannel+0x10e>
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	
	strcpy(TxBuffer,"|");
    1002:	8c e7       	ldi	r24, 0x7C	; 124
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	80 93 34 45 	sts	0x4534, r24	; 0x804534 <TxBuffer>
    100a:	90 93 35 45 	sts	0x4535, r25	; 0x804535 <TxBuffer+0x1>
	UART_SendBuffer();
    100e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	UART_NewLine();
    1012:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	for(int loop = 0; loop < 11; loop++){
    1016:	00 e0       	ldi	r16, 0x00	; 0
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	42 c0       	rjmp	.+132    	; 0x10a0 <UART_ReadChannel+0x1c4>
		
		strcpy(TxBuffer,"Channel ");
    101c:	c4 e3       	ldi	r28, 0x34	; 52
    101e:	d5 e4       	ldi	r29, 0x45	; 69
    1020:	89 e0       	ldi	r24, 0x09	; 9
    1022:	e6 eb       	ldi	r30, 0xB6	; 182
    1024:	f1 e4       	ldi	r31, 0x41	; 65
    1026:	de 01       	movw	r26, r28
    1028:	01 90       	ld	r0, Z+
    102a:	0d 92       	st	X+, r0
    102c:	8a 95       	dec	r24
    102e:	e1 f7       	brne	.-8      	; 0x1028 <UART_ReadChannel+0x14c>
		UART_SendBuffer();
    1030:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		sprintf(TxBuffer,"%u",ch);
    1034:	ff 92       	push	r15
    1036:	ef 92       	push	r14
    1038:	88 e4       	ldi	r24, 0x48	; 72
    103a:	91 e4       	ldi	r25, 0x41	; 65
    103c:	9f 93       	push	r25
    103e:	8f 93       	push	r24
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	0e 94 bd 19 	call	0x337a	; 0x337a <sprintf>
		UART_SendBuffer();
    1048:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		strcpy(TxBuffer," value: ");
    104c:	89 e0       	ldi	r24, 0x09	; 9
    104e:	ef eb       	ldi	r30, 0xBF	; 191
    1050:	f1 e4       	ldi	r31, 0x41	; 65
    1052:	de 01       	movw	r26, r28
    1054:	01 90       	ld	r0, Z+
    1056:	0d 92       	st	X+, r0
    1058:	8a 95       	dec	r24
    105a:	e1 f7       	brne	.-8      	; 0x1054 <UART_ReadChannel+0x178>
		UART_SendBuffer();
    105c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		tacho = Read_Tacho(ch);
    1060:	8d 2d       	mov	r24, r13
    1062:	0e 94 c9 01 	call	0x392	; 0x392 <Read_Tacho>
		sprintf(TxBuffer,"%lu",tacho);
    1066:	9f 93       	push	r25
    1068:	8f 93       	push	r24
    106a:	7f 93       	push	r23
    106c:	6f 93       	push	r22
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	91 e4       	ldi	r25, 0x41	; 65
    1072:	9f 93       	push	r25
    1074:	8f 93       	push	r24
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	0e 94 bd 19 	call	0x337a	; 0x337a <sprintf>
		UART_SendBuffer();
    107e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		strcpy(TxBuffer,"|");
    1082:	8c e7       	ldi	r24, 0x7C	; 124
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	88 83       	st	Y, r24
    1088:	99 83       	std	Y+1, r25	; 0x01
		UART_SendBuffer();
    108a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		UART_NewLine();
    108e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	}
	
	strcpy(TxBuffer,"|");
	UART_SendBuffer();
	UART_NewLine();
	for(int loop = 0; loop < 11; loop++){
    1092:	0f 5f       	subi	r16, 0xFF	; 255
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	8d b7       	in	r24, 0x3d	; 61
    1098:	9e b7       	in	r25, 0x3e	; 62
    109a:	0e 96       	adiw	r24, 0x0e	; 14
    109c:	8d bf       	out	0x3d, r24	; 61
    109e:	9e bf       	out	0x3e, r25	; 62
    10a0:	0b 30       	cpi	r16, 0x0B	; 11
    10a2:	11 05       	cpc	r17, r1
    10a4:	0c f4       	brge	.+2      	; 0x10a8 <UART_ReadChannel+0x1cc>
    10a6:	ba cf       	rjmp	.-140    	; 0x101c <UART_ReadChannel+0x140>
		UART_NewLine();
		
	}
	
	
}
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	08 95       	ret

000010b8 <UART_Row>:
	UART_SendBuffer();
	UART_NewLine();
	UART_NewLine();
}

void UART_Row(char row, char numofsamples){
    10b8:	5f 92       	push	r5
    10ba:	6f 92       	push	r6
    10bc:	7f 92       	push	r7
    10be:	8f 92       	push	r8
    10c0:	9f 92       	push	r9
    10c2:	af 92       	push	r10
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	68 2e       	mov	r6, r24
    10d8:	56 2e       	mov	r5, r22
	uint32_t tacho = 0;
	for(int ch = 0; ch <= 3; ch++){
    10da:	c0 e0       	ldi	r28, 0x00	; 0
    10dc:	d0 e0       	ldi	r29, 0x00	; 0
    10de:	0c c0       	rjmp	.+24     	; 0x10f8 <UART_Row+0x40>
		strcpy(TxBuffer,"-------------------- ");
    10e0:	86 e1       	ldi	r24, 0x16	; 22
    10e2:	ec ec       	ldi	r30, 0xCC	; 204
    10e4:	f1 e4       	ldi	r31, 0x41	; 65
    10e6:	a4 e3       	ldi	r26, 0x34	; 52
    10e8:	b5 e4       	ldi	r27, 0x45	; 69
    10ea:	01 90       	ld	r0, Z+
    10ec:	0d 92       	st	X+, r0
    10ee:	8a 95       	dec	r24
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <UART_Row+0x32>
		UART_SendBuffer();
    10f2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
	UART_NewLine();
}

void UART_Row(char row, char numofsamples){
	uint32_t tacho = 0;
	for(int ch = 0; ch <= 3; ch++){
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	c4 30       	cpi	r28, 0x04	; 4
    10fa:	d1 05       	cpc	r29, r1
    10fc:	8c f3       	brlt	.-30     	; 0x10e0 <UART_Row+0x28>
		strcpy(TxBuffer,"-------------------- ");
		UART_SendBuffer();
	}
	UART_NewLine();
    10fe:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	row = row*5-(row);
    1102:	66 0c       	add	r6, r6
    1104:	66 0c       	add	r6, r6
	for(int ch = 0+row; ch <= 3+row; ch++){
    1106:	71 2c       	mov	r7, r1
    1108:	e3 01       	movw	r28, r6
    110a:	29 c0       	rjmp	.+82     	; 0x115e <UART_Row+0xa6>
		
		strcpy(TxBuffer,"Channel ");
    110c:	04 e3       	ldi	r16, 0x34	; 52
    110e:	15 e4       	ldi	r17, 0x45	; 69
    1110:	89 e0       	ldi	r24, 0x09	; 9
    1112:	e6 eb       	ldi	r30, 0xB6	; 182
    1114:	f1 e4       	ldi	r31, 0x41	; 65
    1116:	d8 01       	movw	r26, r16
    1118:	01 90       	ld	r0, Z+
    111a:	0d 92       	st	X+, r0
    111c:	8a 95       	dec	r24
    111e:	e1 f7       	brne	.-8      	; 0x1118 <UART_Row+0x60>
		UART_SendBuffer();
    1120:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		sprintf(TxBuffer,"%u",ch);
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	88 e4       	ldi	r24, 0x48	; 72
    112a:	91 e4       	ldi	r25, 0x41	; 65
    112c:	9f 93       	push	r25
    112e:	8f 93       	push	r24
    1130:	1f 93       	push	r17
    1132:	0f 93       	push	r16
    1134:	0e 94 bd 19 	call	0x337a	; 0x337a <sprintf>
		UART_SendBuffer();
    1138:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		strcpy(TxBuffer,"          | ");
    113c:	8d e0       	ldi	r24, 0x0D	; 13
    113e:	e2 ee       	ldi	r30, 0xE2	; 226
    1140:	f1 e4       	ldi	r31, 0x41	; 65
    1142:	d8 01       	movw	r26, r16
    1144:	01 90       	ld	r0, Z+
    1146:	0d 92       	st	X+, r0
    1148:	8a 95       	dec	r24
    114a:	e1 f7       	brne	.-8      	; 0x1144 <UART_Row+0x8c>
		UART_SendBuffer();
    114c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		strcpy(TxBuffer,"-------------------- ");
		UART_SendBuffer();
	}
	UART_NewLine();
	row = row*5-(row);
	for(int ch = 0+row; ch <= 3+row; ch++){
    1150:	21 96       	adiw	r28, 0x01	; 1
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	73 01       	movw	r14, r6
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	e8 0e       	add	r14, r24
    1164:	f1 1c       	adc	r15, r1
    1166:	ec 16       	cp	r14, r28
    1168:	fd 06       	cpc	r15, r29
    116a:	84 f6       	brge	.-96     	; 0x110c <UART_Row+0x54>
		sprintf(TxBuffer,"%u",ch);
		UART_SendBuffer();
		strcpy(TxBuffer,"          | ");
		UART_SendBuffer();
	}
	UART_NewLine();
    116c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	for(int samples = 0; samples < numofsamples; samples++){
    1170:	c1 2c       	mov	r12, r1
    1172:	d1 2c       	mov	r13, r1
    1174:	53 c0       	rjmp	.+166    	; 0x121c <UART_Row+0x164>
		for(int ch = 0+row; ch <= 3+row;ch++){
			strcpy(TxBuffer,"Channel ");
    1176:	c4 e3       	ldi	r28, 0x34	; 52
    1178:	d5 e4       	ldi	r29, 0x45	; 69
    117a:	89 e0       	ldi	r24, 0x09	; 9
    117c:	e6 eb       	ldi	r30, 0xB6	; 182
    117e:	f1 e4       	ldi	r31, 0x41	; 65
    1180:	de 01       	movw	r26, r28
    1182:	01 90       	ld	r0, Z+
    1184:	0d 92       	st	X+, r0
    1186:	8a 95       	dec	r24
    1188:	e1 f7       	brne	.-8      	; 0x1182 <UART_Row+0xca>
			UART_SendBuffer();
    118a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
			sprintf(TxBuffer,"%u",ch);
    118e:	1f 93       	push	r17
    1190:	0f 93       	push	r16
    1192:	88 e4       	ldi	r24, 0x48	; 72
    1194:	91 e4       	ldi	r25, 0x41	; 65
    1196:	9f 93       	push	r25
    1198:	8f 93       	push	r24
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	0e 94 bd 19 	call	0x337a	; 0x337a <sprintf>
			UART_SendBuffer();
    11a2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
			tacho = Tacho_filter(ch);
    11a6:	80 2f       	mov	r24, r16
    11a8:	0e 94 19 07 	call	0xe32	; 0xe32 <Tacho_filter>
    11ac:	4c 01       	movw	r8, r24
    11ae:	99 0f       	add	r25, r25
    11b0:	aa 08       	sbc	r10, r10
    11b2:	bb 08       	sbc	r11, r11
			strcpy(TxBuffer," value: ");
    11b4:	89 e0       	ldi	r24, 0x09	; 9
    11b6:	ef eb       	ldi	r30, 0xBF	; 191
    11b8:	f1 e4       	ldi	r31, 0x41	; 65
    11ba:	de 01       	movw	r26, r28
    11bc:	01 90       	ld	r0, Z+
    11be:	0d 92       	st	X+, r0
    11c0:	8a 95       	dec	r24
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <UART_Row+0x104>
			UART_SendBuffer();
    11c4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
			sprintf(TxBuffer,"%lu",tacho);
    11c8:	bf 92       	push	r11
    11ca:	af 92       	push	r10
    11cc:	9f 92       	push	r9
    11ce:	8f 92       	push	r8
    11d0:	88 ec       	ldi	r24, 0xC8	; 200
    11d2:	91 e4       	ldi	r25, 0x41	; 65
    11d4:	9f 93       	push	r25
    11d6:	8f 93       	push	r24
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	0e 94 bd 19 	call	0x337a	; 0x337a <sprintf>
			UART_SendBuffer();
    11e0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
			strcpy(TxBuffer," | ");
    11e4:	80 e2       	ldi	r24, 0x20	; 32
    11e6:	9c e7       	ldi	r25, 0x7C	; 124
    11e8:	88 83       	st	Y, r24
    11ea:	99 83       	std	Y+1, r25	; 0x01
    11ec:	80 e2       	ldi	r24, 0x20	; 32
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	8a 83       	std	Y+2, r24	; 0x02
    11f2:	9b 83       	std	Y+3, r25	; 0x03
			UART_SendBuffer();
    11f4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		strcpy(TxBuffer,"          | ");
		UART_SendBuffer();
	}
	UART_NewLine();
	for(int samples = 0; samples < numofsamples; samples++){
		for(int ch = 0+row; ch <= 3+row;ch++){
    11f8:	0f 5f       	subi	r16, 0xFF	; 255
    11fa:	1f 4f       	sbci	r17, 0xFF	; 255
    11fc:	8d b7       	in	r24, 0x3d	; 61
    11fe:	9e b7       	in	r25, 0x3e	; 62
    1200:	0e 96       	adiw	r24, 0x0e	; 14
    1202:	8d bf       	out	0x3d, r24	; 61
    1204:	9e bf       	out	0x3e, r25	; 62
    1206:	01 c0       	rjmp	.+2      	; 0x120a <UART_Row+0x152>
    1208:	83 01       	movw	r16, r6
    120a:	e0 16       	cp	r14, r16
    120c:	f1 06       	cpc	r15, r17
    120e:	0c f0       	brlt	.+2      	; 0x1212 <UART_Row+0x15a>
    1210:	b2 cf       	rjmp	.-156    	; 0x1176 <UART_Row+0xbe>
			sprintf(TxBuffer,"%lu",tacho);
			UART_SendBuffer();
			strcpy(TxBuffer," | ");
			UART_SendBuffer();
		}
		UART_NewLine();
    1212:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		UART_SendBuffer();
		strcpy(TxBuffer,"          | ");
		UART_SendBuffer();
	}
	UART_NewLine();
	for(int samples = 0; samples < numofsamples; samples++){
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	c9 1a       	sub	r12, r25
    121a:	d9 0a       	sbc	r13, r25
    121c:	85 2d       	mov	r24, r5
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	c8 16       	cp	r12, r24
    1222:	d9 06       	cpc	r13, r25
    1224:	8c f3       	brlt	.-30     	; 0x1208 <UART_Row+0x150>
			strcpy(TxBuffer," | ");
			UART_SendBuffer();
		}
		UART_NewLine();
	}
	UART_NewLine();
    1226:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	bf 90       	pop	r11
    123c:	af 90       	pop	r10
    123e:	9f 90       	pop	r9
    1240:	8f 90       	pop	r8
    1242:	7f 90       	pop	r7
    1244:	6f 90       	pop	r6
    1246:	5f 90       	pop	r5
    1248:	08 95       	ret

0000124a <UART_ReadAll>:
	}
	return count;
}
void UART_ReadAll(void){
	//Title
	UART_TitleAll();
    124a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <UART_TitleAll>
	//FIRST ROW
	UART_Row(0,5);
    124e:	65 e0       	ldi	r22, 0x05	; 5
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <UART_Row>
	//SECOND ROW
	UART_Row(1,5);
    1256:	65 e0       	ldi	r22, 0x05	; 5
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <UART_Row>
    125e:	08 95       	ret

00001260 <UART3_init>:
	/*Calculating the baudrate from the formula in datasheet.
	The register is 16 bit therfore uint16_t*/
	const uint16_t BAUD_rate = (uint16_t) (F_CPU*64/(16*UART_bps));
	
	//Set the baudrate to the UART3.BAUD register
	USART3.BAUD = BAUD_rate;
    1260:	e0 e6       	ldi	r30, 0x60	; 96
    1262:	f8 e0       	ldi	r31, 0x08	; 8
    1264:	8a e0       	ldi	r24, 0x0A	; 10
    1266:	9a e1       	ldi	r25, 0x1A	; 26
    1268:	80 87       	std	Z+8, r24	; 0x08
    126a:	91 87       	std	Z+9, r25	; 0x09
	
	//Setting up PB0(TxD)
	//Set PB0 to TxD, PB1 to RxD, PB2 to XCK and PB3 as XDIR
	PORTMUX.USARTROUTEA = PORTMUX_USART3_DEFAULT_gc;
    126c:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7e05e2>
	//Set PB0 to output
	PORTB.DIR |= (1 << TxD);
    1270:	a0 e2       	ldi	r26, 0x20	; 32
    1272:	b4 e0       	ldi	r27, 0x04	; 4
    1274:	8c 91       	ld	r24, X
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	8c 93       	st	X, r24

	//Enable RxD interrupt
	USART3.CTRLA = (1 << USART_RXCIE_bp);
    127a:	80 e8       	ldi	r24, 0x80	; 128
    127c:	85 83       	std	Z+5, r24	; 0x05
	
	//Enable RxD and TxD
	USART3.CTRLB = (1 << USART_RXEN_bp) | (1 << USART_TXEN_bp);
    127e:	80 ec       	ldi	r24, 0xC0	; 192
    1280:	86 83       	std	Z+6, r24	; 0x06
	
	//Setting frame format and modes | Asynchronus (UART) | Disable Parity bit | Set 1 stop bit | Rx/Tx-Data size 8-bit
	USART3.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	87 83       	std	Z+7, r24	; 0x07
	
	USART3.CTRLD = USART_ABW_WDW0_gc;
    1286:	12 86       	std	Z+10, r1	; 0x0a
    1288:	08 95       	ret

0000128a <UART_ISR>:
}

void UART_ISR(void){
    128a:	cf 93       	push	r28
	uint8_t recvbyte = UART_RX_BUFFER;
    128c:	c0 91 60 08 	lds	r28, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
	static uint8_t lastbyte = 0;			//Static does that the variable not initialize more then one time
	switch(recvbyte){						//Switch case for checking the incoming for bytes
    1290:	ca 30       	cpi	r28, 0x0A	; 10
    1292:	51 f0       	breq	.+20     	; 0x12a8 <UART_ISR+0x1e>
    1294:	cd 30       	cpi	r28, 0x0D	; 13
    1296:	61 f0       	breq	.+24     	; 0x12b0 <UART_ISR+0x26>
    1298:	c1 11       	cpse	r28, r1
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <UART_ISR+0x2c>
		case(0):
		EchoON = ~EchoON;					//If case is 0, toggle EchoON
    129c:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <EchoON>
    12a0:	80 95       	com	r24
    12a2:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <EchoON>
		break;								//Exit loop
    12a6:	0a c0       	rjmp	.+20     	; 0x12bc <UART_ISR+0x32>
		case(LF):
		if (lastbyte == CR){				//ignore LF if last byte was CR
    12a8:	80 91 cc 44 	lds	r24, 0x44CC	; 0x8044cc <lastbyte.5195>
    12ac:	8d 30       	cpi	r24, 0x0D	; 13
    12ae:	31 f0       	breq	.+12     	; 0x12bc <UART_ISR+0x32>
			break;							//Exit loop, since we ignore it
		}
		case(CR):							//When CR(or keyboard <enter>) is reachieved, the command can be run
		RecvCommand = 1;					//The received command flag is raised, so the process with perform task is started
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 d0 44 	sts	0x44D0, r24	; 0x8044d0 <RecvCommand>
		default:							//If no cases are true, the defaults run | default case dont need any break to exit
		CharInBUF(recvbyte);				//Character is put in the buffer, through CharINBUF();
    12b6:	8c 2f       	mov	r24, r28
    12b8:	0e 94 a8 04 	call	0x950	; 0x950 <CharInBUF>
	}
	if(EchoON && TxBufferFlag){				//Checks if echo is on and tx-buffer is ready to receive data
    12bc:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <EchoON>
    12c0:	88 23       	and	r24, r24
    12c2:	39 f0       	breq	.+14     	; 0x12d2 <UART_ISR+0x48>
    12c4:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    12c8:	85 ff       	sbrs	r24, 5
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <UART_ISR+0x48>
		UART_Echo(recvbyte);				//Sends echo to the terminal via tx-buffer
    12cc:	8c 2f       	mov	r24, r28
    12ce:	0e 94 59 04 	call	0x8b2	; 0x8b2 <UART_Echo>
	}
	lastbyte = recvbyte;					//Saves the received byte to lastbyte for next round
    12d2:	c0 93 cc 44 	sts	0x44CC, r28	; 0x8044cc <lastbyte.5195>
}
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <TxBuffer_StringWrite>:



void TxBuffer_StringWrite(char* str){
	strcpy(TxBuffer,str);
    12da:	bc 01       	movw	r22, r24
    12dc:	84 e3       	ldi	r24, 0x34	; 52
    12de:	95 e4       	ldi	r25, 0x45	; 69
    12e0:	0e 94 31 19 	call	0x3262	; 0x3262 <strcpy>
	UART_SendBuffer();
    12e4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
    12e8:	08 95       	ret

000012ea <EEPROM_UpdateAll>:
	
	EEPROM_FaultDetect();
	
	EEPROM_UpdateAll();
}
void EEPROM_UpdateAll(void){
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
	//Updates values to EEPROM
	my_eeprom_update_char(fan_0_EEPROM_adr, SpeedToEEPROMch[0]);
    12ee:	c9 ed       	ldi	r28, 0xD9	; 217
    12f0:	d4 e4       	ldi	r29, 0x44	; 68
    12f2:	68 81       	ld	r22, Y
    12f4:	79 81       	ldd	r23, Y+1	; 0x01
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_1_EEPROM_adr, SpeedToEEPROMch[1]);
    12fc:	6a 81       	ldd	r22, Y+2	; 0x02
    12fe:	7b 81       	ldd	r23, Y+3	; 0x03
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_2_EEPROM_adr, SpeedToEEPROMch[2]);
    1306:	6c 81       	ldd	r22, Y+4	; 0x04
    1308:	7d 81       	ldd	r23, Y+5	; 0x05
    130a:	84 e0       	ldi	r24, 0x04	; 4
    130c:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_3_EEPROM_adr, SpeedToEEPROMch[3]);
    1310:	6e 81       	ldd	r22, Y+6	; 0x06
    1312:	7f 81       	ldd	r23, Y+7	; 0x07
    1314:	86 e0       	ldi	r24, 0x06	; 6
    1316:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_4_EEPROM_adr, SpeedToEEPROMch[4]);
    131a:	68 85       	ldd	r22, Y+8	; 0x08
    131c:	79 85       	ldd	r23, Y+9	; 0x09
    131e:	88 e0       	ldi	r24, 0x08	; 8
    1320:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_5_EEPROM_adr, SpeedToEEPROMch[5]);
    1324:	6a 85       	ldd	r22, Y+10	; 0x0a
    1326:	7b 85       	ldd	r23, Y+11	; 0x0b
    1328:	8a e0       	ldi	r24, 0x0A	; 10
    132a:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_6_EEPROM_adr, SpeedToEEPROMch[6]);
    132e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1330:	7d 85       	ldd	r23, Y+13	; 0x0d
    1332:	8c e0       	ldi	r24, 0x0C	; 12
    1334:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_7_EEPROM_adr, SpeedToEEPROMch[7]);
    1338:	6e 85       	ldd	r22, Y+14	; 0x0e
    133a:	7f 85       	ldd	r23, Y+15	; 0x0f
    133c:	8e e0       	ldi	r24, 0x0E	; 14
    133e:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	TxBuffer_StringWrite("Saving done");
    1342:	8f ee       	ldi	r24, 0xEF	; 239
    1344:	91 e4       	ldi	r25, 0x41	; 65
    1346:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <ResetEEPROM>:
		}
	}
}
void ResetEEPROM(void){
	//Sets value to zero at every EEPROM adresse
	my_eeprom_update_char(fan_0_EEPROM_adr, 0);
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_1_EEPROM_adr, 0);
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_2_EEPROM_adr, 0);
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	84 e0       	ldi	r24, 0x04	; 4
    136a:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_3_EEPROM_adr, 0);
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	86 e0       	ldi	r24, 0x06	; 6
    1374:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_4_EEPROM_adr, 0);
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	88 e0       	ldi	r24, 0x08	; 8
    137e:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_5_EEPROM_adr, 0);
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	8a e0       	ldi	r24, 0x0A	; 10
    1388:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_6_EEPROM_adr, 0);
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	8c e0       	ldi	r24, 0x0C	; 12
    1392:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	my_eeprom_update_char(fan_7_EEPROM_adr, 0);
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	8e e0       	ldi	r24, 0x0E	; 14
    139c:	0e 94 02 04 	call	0x804	; 0x804 <my_eeprom_update_char>
	
	TxBuffer_StringWrite("EEPROM has been reset");
    13a0:	8b ef       	ldi	r24, 0xFB	; 251
    13a2:	91 e4       	ldi	r25, 0x41	; 65
    13a4:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
    13a8:	08 95       	ret

000013aa <UART_HelpMenu>:
	SpeedFromEEPROMch[5] = my_eeprom_read_char(fan_5_EEPROM_adr);
	SpeedFromEEPROMch[6] = my_eeprom_read_char(fan_6_EEPROM_adr);
	SpeedFromEEPROMch[7] = my_eeprom_read_char(fan_7_EEPROM_adr);
}
void UART_HelpMenu(void){
	if (ProcessWord() == 0){
    13aa:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ProcessWord>
    13ae:	81 11       	cpse	r24, r1
    13b0:	2f c0       	rjmp	.+94     	; 0x1410 <UART_HelpMenu+0x66>
		TxBuffer_StringWrite("Available commands:");
    13b2:	81 e1       	ldi	r24, 0x11	; 17
    13b4:	92 e4       	ldi	r25, 0x42	; 66
    13b6:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
		UART_NewLine();
    13ba:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		TxBuffer_StringWrite("all <on/off>");
    13be:	85 e2       	ldi	r24, 0x25	; 37
    13c0:	92 e4       	ldi	r25, 0x42	; 66
    13c2:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
		UART_NewLine();
    13c6:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		TxBuffer_StringWrite("read <fan channel>");
    13ca:	82 e3       	ldi	r24, 0x32	; 50
    13cc:	92 e4       	ldi	r25, 0x42	; 66
    13ce:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
		UART_NewLine();
    13d2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		TxBuffer_StringWrite("echo <on/off> no syntax = is echo on or off?");
    13d6:	85 e4       	ldi	r24, 0x45	; 69
    13d8:	92 e4       	ldi	r25, 0x42	; 66
    13da:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
		UART_NewLine();
    13de:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		TxBuffer_StringWrite("reseteeprom, no syntax");
    13e2:	82 e7       	ldi	r24, 0x72	; 114
    13e4:	92 e4       	ldi	r25, 0x42	; 66
    13e6:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
		UART_NewLine();
    13ea:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		TxBuffer_StringWrite("save, no syntax");
    13ee:	89 e8       	ldi	r24, 0x89	; 137
    13f0:	92 e4       	ldi	r25, 0x42	; 66
    13f2:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
		UART_NewLine();
    13f6:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		TxBuffer_StringWrite("trenddata, no syntax");
    13fa:	89 e9       	ldi	r24, 0x99	; 153
    13fc:	92 e4       	ldi	r25, 0x42	; 66
    13fe:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
		UART_NewLine();
    1402:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		TxBuffer_StringWrite("temp, no syntax");
    1406:	8e ea       	ldi	r24, 0xAE	; 174
    1408:	92 e4       	ldi	r25, 0x42	; 66
    140a:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
    140e:	08 95       	ret
		} else {
		TxBuffer_StringWrite("help, wrong syntax");
    1410:	8e eb       	ldi	r24, 0xBE	; 190
    1412:	92 e4       	ldi	r25, 0x42	; 66
    1414:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
    1418:	08 95       	ret

0000141a <AllON>:
		}
	}
	return 0; //Process done
}

void AllON(void){
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
	for(int i = 0; i < 8; i++){
    141e:	c0 e0       	ldi	r28, 0x00	; 0
    1420:	d0 e0       	ldi	r29, 0x00	; 0
    1422:	05 c0       	rjmp	.+10     	; 0x142e <AllON+0x14>
		AnalogWrite(i,0);
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	8c 2f       	mov	r24, r28
    1428:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
	}
	return 0; //Process done
}

void AllON(void){
	for(int i = 0; i < 8; i++){
    142c:	21 96       	adiw	r28, 0x01	; 1
    142e:	c8 30       	cpi	r28, 0x08	; 8
    1430:	d1 05       	cpc	r29, r1
    1432:	c4 f3       	brlt	.-16     	; 0x1424 <AllON+0xa>
		AnalogWrite(i,0);
	}
	TxBuffer_StringWrite("PWM off all fans, fans full power");
    1434:	81 ed       	ldi	r24, 0xD1	; 209
    1436:	92 e4       	ldi	r25, 0x42	; 66
    1438:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret

00001442 <AllOFF>:
void AllOFF(void){
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
	for(int j = 0; j < 8; j++){
    1446:	c0 e0       	ldi	r28, 0x00	; 0
    1448:	d0 e0       	ldi	r29, 0x00	; 0
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <AllOFF+0x14>
		AnalogWrite(j,100);
    144c:	64 e6       	ldi	r22, 0x64	; 100
    144e:	8c 2f       	mov	r24, r28
    1450:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
		AnalogWrite(i,0);
	}
	TxBuffer_StringWrite("PWM off all fans, fans full power");
}
void AllOFF(void){
	for(int j = 0; j < 8; j++){
    1454:	21 96       	adiw	r28, 0x01	; 1
    1456:	c8 30       	cpi	r28, 0x08	; 8
    1458:	d1 05       	cpc	r29, r1
    145a:	c4 f3       	brlt	.-16     	; 0x144c <AllOFF+0xa>
		AnalogWrite(j,100);
	}
	TxBuffer_StringWrite("PWM fully on all fans, fans off");
    145c:	83 ef       	ldi	r24, 0xF3	; 243
    145e:	92 e4       	ldi	r25, 0x42	; 66
    1460:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
}
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <TxBuffer_IntWrite>:
	strcpy(TxBuffer,str);
	UART_SendBuffer();
}

void TxBuffer_IntWrite(char* buf, int data){
	sprintf(buf,"%u",data);
    146a:	7f 93       	push	r23
    146c:	6f 93       	push	r22
    146e:	28 e4       	ldi	r18, 0x48	; 72
    1470:	31 e4       	ldi	r19, 0x41	; 65
    1472:	3f 93       	push	r19
    1474:	2f 93       	push	r18
    1476:	9f 93       	push	r25
    1478:	8f 93       	push	r24
    147a:	0e 94 bd 19 	call	0x337a	; 0x337a <sprintf>
	UART_SendBuffer();
    147e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	08 95       	ret

00001490 <EEPROM_FaultDetect>:
			SpeedToEEPROMch[i] = ((19*SpeedFromEEPROMch[i]/20) + (SpeedToEEPROMch[i]/20));	//Calculating new value for EEPROM
		}
	}
}

void EEPROM_FaultDetect(void){
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
	for (int i = 0; i<=7; i++)
    1494:	c0 e0       	ldi	r28, 0x00	; 0
    1496:	d0 e0       	ldi	r29, 0x00	; 0
    1498:	25 c0       	rjmp	.+74     	; 0x14e4 <EEPROM_FaultDetect+0x54>
	{	
		if (SpeedFromEEPROMch[i] != 0) //Check for 0 value (after reset)
    149a:	fe 01       	movw	r30, r28
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	e7 51       	subi	r30, 0x17	; 23
    14a2:	fb 4b       	sbci	r31, 0xBB	; 187
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	d9 f0       	breq	.+54     	; 0x14e2 <EEPROM_FaultDetect+0x52>
		{	
			if ((SpeedFromEEPROMch[i]*TrendDataFaultPercentage) > SpeedToEEPROMch[i])	//Value diffrence to big | fault detected
    14ac:	43 e6       	ldi	r20, 0x63	; 99
    14ae:	48 9f       	mul	r20, r24
    14b0:	90 01       	movw	r18, r0
    14b2:	49 9f       	mul	r20, r25
    14b4:	30 0d       	add	r19, r0
    14b6:	11 24       	eor	r1, r1
    14b8:	fe 01       	movw	r30, r28
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	e7 52       	subi	r30, 0x27	; 39
    14c0:	fb 4b       	sbci	r31, 0xBB	; 187
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	82 17       	cp	r24, r18
    14c8:	93 07       	cpc	r25, r19
    14ca:	58 f4       	brcc	.+22     	; 0x14e2 <EEPROM_FaultDetect+0x52>
			{
				TxBuffer_StringWrite("Fault predicted in fan ");
    14cc:	83 e1       	ldi	r24, 0x13	; 19
    14ce:	93 e4       	ldi	r25, 0x43	; 67
    14d0:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
				TxBuffer_IntWrite(TxBuffer, i);
    14d4:	be 01       	movw	r22, r28
    14d6:	84 e3       	ldi	r24, 0x34	; 52
    14d8:	95 e4       	ldi	r25, 0x45	; 69
    14da:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
				UART_NewLine();
    14de:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
		}
	}
}

void EEPROM_FaultDetect(void){
	for (int i = 0; i<=7; i++)
    14e2:	21 96       	adiw	r28, 0x01	; 1
    14e4:	c8 30       	cpi	r28, 0x08	; 8
    14e6:	d1 05       	cpc	r29, r1
    14e8:	c4 f2       	brlt	.-80     	; 0x149a <EEPROM_FaultDetect+0xa>
				TxBuffer_IntWrite(TxBuffer, i);
				UART_NewLine();
			}
		}
	}
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <EEPROM_SaveFanStatus>:
	}
	
}
void EEPROM_SaveFanStatus(void){
	//Turns the fans up to max speed before updating speed data
	AllON();
    14f0:	0e 94 0d 0a 	call	0x141a	; 0x141a <AllON>
	
	UART_NewLine();
    14f4:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	
	EEPROM_ReadAll();
    14f8:	0e 94 2a 04 	call	0x854	; 0x854 <EEPROM_ReadAll>
	
	EEPROM_CalcValue();
    14fc:	0e 94 2c 07 	call	0xe58	; 0xe58 <EEPROM_CalcValue>
	
	EEPROM_FaultDetect();
    1500:	0e 94 48 0a 	call	0x1490	; 0x1490 <EEPROM_FaultDetect>
	
	EEPROM_UpdateAll();
    1504:	0e 94 75 09 	call	0x12ea	; 0x12ea <EEPROM_UpdateAll>
    1508:	08 95       	ret

0000150a <UART_WriteTrendData>:
	my_eeprom_update_char(fan_6_EEPROM_adr, 0);
	my_eeprom_update_char(fan_7_EEPROM_adr, 0);
	
	TxBuffer_StringWrite("EEPROM has been reset");
}
void UART_WriteTrendData(void){
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
	EEPROM_ReadAll();
    150e:	0e 94 2a 04 	call	0x854	; 0x854 <EEPROM_ReadAll>
	//Presenting the data in the UART menu
	UART_NewLine();
    1512:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	TxBuffer_StringWrite("TREND DATA:");
    1516:	8b e2       	ldi	r24, 0x2B	; 43
    1518:	93 e4       	ldi	r25, 0x43	; 67
    151a:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
	UART_NewLine();
    151e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	UART_NewLine();
    1522:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	for (int i = 0; i<=7; i++)
    1526:	c0 e0       	ldi	r28, 0x00	; 0
    1528:	d0 e0       	ldi	r29, 0x00	; 0
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <UART_WriteTrendData+0x58>
	{
		TxBuffer_StringWrite("Trend data for fan ");
    152c:	87 e3       	ldi	r24, 0x37	; 55
    152e:	93 e4       	ldi	r25, 0x43	; 67
    1530:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
		TxBuffer_IntWrite(TxBuffer, i);
    1534:	be 01       	movw	r22, r28
    1536:	84 e3       	ldi	r24, 0x34	; 52
    1538:	95 e4       	ldi	r25, 0x45	; 69
    153a:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
		TxBuffer_StringWrite(": ");
    153e:	84 e6       	ldi	r24, 0x64	; 100
    1540:	90 e4       	ldi	r25, 0x40	; 64
    1542:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
		TxBuffer_IntWrite(TxBuffer, SpeedFromEEPROMch[i]);
    1546:	fe 01       	movw	r30, r28
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	e7 51       	subi	r30, 0x17	; 23
    154e:	fb 4b       	sbci	r31, 0xBB	; 187
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	84 e3       	ldi	r24, 0x34	; 52
    1556:	95 e4       	ldi	r25, 0x45	; 69
    1558:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
		UART_NewLine();
    155c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
	//Presenting the data in the UART menu
	UART_NewLine();
	TxBuffer_StringWrite("TREND DATA:");
	UART_NewLine();
	UART_NewLine();
	for (int i = 0; i<=7; i++)
    1560:	21 96       	adiw	r28, 0x01	; 1
    1562:	c8 30       	cpi	r28, 0x08	; 8
    1564:	d1 05       	cpc	r29, r1
    1566:	14 f3       	brlt	.-60     	; 0x152c <UART_WriteTrendData+0x22>
		TxBuffer_IntWrite(TxBuffer, i);
		TxBuffer_StringWrite(": ");
		TxBuffer_IntWrite(TxBuffer, SpeedFromEEPROMch[i]);
		UART_NewLine();
	}
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <EchoToggle>:
	sprintf(buf,"%u",data);
	UART_SendBuffer();
}

void EchoToggle(void){
	if (strcmp(ProcessedBuffer,"on")==0){
    156e:	60 e5       	ldi	r22, 0x50	; 80
    1570:	73 e4       	ldi	r23, 0x43	; 67
    1572:	8d e0       	ldi	r24, 0x0D	; 13
    1574:	95 e4       	ldi	r25, 0x45	; 69
    1576:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    157a:	89 2b       	or	r24, r25
    157c:	79 f4       	brne	.+30     	; 0x159c <EchoToggle+0x2e>
		EchoON = ~0;
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <EchoON>
		strcpy(TxBuffer,"Echo on");
    1584:	88 e0       	ldi	r24, 0x08	; 8
    1586:	eb e4       	ldi	r30, 0x4B	; 75
    1588:	f3 e4       	ldi	r31, 0x43	; 67
    158a:	a4 e3       	ldi	r26, 0x34	; 52
    158c:	b5 e4       	ldi	r27, 0x45	; 69
    158e:	01 90       	ld	r0, Z+
    1590:	0d 92       	st	X+, r0
    1592:	8a 95       	dec	r24
    1594:	e1 f7       	brne	.-8      	; 0x158e <EchoToggle+0x20>
		UART_SendBuffer();
    1596:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
    159a:	08 95       	ret
		
	}
	else if (strcmp(ProcessedBuffer,"off")==0){
    159c:	68 e5       	ldi	r22, 0x58	; 88
    159e:	73 e4       	ldi	r23, 0x43	; 67
    15a0:	8d e0       	ldi	r24, 0x0D	; 13
    15a2:	95 e4       	ldi	r25, 0x45	; 69
    15a4:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    15a8:	89 2b       	or	r24, r25
    15aa:	71 f4       	brne	.+28     	; 0x15c8 <EchoToggle+0x5a>
		EchoON = 0;
    15ac:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <EchoON>
		strcpy(TxBuffer,"Echo off");
    15b0:	89 e0       	ldi	r24, 0x09	; 9
    15b2:	e3 e5       	ldi	r30, 0x53	; 83
    15b4:	f3 e4       	ldi	r31, 0x43	; 67
    15b6:	a4 e3       	ldi	r26, 0x34	; 52
    15b8:	b5 e4       	ldi	r27, 0x45	; 69
    15ba:	01 90       	ld	r0, Z+
    15bc:	0d 92       	st	X+, r0
    15be:	8a 95       	dec	r24
    15c0:	e1 f7       	brne	.-8      	; 0x15ba <EchoToggle+0x4c>
		UART_SendBuffer();
    15c2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
    15c6:	08 95       	ret
		
		} else {
		strcpy(TxBuffer,"echo with incorrect syntax ");
    15c8:	8c e1       	ldi	r24, 0x1C	; 28
    15ca:	ec e5       	ldi	r30, 0x5C	; 92
    15cc:	f3 e4       	ldi	r31, 0x43	; 67
    15ce:	a4 e3       	ldi	r26, 0x34	; 52
    15d0:	b5 e4       	ldi	r27, 0x45	; 69
    15d2:	01 90       	ld	r0, Z+
    15d4:	0d 92       	st	X+, r0
    15d6:	8a 95       	dec	r24
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <EchoToggle+0x64>
		UART_SendBuffer();
    15da:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		strcpy(TxBuffer,ProcessedBuffer);
    15de:	6d e0       	ldi	r22, 0x0D	; 13
    15e0:	75 e4       	ldi	r23, 0x45	; 69
    15e2:	84 e3       	ldi	r24, 0x34	; 52
    15e4:	95 e4       	ldi	r25, 0x45	; 69
    15e6:	0e 94 31 19 	call	0x3262	; 0x3262 <strcpy>
		UART_SendBuffer();
    15ea:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
		UART_NewLine();
    15ee:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
    15f2:	08 95       	ret

000015f4 <UART_MENU>:
const char commandArray[NoOfCommands][MaxCommandLength] = {"all","echo","read","fan","help","save","reseteeprom","trenddata", "temp"};
enum commands{commandAll=1,commandEcho,commandRead,commandFanControll,commandHelp,commandSave,commandResetEEPROM,commandTrendData,commandTemp};
int mainmenu  = 1;
void UART_MENU(void){
	// If echo is on, and the ASCII character is higher than 31, or Bell, Carriage Return, Line Feed or backspace, then echo the character. Other are filtered as to not get strange behavior from Putty.
	if (RecvCommand) {
    15f4:	80 91 d0 44 	lds	r24, 0x44D0	; 0x8044d0 <RecvCommand>
    15f8:	88 23       	and	r24, r24
    15fa:	09 f4       	brne	.+2      	; 0x15fe <UART_MENU+0xa>
    15fc:	c9 c1       	rjmp	.+914    	; 0x1990 <UART_MENU+0x39c>

		UART_NewLine();
    15fe:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>

		if (ProcessWord() != 0) {
    1602:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ProcessWord>
    1606:	88 23       	and	r24, r24
    1608:	09 f4       	brne	.+2      	; 0x160c <UART_MENU+0x18>
    160a:	c0 c1       	rjmp	.+896    	; 0x198c <UART_MENU+0x398>
			switch (SearchForCommand()){
    160c:	0e 94 86 04 	call	0x90c	; 0x90c <SearchForCommand>
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	fc 01       	movw	r30, r24
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	e9 30       	cpi	r30, 0x09	; 9
    1618:	f1 05       	cpc	r31, r1
    161a:	08 f0       	brcs	.+2      	; 0x161e <UART_MENU+0x2a>
    161c:	b3 c1       	rjmp	.+870    	; 0x1984 <UART_MENU+0x390>
    161e:	e6 58       	subi	r30, 0x86	; 134
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__tablejump2__>
				case commandAll:
				if (ProcessWord() == 0){
    1626:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ProcessWord>
    162a:	81 11       	cpse	r24, r1
    162c:	0c c0       	rjmp	.+24     	; 0x1646 <UART_MENU+0x52>
					strcpy(TxBuffer,"All command with no arguments");
    162e:	8e e1       	ldi	r24, 0x1E	; 30
    1630:	e8 e7       	ldi	r30, 0x78	; 120
    1632:	f3 e4       	ldi	r31, 0x43	; 67
    1634:	a4 e3       	ldi	r26, 0x34	; 52
    1636:	b5 e4       	ldi	r27, 0x45	; 69
    1638:	01 90       	ld	r0, Z+
    163a:	0d 92       	st	X+, r0
    163c:	8a 95       	dec	r24
    163e:	e1 f7       	brne	.-8      	; 0x1638 <UART_MENU+0x44>
					UART_SendBuffer();
    1640:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
    1644:	a3 c1       	rjmp	.+838    	; 0x198c <UART_MENU+0x398>
					}else{
					if (strcmp(ProcessedBuffer,"on")==0){
    1646:	60 e5       	ldi	r22, 0x50	; 80
    1648:	73 e4       	ldi	r23, 0x43	; 67
    164a:	8d e0       	ldi	r24, 0x0D	; 13
    164c:	95 e4       	ldi	r25, 0x45	; 69
    164e:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    1652:	89 2b       	or	r24, r25
    1654:	19 f4       	brne	.+6      	; 0x165c <UART_MENU+0x68>
						AllON();
    1656:	0e 94 0d 0a 	call	0x141a	; 0x141a <AllON>
						break;
    165a:	98 c1       	rjmp	.+816    	; 0x198c <UART_MENU+0x398>
					}
					if (strcmp(ProcessedBuffer,"off")==0){
    165c:	68 e5       	ldi	r22, 0x58	; 88
    165e:	73 e4       	ldi	r23, 0x43	; 67
    1660:	8d e0       	ldi	r24, 0x0D	; 13
    1662:	95 e4       	ldi	r25, 0x45	; 69
    1664:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    1668:	89 2b       	or	r24, r25
    166a:	19 f4       	brne	.+6      	; 0x1672 <UART_MENU+0x7e>
						AllOFF();
    166c:	0e 94 21 0a 	call	0x1442	; 0x1442 <AllOFF>
						break;
    1670:	8d c1       	rjmp	.+794    	; 0x198c <UART_MENU+0x398>
					}
					TxBuffer_StringWrite("All command with incorrect syntax");
    1672:	86 e9       	ldi	r24, 0x96	; 150
    1674:	93 e4       	ldi	r25, 0x43	; 67
    1676:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
					UART_NewLine();
    167a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
    167e:	86 c1       	rjmp	.+780    	; 0x198c <UART_MENU+0x398>
				}
				break;
				
				case commandEcho:
				if (ProcessWord() == 0){
    1680:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ProcessWord>
    1684:	81 11       	cpse	r24, r1
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <UART_MENU+0x9e>
					
					UART_EchoCheck();
    1688:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <UART_EchoCheck>
					UART_SendBuffer();
    168c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_SendBuffer>
    1690:	7d c1       	rjmp	.+762    	; 0x198c <UART_MENU+0x398>
					}else{
					EchoToggle();
    1692:	0e 94 b7 0a 	call	0x156e	; 0x156e <EchoToggle>
    1696:	7a c1       	rjmp	.+756    	; 0x198c <UART_MENU+0x398>
				}
				break;

				case commandRead:
				if (ProcessWord() == 0){
    1698:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ProcessWord>
    169c:	81 11       	cpse	r24, r1
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <UART_MENU+0xb6>
					TxBuffer_StringWrite("Read command with no arguments");
    16a0:	88 eb       	ldi	r24, 0xB8	; 184
    16a2:	93 e4       	ldi	r25, 0x43	; 67
    16a4:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
    16a8:	71 c1       	rjmp	.+738    	; 0x198c <UART_MENU+0x398>
					}else{
					if(strcmp(ProcessedBuffer, "0") == 0){
    16aa:	62 e4       	ldi	r22, 0x42	; 66
    16ac:	71 e4       	ldi	r23, 0x41	; 65
    16ae:	8d e0       	ldi	r24, 0x0D	; 13
    16b0:	95 e4       	ldi	r25, 0x45	; 69
    16b2:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    16b6:	89 2b       	or	r24, r25
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <UART_MENU+0xce>
						UART_ReadChannel(0);
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_ReadChannel>
						break;
    16c0:	65 c1       	rjmp	.+714    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "1") == 0){
    16c2:	67 ed       	ldi	r22, 0xD7	; 215
    16c4:	73 e4       	ldi	r23, 0x43	; 67
    16c6:	8d e0       	ldi	r24, 0x0D	; 13
    16c8:	95 e4       	ldi	r25, 0x45	; 69
    16ca:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    16ce:	89 2b       	or	r24, r25
    16d0:	21 f4       	brne	.+8      	; 0x16da <UART_MENU+0xe6>
						UART_ReadChannel(1);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_ReadChannel>
						break;
    16d8:	59 c1       	rjmp	.+690    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "2") == 0){
    16da:	69 ed       	ldi	r22, 0xD9	; 217
    16dc:	73 e4       	ldi	r23, 0x43	; 67
    16de:	8d e0       	ldi	r24, 0x0D	; 13
    16e0:	95 e4       	ldi	r25, 0x45	; 69
    16e2:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    16e6:	89 2b       	or	r24, r25
    16e8:	21 f4       	brne	.+8      	; 0x16f2 <UART_MENU+0xfe>
						UART_ReadChannel(2);
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_ReadChannel>
						break;
    16f0:	4d c1       	rjmp	.+666    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "3") == 0){
    16f2:	6b ed       	ldi	r22, 0xDB	; 219
    16f4:	73 e4       	ldi	r23, 0x43	; 67
    16f6:	8d e0       	ldi	r24, 0x0D	; 13
    16f8:	95 e4       	ldi	r25, 0x45	; 69
    16fa:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    16fe:	89 2b       	or	r24, r25
    1700:	21 f4       	brne	.+8      	; 0x170a <UART_MENU+0x116>
						UART_ReadChannel(3);
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_ReadChannel>
						break;
    1708:	41 c1       	rjmp	.+642    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "4") == 0){
    170a:	6d ed       	ldi	r22, 0xDD	; 221
    170c:	73 e4       	ldi	r23, 0x43	; 67
    170e:	8d e0       	ldi	r24, 0x0D	; 13
    1710:	95 e4       	ldi	r25, 0x45	; 69
    1712:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    1716:	89 2b       	or	r24, r25
    1718:	21 f4       	brne	.+8      	; 0x1722 <UART_MENU+0x12e>
						UART_ReadChannel(4);
    171a:	84 e0       	ldi	r24, 0x04	; 4
    171c:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_ReadChannel>
						break;
    1720:	35 c1       	rjmp	.+618    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "5") == 0){
    1722:	6f ed       	ldi	r22, 0xDF	; 223
    1724:	73 e4       	ldi	r23, 0x43	; 67
    1726:	8d e0       	ldi	r24, 0x0D	; 13
    1728:	95 e4       	ldi	r25, 0x45	; 69
    172a:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    172e:	89 2b       	or	r24, r25
    1730:	21 f4       	brne	.+8      	; 0x173a <UART_MENU+0x146>
						UART_ReadChannel(5);
    1732:	85 e0       	ldi	r24, 0x05	; 5
    1734:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_ReadChannel>
						break;
    1738:	29 c1       	rjmp	.+594    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "6") == 0){
    173a:	61 ee       	ldi	r22, 0xE1	; 225
    173c:	73 e4       	ldi	r23, 0x43	; 67
    173e:	8d e0       	ldi	r24, 0x0D	; 13
    1740:	95 e4       	ldi	r25, 0x45	; 69
    1742:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    1746:	89 2b       	or	r24, r25
    1748:	21 f4       	brne	.+8      	; 0x1752 <UART_MENU+0x15e>
						UART_ReadChannel(6);
    174a:	86 e0       	ldi	r24, 0x06	; 6
    174c:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_ReadChannel>
						break;
    1750:	1d c1       	rjmp	.+570    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "7") == 0){
    1752:	63 ee       	ldi	r22, 0xE3	; 227
    1754:	73 e4       	ldi	r23, 0x43	; 67
    1756:	8d e0       	ldi	r24, 0x0D	; 13
    1758:	95 e4       	ldi	r25, 0x45	; 69
    175a:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    175e:	89 2b       	or	r24, r25
    1760:	21 f4       	brne	.+8      	; 0x176a <UART_MENU+0x176>
						UART_ReadChannel(7);
    1762:	87 e0       	ldi	r24, 0x07	; 7
    1764:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_ReadChannel>
						break;
    1768:	11 c1       	rjmp	.+546    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "all") == 0){
    176a:	65 ee       	ldi	r22, 0xE5	; 229
    176c:	73 e4       	ldi	r23, 0x43	; 67
    176e:	8d e0       	ldi	r24, 0x0D	; 13
    1770:	95 e4       	ldi	r25, 0x45	; 69
    1772:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    1776:	89 2b       	or	r24, r25
    1778:	19 f4       	brne	.+6      	; 0x1780 <UART_MENU+0x18c>
						UART_ReadAll();
    177a:	0e 94 25 09 	call	0x124a	; 0x124a <UART_ReadAll>
						break;
    177e:	06 c1       	rjmp	.+524    	; 0x198c <UART_MENU+0x398>
					}
					else{
						TxBuffer_StringWrite("Read with incorrect syntax");
    1780:	89 ee       	ldi	r24, 0xE9	; 233
    1782:	93 e4       	ldi	r25, 0x43	; 67
    1784:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
						UART_NewLine();
    1788:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
    178c:	ff c0       	rjmp	.+510    	; 0x198c <UART_MENU+0x398>
					}
				}
				break;
				
				case commandFanControll:
				if (ProcessWord() == 0){
    178e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ProcessWord>
    1792:	81 11       	cpse	r24, r1
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <UART_MENU+0x1ac>
					TxBuffer_StringWrite("Fan command with no arguments");
    1796:	84 e0       	ldi	r24, 0x04	; 4
    1798:	94 e4       	ldi	r25, 0x44	; 68
    179a:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
    179e:	f6 c0       	rjmp	.+492    	; 0x198c <UART_MENU+0x398>
					}else{
					
					if(strcmp(ProcessedBuffer, "0") == 0){
    17a0:	62 e4       	ldi	r22, 0x42	; 66
    17a2:	71 e4       	ldi	r23, 0x41	; 65
    17a4:	8d e0       	ldi	r24, 0x0D	; 13
    17a6:	95 e4       	ldi	r25, 0x45	; 69
    17a8:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    17ac:	89 2b       	or	r24, r25
    17ae:	b9 f4       	brne	.+46     	; 0x17de <UART_MENU+0x1ea>
						speedch0 = UART_FanSpeedSet();
    17b0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UART_FanSpeedSet>
    17b4:	80 93 07 45 	sts	0x4507, r24	; 0x804507 <speedch0>
    17b8:	90 93 08 45 	sts	0x4508, r25	; 0x804508 <speedch0+0x1>
						AnalogWrite(0, speedch0);
    17bc:	68 2f       	mov	r22, r24
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch0);
    17c4:	60 91 07 45 	lds	r22, 0x4507	; 0x804507 <speedch0>
    17c8:	70 91 08 45 	lds	r23, 0x4508	; 0x804508 <speedch0+0x1>
    17cc:	84 e3       	ldi	r24, 0x34	; 52
    17ce:	95 e4       	ldi	r25, 0x45	; 69
    17d0:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
						SpeedArr[0] = speedch0;
    17d4:	80 91 07 45 	lds	r24, 0x4507	; 0x804507 <speedch0>
    17d8:	80 93 d1 44 	sts	0x44D1, r24	; 0x8044d1 <SpeedArr>
						break;
    17dc:	d7 c0       	rjmp	.+430    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "1") == 0){
    17de:	67 ed       	ldi	r22, 0xD7	; 215
    17e0:	73 e4       	ldi	r23, 0x43	; 67
    17e2:	8d e0       	ldi	r24, 0x0D	; 13
    17e4:	95 e4       	ldi	r25, 0x45	; 69
    17e6:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    17ea:	89 2b       	or	r24, r25
    17ec:	99 f4       	brne	.+38     	; 0x1814 <UART_MENU+0x220>
						speedch1 = UART_FanSpeedSet();
    17ee:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UART_FanSpeedSet>
    17f2:	80 93 05 45 	sts	0x4505, r24	; 0x804505 <speedch1>
    17f6:	90 93 06 45 	sts	0x4506, r25	; 0x804506 <speedch1+0x1>
						AnalogWrite(1, speedch1);
    17fa:	68 2f       	mov	r22, r24
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch1);
    1802:	60 91 05 45 	lds	r22, 0x4505	; 0x804505 <speedch1>
    1806:	70 91 06 45 	lds	r23, 0x4506	; 0x804506 <speedch1+0x1>
    180a:	84 e3       	ldi	r24, 0x34	; 52
    180c:	95 e4       	ldi	r25, 0x45	; 69
    180e:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
						break;
    1812:	bc c0       	rjmp	.+376    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "2") == 0){
    1814:	69 ed       	ldi	r22, 0xD9	; 217
    1816:	73 e4       	ldi	r23, 0x43	; 67
    1818:	8d e0       	ldi	r24, 0x0D	; 13
    181a:	95 e4       	ldi	r25, 0x45	; 69
    181c:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    1820:	89 2b       	or	r24, r25
    1822:	99 f4       	brne	.+38     	; 0x184a <UART_MENU+0x256>
						speedch2 = UART_FanSpeedSet();
    1824:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UART_FanSpeedSet>
    1828:	80 93 03 45 	sts	0x4503, r24	; 0x804503 <speedch2>
    182c:	90 93 04 45 	sts	0x4504, r25	; 0x804504 <speedch2+0x1>
						AnalogWrite(2, speedch2);
    1830:	68 2f       	mov	r22, r24
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch2);
    1838:	60 91 03 45 	lds	r22, 0x4503	; 0x804503 <speedch2>
    183c:	70 91 04 45 	lds	r23, 0x4504	; 0x804504 <speedch2+0x1>
    1840:	84 e3       	ldi	r24, 0x34	; 52
    1842:	95 e4       	ldi	r25, 0x45	; 69
    1844:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
						break;
    1848:	a1 c0       	rjmp	.+322    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "3") == 0){
    184a:	6b ed       	ldi	r22, 0xDB	; 219
    184c:	73 e4       	ldi	r23, 0x43	; 67
    184e:	8d e0       	ldi	r24, 0x0D	; 13
    1850:	95 e4       	ldi	r25, 0x45	; 69
    1852:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    1856:	89 2b       	or	r24, r25
    1858:	99 f4       	brne	.+38     	; 0x1880 <UART_MENU+0x28c>
						speedch3 = UART_FanSpeedSet();
    185a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UART_FanSpeedSet>
    185e:	80 93 01 45 	sts	0x4501, r24	; 0x804501 <speedch3>
    1862:	90 93 02 45 	sts	0x4502, r25	; 0x804502 <speedch3+0x1>
						AnalogWrite(3, speedch3);
    1866:	68 2f       	mov	r22, r24
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch3);
    186e:	60 91 01 45 	lds	r22, 0x4501	; 0x804501 <speedch3>
    1872:	70 91 02 45 	lds	r23, 0x4502	; 0x804502 <speedch3+0x1>
    1876:	84 e3       	ldi	r24, 0x34	; 52
    1878:	95 e4       	ldi	r25, 0x45	; 69
    187a:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
						break;
    187e:	86 c0       	rjmp	.+268    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "4") == 0){
    1880:	6d ed       	ldi	r22, 0xDD	; 221
    1882:	73 e4       	ldi	r23, 0x43	; 67
    1884:	8d e0       	ldi	r24, 0x0D	; 13
    1886:	95 e4       	ldi	r25, 0x45	; 69
    1888:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    188c:	89 2b       	or	r24, r25
    188e:	99 f4       	brne	.+38     	; 0x18b6 <UART_MENU+0x2c2>
						speedch4 = UART_FanSpeedSet();
    1890:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UART_FanSpeedSet>
    1894:	80 93 ff 44 	sts	0x44FF, r24	; 0x8044ff <speedch4>
    1898:	90 93 00 45 	sts	0x4500, r25	; 0x804500 <speedch4+0x1>
						AnalogWrite(4, speedch4);
    189c:	68 2f       	mov	r22, r24
    189e:	84 e0       	ldi	r24, 0x04	; 4
    18a0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch4);
    18a4:	60 91 ff 44 	lds	r22, 0x44FF	; 0x8044ff <speedch4>
    18a8:	70 91 00 45 	lds	r23, 0x4500	; 0x804500 <speedch4+0x1>
    18ac:	84 e3       	ldi	r24, 0x34	; 52
    18ae:	95 e4       	ldi	r25, 0x45	; 69
    18b0:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
						break;
    18b4:	6b c0       	rjmp	.+214    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "5") == 0){
    18b6:	6f ed       	ldi	r22, 0xDF	; 223
    18b8:	73 e4       	ldi	r23, 0x43	; 67
    18ba:	8d e0       	ldi	r24, 0x0D	; 13
    18bc:	95 e4       	ldi	r25, 0x45	; 69
    18be:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    18c2:	89 2b       	or	r24, r25
    18c4:	99 f4       	brne	.+38     	; 0x18ec <UART_MENU+0x2f8>
						speedch5 = UART_FanSpeedSet();
    18c6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UART_FanSpeedSet>
    18ca:	80 93 fd 44 	sts	0x44FD, r24	; 0x8044fd <speedch5>
    18ce:	90 93 fe 44 	sts	0x44FE, r25	; 0x8044fe <speedch5+0x1>
						AnalogWrite(5, speedch5);
    18d2:	68 2f       	mov	r22, r24
    18d4:	85 e0       	ldi	r24, 0x05	; 5
    18d6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch5);
    18da:	60 91 fd 44 	lds	r22, 0x44FD	; 0x8044fd <speedch5>
    18de:	70 91 fe 44 	lds	r23, 0x44FE	; 0x8044fe <speedch5+0x1>
    18e2:	84 e3       	ldi	r24, 0x34	; 52
    18e4:	95 e4       	ldi	r25, 0x45	; 69
    18e6:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
						break;
    18ea:	50 c0       	rjmp	.+160    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "6") == 0){
    18ec:	61 ee       	ldi	r22, 0xE1	; 225
    18ee:	73 e4       	ldi	r23, 0x43	; 67
    18f0:	8d e0       	ldi	r24, 0x0D	; 13
    18f2:	95 e4       	ldi	r25, 0x45	; 69
    18f4:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    18f8:	89 2b       	or	r24, r25
    18fa:	99 f4       	brne	.+38     	; 0x1922 <UART_MENU+0x32e>
						speedch6 = UART_FanSpeedSet();
    18fc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UART_FanSpeedSet>
    1900:	80 93 fb 44 	sts	0x44FB, r24	; 0x8044fb <speedch6>
    1904:	90 93 fc 44 	sts	0x44FC, r25	; 0x8044fc <speedch6+0x1>
						AnalogWrite(6, speedch6);
    1908:	68 2f       	mov	r22, r24
    190a:	86 e0       	ldi	r24, 0x06	; 6
    190c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch6);
    1910:	60 91 fb 44 	lds	r22, 0x44FB	; 0x8044fb <speedch6>
    1914:	70 91 fc 44 	lds	r23, 0x44FC	; 0x8044fc <speedch6+0x1>
    1918:	84 e3       	ldi	r24, 0x34	; 52
    191a:	95 e4       	ldi	r25, 0x45	; 69
    191c:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
						break;
    1920:	35 c0       	rjmp	.+106    	; 0x198c <UART_MENU+0x398>
					}
					else if(strcmp(ProcessedBuffer, "7") == 0){
    1922:	63 ee       	ldi	r22, 0xE3	; 227
    1924:	73 e4       	ldi	r23, 0x43	; 67
    1926:	8d e0       	ldi	r24, 0x0D	; 13
    1928:	95 e4       	ldi	r25, 0x45	; 69
    192a:	0e 94 28 19 	call	0x3250	; 0x3250 <strcmp>
    192e:	89 2b       	or	r24, r25
    1930:	99 f4       	brne	.+38     	; 0x1958 <UART_MENU+0x364>
						speedch7 = UART_FanSpeedSet();
    1932:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UART_FanSpeedSet>
    1936:	80 93 f9 44 	sts	0x44F9, r24	; 0x8044f9 <speedch7>
    193a:	90 93 fa 44 	sts	0x44FA, r25	; 0x8044fa <speedch7+0x1>
						AnalogWrite(7, speedch7);
    193e:	68 2f       	mov	r22, r24
    1940:	87 e0       	ldi	r24, 0x07	; 7
    1942:	0e 94 62 01 	call	0x2c4	; 0x2c4 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch7);
    1946:	60 91 f9 44 	lds	r22, 0x44F9	; 0x8044f9 <speedch7>
    194a:	70 91 fa 44 	lds	r23, 0x44FA	; 0x8044fa <speedch7+0x1>
    194e:	84 e3       	ldi	r24, 0x34	; 52
    1950:	95 e4       	ldi	r25, 0x45	; 69
    1952:	0e 94 35 0a 	call	0x146a	; 0x146a <TxBuffer_IntWrite>
						break;
    1956:	1a c0       	rjmp	.+52     	; 0x198c <UART_MENU+0x398>
						}else{
						
						TxBuffer_StringWrite("Fan with incorrect syntax");
    1958:	82 e2       	ldi	r24, 0x22	; 34
    195a:	94 e4       	ldi	r25, 0x44	; 68
    195c:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
						UART_NewLine();
    1960:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_NewLine>
    1964:	13 c0       	rjmp	.+38     	; 0x198c <UART_MENU+0x398>
					}
				}
				break;
				
				case commandHelp:
				UART_HelpMenu();
    1966:	0e 94 d5 09 	call	0x13aa	; 0x13aa <UART_HelpMenu>
				break;
    196a:	10 c0       	rjmp	.+32     	; 0x198c <UART_MENU+0x398>
				
				case commandSave:
				EEPROM_SaveFanStatus();
    196c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <EEPROM_SaveFanStatus>
				break;
    1970:	0d c0       	rjmp	.+26     	; 0x198c <UART_MENU+0x398>
				
				case commandResetEEPROM:
				ResetEEPROM();
    1972:	0e 94 a8 09 	call	0x1350	; 0x1350 <ResetEEPROM>
				break;
    1976:	0a c0       	rjmp	.+20     	; 0x198c <UART_MENU+0x398>
				
				case commandTrendData:
				UART_WriteTrendData();
    1978:	0e 94 85 0a 	call	0x150a	; 0x150a <UART_WriteTrendData>
				break;
    197c:	07 c0       	rjmp	.+14     	; 0x198c <UART_MENU+0x398>
				case commandTemp:
				TWI_getTemp();
    197e:	0e 94 89 03 	call	0x712	; 0x712 <TWI_getTemp>
				break;
    1982:	04 c0       	rjmp	.+8      	; 0x198c <UART_MENU+0x398>
				default:
				TxBuffer_StringWrite("Unknown command!");
    1984:	8c e3       	ldi	r24, 0x3C	; 60
    1986:	94 e4       	ldi	r25, 0x44	; 68
    1988:	0e 94 6d 09 	call	0x12da	; 0x12da <TxBuffer_StringWrite>
			}
		}
		
		ResetSHell();
    198c:	0e 94 93 05 	call	0xb26	; 0xb26 <ResetSHell>
    1990:	08 95       	ret

00001992 <main>:
    1992:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <System_init>
    1996:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <UART_MENU>
    199a:	fd cf       	rjmp	.-6      	; 0x1996 <main+0x4>

0000199c <__vector_5>:
    199c:	1f 92       	push	r1
    199e:	0f 92       	push	r0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	0f 92       	push	r0
    19a4:	11 24       	eor	r1, r1
    19a6:	0b b6       	in	r0, 0x3b	; 59
    19a8:	0f 92       	push	r0
    19aa:	2f 93       	push	r18
    19ac:	3f 93       	push	r19
    19ae:	4f 93       	push	r20
    19b0:	5f 93       	push	r21
    19b2:	6f 93       	push	r22
    19b4:	7f 93       	push	r23
    19b6:	8f 93       	push	r24
    19b8:	9f 93       	push	r25
    19ba:	af 93       	push	r26
    19bc:	bf 93       	push	r27
    19be:	ef 93       	push	r30
    19c0:	ff 93       	push	r31
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    19c8:	0e 94 b1 03 	call	0x762	; 0x762 <ISR_TWI>
    19cc:	ff 91       	pop	r31
    19ce:	ef 91       	pop	r30
    19d0:	bf 91       	pop	r27
    19d2:	af 91       	pop	r26
    19d4:	9f 91       	pop	r25
    19d6:	8f 91       	pop	r24
    19d8:	7f 91       	pop	r23
    19da:	6f 91       	pop	r22
    19dc:	5f 91       	pop	r21
    19de:	4f 91       	pop	r20
    19e0:	3f 91       	pop	r19
    19e2:	2f 91       	pop	r18
    19e4:	0f 90       	pop	r0
    19e6:	0b be       	out	0x3b, r0	; 59
    19e8:	0f 90       	pop	r0
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	0f 90       	pop	r0
    19ee:	1f 90       	pop	r1
    19f0:	18 95       	reti

000019f2 <__vector_53>:
    19f2:	1f 92       	push	r1
    19f4:	0f 92       	push	r0
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	0f 92       	push	r0
    19fa:	11 24       	eor	r1, r1
    19fc:	0b b6       	in	r0, 0x3b	; 59
    19fe:	0f 92       	push	r0
    1a00:	2f 93       	push	r18
    1a02:	3f 93       	push	r19
    1a04:	4f 93       	push	r20
    1a06:	5f 93       	push	r21
    1a08:	6f 93       	push	r22
    1a0a:	7f 93       	push	r23
    1a0c:	8f 93       	push	r24
    1a0e:	9f 93       	push	r25
    1a10:	af 93       	push	r26
    1a12:	bf 93       	push	r27
    1a14:	ef 93       	push	r30
    1a16:	ff 93       	push	r31
    1a18:	0e 94 45 09 	call	0x128a	; 0x128a <UART_ISR>
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0b be       	out	0x3b, r0	; 59
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <__subsf3>:
    1a42:	50 58       	subi	r21, 0x80	; 128

00001a44 <__addsf3>:
    1a44:	bb 27       	eor	r27, r27
    1a46:	aa 27       	eor	r26, r26
    1a48:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__addsf3x>
    1a4c:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__fp_round>
    1a50:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fp_pscA>
    1a54:	38 f0       	brcs	.+14     	; 0x1a64 <__addsf3+0x20>
    1a56:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fp_pscB>
    1a5a:	20 f0       	brcs	.+8      	; 0x1a64 <__addsf3+0x20>
    1a5c:	39 f4       	brne	.+14     	; 0x1a6c <__addsf3+0x28>
    1a5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a60:	19 f4       	brne	.+6      	; 0x1a68 <__addsf3+0x24>
    1a62:	26 f4       	brtc	.+8      	; 0x1a6c <__addsf3+0x28>
    1a64:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_nan>
    1a68:	0e f4       	brtc	.+2      	; 0x1a6c <__addsf3+0x28>
    1a6a:	e0 95       	com	r30
    1a6c:	e7 fb       	bst	r30, 7
    1a6e:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__fp_inf>

00001a72 <__addsf3x>:
    1a72:	e9 2f       	mov	r30, r25
    1a74:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__fp_split3>
    1a78:	58 f3       	brcs	.-42     	; 0x1a50 <__addsf3+0xc>
    1a7a:	ba 17       	cp	r27, r26
    1a7c:	62 07       	cpc	r22, r18
    1a7e:	73 07       	cpc	r23, r19
    1a80:	84 07       	cpc	r24, r20
    1a82:	95 07       	cpc	r25, r21
    1a84:	20 f0       	brcs	.+8      	; 0x1a8e <__addsf3x+0x1c>
    1a86:	79 f4       	brne	.+30     	; 0x1aa6 <__addsf3x+0x34>
    1a88:	a6 f5       	brtc	.+104    	; 0x1af2 <__addsf3x+0x80>
    1a8a:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__fp_zero>
    1a8e:	0e f4       	brtc	.+2      	; 0x1a92 <__addsf3x+0x20>
    1a90:	e0 95       	com	r30
    1a92:	0b 2e       	mov	r0, r27
    1a94:	ba 2f       	mov	r27, r26
    1a96:	a0 2d       	mov	r26, r0
    1a98:	0b 01       	movw	r0, r22
    1a9a:	b9 01       	movw	r22, r18
    1a9c:	90 01       	movw	r18, r0
    1a9e:	0c 01       	movw	r0, r24
    1aa0:	ca 01       	movw	r24, r20
    1aa2:	a0 01       	movw	r20, r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	ff 27       	eor	r31, r31
    1aa8:	59 1b       	sub	r21, r25
    1aaa:	99 f0       	breq	.+38     	; 0x1ad2 <__addsf3x+0x60>
    1aac:	59 3f       	cpi	r21, 0xF9	; 249
    1aae:	50 f4       	brcc	.+20     	; 0x1ac4 <__addsf3x+0x52>
    1ab0:	50 3e       	cpi	r21, 0xE0	; 224
    1ab2:	68 f1       	brcs	.+90     	; 0x1b0e <__addsf3x+0x9c>
    1ab4:	1a 16       	cp	r1, r26
    1ab6:	f0 40       	sbci	r31, 0x00	; 0
    1ab8:	a2 2f       	mov	r26, r18
    1aba:	23 2f       	mov	r18, r19
    1abc:	34 2f       	mov	r19, r20
    1abe:	44 27       	eor	r20, r20
    1ac0:	58 5f       	subi	r21, 0xF8	; 248
    1ac2:	f3 cf       	rjmp	.-26     	; 0x1aaa <__addsf3x+0x38>
    1ac4:	46 95       	lsr	r20
    1ac6:	37 95       	ror	r19
    1ac8:	27 95       	ror	r18
    1aca:	a7 95       	ror	r26
    1acc:	f0 40       	sbci	r31, 0x00	; 0
    1ace:	53 95       	inc	r21
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__addsf3x+0x52>
    1ad2:	7e f4       	brtc	.+30     	; 0x1af2 <__addsf3x+0x80>
    1ad4:	1f 16       	cp	r1, r31
    1ad6:	ba 0b       	sbc	r27, r26
    1ad8:	62 0b       	sbc	r22, r18
    1ada:	73 0b       	sbc	r23, r19
    1adc:	84 0b       	sbc	r24, r20
    1ade:	ba f0       	brmi	.+46     	; 0x1b0e <__addsf3x+0x9c>
    1ae0:	91 50       	subi	r25, 0x01	; 1
    1ae2:	a1 f0       	breq	.+40     	; 0x1b0c <__addsf3x+0x9a>
    1ae4:	ff 0f       	add	r31, r31
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	66 1f       	adc	r22, r22
    1aea:	77 1f       	adc	r23, r23
    1aec:	88 1f       	adc	r24, r24
    1aee:	c2 f7       	brpl	.-16     	; 0x1ae0 <__addsf3x+0x6e>
    1af0:	0e c0       	rjmp	.+28     	; 0x1b0e <__addsf3x+0x9c>
    1af2:	ba 0f       	add	r27, r26
    1af4:	62 1f       	adc	r22, r18
    1af6:	73 1f       	adc	r23, r19
    1af8:	84 1f       	adc	r24, r20
    1afa:	48 f4       	brcc	.+18     	; 0x1b0e <__addsf3x+0x9c>
    1afc:	87 95       	ror	r24
    1afe:	77 95       	ror	r23
    1b00:	67 95       	ror	r22
    1b02:	b7 95       	ror	r27
    1b04:	f7 95       	ror	r31
    1b06:	9e 3f       	cpi	r25, 0xFE	; 254
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <__addsf3x+0x9a>
    1b0a:	b0 cf       	rjmp	.-160    	; 0x1a6c <__addsf3+0x28>
    1b0c:	93 95       	inc	r25
    1b0e:	88 0f       	add	r24, r24
    1b10:	08 f0       	brcs	.+2      	; 0x1b14 <__addsf3x+0xa2>
    1b12:	99 27       	eor	r25, r25
    1b14:	ee 0f       	add	r30, r30
    1b16:	97 95       	ror	r25
    1b18:	87 95       	ror	r24
    1b1a:	08 95       	ret

00001b1c <__fixunssfsi>:
    1b1c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_splitA>
    1b20:	88 f0       	brcs	.+34     	; 0x1b44 <__fixunssfsi+0x28>
    1b22:	9f 57       	subi	r25, 0x7F	; 127
    1b24:	98 f0       	brcs	.+38     	; 0x1b4c <__fixunssfsi+0x30>
    1b26:	b9 2f       	mov	r27, r25
    1b28:	99 27       	eor	r25, r25
    1b2a:	b7 51       	subi	r27, 0x17	; 23
    1b2c:	b0 f0       	brcs	.+44     	; 0x1b5a <__fixunssfsi+0x3e>
    1b2e:	e1 f0       	breq	.+56     	; 0x1b68 <__fixunssfsi+0x4c>
    1b30:	66 0f       	add	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	1a f0       	brmi	.+6      	; 0x1b40 <__fixunssfsi+0x24>
    1b3a:	ba 95       	dec	r27
    1b3c:	c9 f7       	brne	.-14     	; 0x1b30 <__fixunssfsi+0x14>
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <__fixunssfsi+0x4c>
    1b40:	b1 30       	cpi	r27, 0x01	; 1
    1b42:	91 f0       	breq	.+36     	; 0x1b68 <__fixunssfsi+0x4c>
    1b44:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__fp_zero>
    1b48:	b1 e0       	ldi	r27, 0x01	; 1
    1b4a:	08 95       	ret
    1b4c:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__fp_zero>
    1b50:	67 2f       	mov	r22, r23
    1b52:	78 2f       	mov	r23, r24
    1b54:	88 27       	eor	r24, r24
    1b56:	b8 5f       	subi	r27, 0xF8	; 248
    1b58:	39 f0       	breq	.+14     	; 0x1b68 <__fixunssfsi+0x4c>
    1b5a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b5c:	cc f3       	brlt	.-14     	; 0x1b50 <__fixunssfsi+0x34>
    1b5e:	86 95       	lsr	r24
    1b60:	77 95       	ror	r23
    1b62:	67 95       	ror	r22
    1b64:	b3 95       	inc	r27
    1b66:	d9 f7       	brne	.-10     	; 0x1b5e <__fixunssfsi+0x42>
    1b68:	3e f4       	brtc	.+14     	; 0x1b78 <__fixunssfsi+0x5c>
    1b6a:	90 95       	com	r25
    1b6c:	80 95       	com	r24
    1b6e:	70 95       	com	r23
    1b70:	61 95       	neg	r22
    1b72:	7f 4f       	sbci	r23, 0xFF	; 255
    1b74:	8f 4f       	sbci	r24, 0xFF	; 255
    1b76:	9f 4f       	sbci	r25, 0xFF	; 255
    1b78:	08 95       	ret

00001b7a <__floatunsisf>:
    1b7a:	e8 94       	clt
    1b7c:	09 c0       	rjmp	.+18     	; 0x1b90 <__floatsisf+0x12>

00001b7e <__floatsisf>:
    1b7e:	97 fb       	bst	r25, 7
    1b80:	3e f4       	brtc	.+14     	; 0x1b90 <__floatsisf+0x12>
    1b82:	90 95       	com	r25
    1b84:	80 95       	com	r24
    1b86:	70 95       	com	r23
    1b88:	61 95       	neg	r22
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	99 23       	and	r25, r25
    1b92:	a9 f0       	breq	.+42     	; 0x1bbe <__floatsisf+0x40>
    1b94:	f9 2f       	mov	r31, r25
    1b96:	96 e9       	ldi	r25, 0x96	; 150
    1b98:	bb 27       	eor	r27, r27
    1b9a:	93 95       	inc	r25
    1b9c:	f6 95       	lsr	r31
    1b9e:	87 95       	ror	r24
    1ba0:	77 95       	ror	r23
    1ba2:	67 95       	ror	r22
    1ba4:	b7 95       	ror	r27
    1ba6:	f1 11       	cpse	r31, r1
    1ba8:	f8 cf       	rjmp	.-16     	; 0x1b9a <__floatsisf+0x1c>
    1baa:	fa f4       	brpl	.+62     	; 0x1bea <__floatsisf+0x6c>
    1bac:	bb 0f       	add	r27, r27
    1bae:	11 f4       	brne	.+4      	; 0x1bb4 <__floatsisf+0x36>
    1bb0:	60 ff       	sbrs	r22, 0
    1bb2:	1b c0       	rjmp	.+54     	; 0x1bea <__floatsisf+0x6c>
    1bb4:	6f 5f       	subi	r22, 0xFF	; 255
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	16 c0       	rjmp	.+44     	; 0x1bea <__floatsisf+0x6c>
    1bbe:	88 23       	and	r24, r24
    1bc0:	11 f0       	breq	.+4      	; 0x1bc6 <__floatsisf+0x48>
    1bc2:	96 e9       	ldi	r25, 0x96	; 150
    1bc4:	11 c0       	rjmp	.+34     	; 0x1be8 <__floatsisf+0x6a>
    1bc6:	77 23       	and	r23, r23
    1bc8:	21 f0       	breq	.+8      	; 0x1bd2 <__floatsisf+0x54>
    1bca:	9e e8       	ldi	r25, 0x8E	; 142
    1bcc:	87 2f       	mov	r24, r23
    1bce:	76 2f       	mov	r23, r22
    1bd0:	05 c0       	rjmp	.+10     	; 0x1bdc <__floatsisf+0x5e>
    1bd2:	66 23       	and	r22, r22
    1bd4:	71 f0       	breq	.+28     	; 0x1bf2 <__floatsisf+0x74>
    1bd6:	96 e8       	ldi	r25, 0x86	; 134
    1bd8:	86 2f       	mov	r24, r22
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	2a f0       	brmi	.+10     	; 0x1bea <__floatsisf+0x6c>
    1be0:	9a 95       	dec	r25
    1be2:	66 0f       	add	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	88 1f       	adc	r24, r24
    1be8:	da f7       	brpl	.-10     	; 0x1be0 <__floatsisf+0x62>
    1bea:	88 0f       	add	r24, r24
    1bec:	96 95       	lsr	r25
    1bee:	87 95       	ror	r24
    1bf0:	97 f9       	bld	r25, 7
    1bf2:	08 95       	ret

00001bf4 <__fp_inf>:
    1bf4:	97 f9       	bld	r25, 7
    1bf6:	9f 67       	ori	r25, 0x7F	; 127
    1bf8:	80 e8       	ldi	r24, 0x80	; 128
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	08 95       	ret

00001c00 <__fp_nan>:
    1c00:	9f ef       	ldi	r25, 0xFF	; 255
    1c02:	80 ec       	ldi	r24, 0xC0	; 192
    1c04:	08 95       	ret

00001c06 <__fp_pscA>:
    1c06:	00 24       	eor	r0, r0
    1c08:	0a 94       	dec	r0
    1c0a:	16 16       	cp	r1, r22
    1c0c:	17 06       	cpc	r1, r23
    1c0e:	18 06       	cpc	r1, r24
    1c10:	09 06       	cpc	r0, r25
    1c12:	08 95       	ret

00001c14 <__fp_pscB>:
    1c14:	00 24       	eor	r0, r0
    1c16:	0a 94       	dec	r0
    1c18:	12 16       	cp	r1, r18
    1c1a:	13 06       	cpc	r1, r19
    1c1c:	14 06       	cpc	r1, r20
    1c1e:	05 06       	cpc	r0, r21
    1c20:	08 95       	ret

00001c22 <__fp_round>:
    1c22:	09 2e       	mov	r0, r25
    1c24:	03 94       	inc	r0
    1c26:	00 0c       	add	r0, r0
    1c28:	11 f4       	brne	.+4      	; 0x1c2e <__fp_round+0xc>
    1c2a:	88 23       	and	r24, r24
    1c2c:	52 f0       	brmi	.+20     	; 0x1c42 <__fp_round+0x20>
    1c2e:	bb 0f       	add	r27, r27
    1c30:	40 f4       	brcc	.+16     	; 0x1c42 <__fp_round+0x20>
    1c32:	bf 2b       	or	r27, r31
    1c34:	11 f4       	brne	.+4      	; 0x1c3a <__fp_round+0x18>
    1c36:	60 ff       	sbrs	r22, 0
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <__fp_round+0x20>
    1c3a:	6f 5f       	subi	r22, 0xFF	; 255
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c40:	9f 4f       	sbci	r25, 0xFF	; 255
    1c42:	08 95       	ret

00001c44 <__fp_split3>:
    1c44:	57 fd       	sbrc	r21, 7
    1c46:	90 58       	subi	r25, 0x80	; 128
    1c48:	44 0f       	add	r20, r20
    1c4a:	55 1f       	adc	r21, r21
    1c4c:	59 f0       	breq	.+22     	; 0x1c64 <__fp_splitA+0x10>
    1c4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c50:	71 f0       	breq	.+28     	; 0x1c6e <__fp_splitA+0x1a>
    1c52:	47 95       	ror	r20

00001c54 <__fp_splitA>:
    1c54:	88 0f       	add	r24, r24
    1c56:	97 fb       	bst	r25, 7
    1c58:	99 1f       	adc	r25, r25
    1c5a:	61 f0       	breq	.+24     	; 0x1c74 <__fp_splitA+0x20>
    1c5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c5e:	79 f0       	breq	.+30     	; 0x1c7e <__fp_splitA+0x2a>
    1c60:	87 95       	ror	r24
    1c62:	08 95       	ret
    1c64:	12 16       	cp	r1, r18
    1c66:	13 06       	cpc	r1, r19
    1c68:	14 06       	cpc	r1, r20
    1c6a:	55 1f       	adc	r21, r21
    1c6c:	f2 cf       	rjmp	.-28     	; 0x1c52 <__fp_split3+0xe>
    1c6e:	46 95       	lsr	r20
    1c70:	f1 df       	rcall	.-30     	; 0x1c54 <__fp_splitA>
    1c72:	08 c0       	rjmp	.+16     	; 0x1c84 <__fp_splitA+0x30>
    1c74:	16 16       	cp	r1, r22
    1c76:	17 06       	cpc	r1, r23
    1c78:	18 06       	cpc	r1, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	f1 cf       	rjmp	.-30     	; 0x1c60 <__fp_splitA+0xc>
    1c7e:	86 95       	lsr	r24
    1c80:	71 05       	cpc	r23, r1
    1c82:	61 05       	cpc	r22, r1
    1c84:	08 94       	sec
    1c86:	08 95       	ret

00001c88 <__fp_zero>:
    1c88:	e8 94       	clt

00001c8a <__fp_szero>:
    1c8a:	bb 27       	eor	r27, r27
    1c8c:	66 27       	eor	r22, r22
    1c8e:	77 27       	eor	r23, r23
    1c90:	cb 01       	movw	r24, r22
    1c92:	97 f9       	bld	r25, 7
    1c94:	08 95       	ret

00001c96 <__gesf2>:
    1c96:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fp_cmp>
    1c9a:	08 f4       	brcc	.+2      	; 0x1c9e <__gesf2+0x8>
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	08 95       	ret

00001ca0 <__mulsf3>:
    1ca0:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__mulsf3x>
    1ca4:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__fp_round>
    1ca8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fp_pscA>
    1cac:	38 f0       	brcs	.+14     	; 0x1cbc <__mulsf3+0x1c>
    1cae:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fp_pscB>
    1cb2:	20 f0       	brcs	.+8      	; 0x1cbc <__mulsf3+0x1c>
    1cb4:	95 23       	and	r25, r21
    1cb6:	11 f0       	breq	.+4      	; 0x1cbc <__mulsf3+0x1c>
    1cb8:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__fp_inf>
    1cbc:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_nan>
    1cc0:	11 24       	eor	r1, r1
    1cc2:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__fp_szero>

00001cc6 <__mulsf3x>:
    1cc6:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__fp_split3>
    1cca:	70 f3       	brcs	.-36     	; 0x1ca8 <__mulsf3+0x8>

00001ccc <__mulsf3_pse>:
    1ccc:	95 9f       	mul	r25, r21
    1cce:	c1 f3       	breq	.-16     	; 0x1cc0 <__mulsf3+0x20>
    1cd0:	95 0f       	add	r25, r21
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	55 1f       	adc	r21, r21
    1cd6:	62 9f       	mul	r22, r18
    1cd8:	f0 01       	movw	r30, r0
    1cda:	72 9f       	mul	r23, r18
    1cdc:	bb 27       	eor	r27, r27
    1cde:	f0 0d       	add	r31, r0
    1ce0:	b1 1d       	adc	r27, r1
    1ce2:	63 9f       	mul	r22, r19
    1ce4:	aa 27       	eor	r26, r26
    1ce6:	f0 0d       	add	r31, r0
    1ce8:	b1 1d       	adc	r27, r1
    1cea:	aa 1f       	adc	r26, r26
    1cec:	64 9f       	mul	r22, r20
    1cee:	66 27       	eor	r22, r22
    1cf0:	b0 0d       	add	r27, r0
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	66 1f       	adc	r22, r22
    1cf6:	82 9f       	mul	r24, r18
    1cf8:	22 27       	eor	r18, r18
    1cfa:	b0 0d       	add	r27, r0
    1cfc:	a1 1d       	adc	r26, r1
    1cfe:	62 1f       	adc	r22, r18
    1d00:	73 9f       	mul	r23, r19
    1d02:	b0 0d       	add	r27, r0
    1d04:	a1 1d       	adc	r26, r1
    1d06:	62 1f       	adc	r22, r18
    1d08:	83 9f       	mul	r24, r19
    1d0a:	a0 0d       	add	r26, r0
    1d0c:	61 1d       	adc	r22, r1
    1d0e:	22 1f       	adc	r18, r18
    1d10:	74 9f       	mul	r23, r20
    1d12:	33 27       	eor	r19, r19
    1d14:	a0 0d       	add	r26, r0
    1d16:	61 1d       	adc	r22, r1
    1d18:	23 1f       	adc	r18, r19
    1d1a:	84 9f       	mul	r24, r20
    1d1c:	60 0d       	add	r22, r0
    1d1e:	21 1d       	adc	r18, r1
    1d20:	82 2f       	mov	r24, r18
    1d22:	76 2f       	mov	r23, r22
    1d24:	6a 2f       	mov	r22, r26
    1d26:	11 24       	eor	r1, r1
    1d28:	9f 57       	subi	r25, 0x7F	; 127
    1d2a:	50 40       	sbci	r21, 0x00	; 0
    1d2c:	9a f0       	brmi	.+38     	; 0x1d54 <__mulsf3_pse+0x88>
    1d2e:	f1 f0       	breq	.+60     	; 0x1d6c <__mulsf3_pse+0xa0>
    1d30:	88 23       	and	r24, r24
    1d32:	4a f0       	brmi	.+18     	; 0x1d46 <__mulsf3_pse+0x7a>
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	bb 1f       	adc	r27, r27
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	88 1f       	adc	r24, r24
    1d40:	91 50       	subi	r25, 0x01	; 1
    1d42:	50 40       	sbci	r21, 0x00	; 0
    1d44:	a9 f7       	brne	.-22     	; 0x1d30 <__mulsf3_pse+0x64>
    1d46:	9e 3f       	cpi	r25, 0xFE	; 254
    1d48:	51 05       	cpc	r21, r1
    1d4a:	80 f0       	brcs	.+32     	; 0x1d6c <__mulsf3_pse+0xa0>
    1d4c:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__fp_inf>
    1d50:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__fp_szero>
    1d54:	5f 3f       	cpi	r21, 0xFF	; 255
    1d56:	e4 f3       	brlt	.-8      	; 0x1d50 <__mulsf3_pse+0x84>
    1d58:	98 3e       	cpi	r25, 0xE8	; 232
    1d5a:	d4 f3       	brlt	.-12     	; 0x1d50 <__mulsf3_pse+0x84>
    1d5c:	86 95       	lsr	r24
    1d5e:	77 95       	ror	r23
    1d60:	67 95       	ror	r22
    1d62:	b7 95       	ror	r27
    1d64:	f7 95       	ror	r31
    1d66:	e7 95       	ror	r30
    1d68:	9f 5f       	subi	r25, 0xFF	; 255
    1d6a:	c1 f7       	brne	.-16     	; 0x1d5c <__mulsf3_pse+0x90>
    1d6c:	fe 2b       	or	r31, r30
    1d6e:	88 0f       	add	r24, r24
    1d70:	91 1d       	adc	r25, r1
    1d72:	96 95       	lsr	r25
    1d74:	87 95       	ror	r24
    1d76:	97 f9       	bld	r25, 7
    1d78:	08 95       	ret

00001d7a <__fp_cmp>:
    1d7a:	99 0f       	add	r25, r25
    1d7c:	00 08       	sbc	r0, r0
    1d7e:	55 0f       	add	r21, r21
    1d80:	aa 0b       	sbc	r26, r26
    1d82:	e0 e8       	ldi	r30, 0x80	; 128
    1d84:	fe ef       	ldi	r31, 0xFE	; 254
    1d86:	16 16       	cp	r1, r22
    1d88:	17 06       	cpc	r1, r23
    1d8a:	e8 07       	cpc	r30, r24
    1d8c:	f9 07       	cpc	r31, r25
    1d8e:	c0 f0       	brcs	.+48     	; 0x1dc0 <__fp_cmp+0x46>
    1d90:	12 16       	cp	r1, r18
    1d92:	13 06       	cpc	r1, r19
    1d94:	e4 07       	cpc	r30, r20
    1d96:	f5 07       	cpc	r31, r21
    1d98:	98 f0       	brcs	.+38     	; 0x1dc0 <__fp_cmp+0x46>
    1d9a:	62 1b       	sub	r22, r18
    1d9c:	73 0b       	sbc	r23, r19
    1d9e:	84 0b       	sbc	r24, r20
    1da0:	95 0b       	sbc	r25, r21
    1da2:	39 f4       	brne	.+14     	; 0x1db2 <__fp_cmp+0x38>
    1da4:	0a 26       	eor	r0, r26
    1da6:	61 f0       	breq	.+24     	; 0x1dc0 <__fp_cmp+0x46>
    1da8:	23 2b       	or	r18, r19
    1daa:	24 2b       	or	r18, r20
    1dac:	25 2b       	or	r18, r21
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <__fp_cmp+0x3e>
    1db0:	08 95       	ret
    1db2:	0a 26       	eor	r0, r26
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <__fp_cmp+0x3e>
    1db6:	a1 40       	sbci	r26, 0x01	; 1
    1db8:	a6 95       	lsr	r26
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	81 1d       	adc	r24, r1
    1dbe:	81 1d       	adc	r24, r1
    1dc0:	08 95       	ret

00001dc2 <putval>:
    1dc2:	20 fd       	sbrc	r18, 0
    1dc4:	09 c0       	rjmp	.+18     	; 0x1dd8 <putval+0x16>
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	23 fd       	sbrc	r18, 3
    1dca:	05 c0       	rjmp	.+10     	; 0x1dd6 <putval+0x14>
    1dcc:	22 ff       	sbrs	r18, 2
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <putval+0x12>
    1dd0:	73 83       	std	Z+3, r23	; 0x03
    1dd2:	62 83       	std	Z+2, r22	; 0x02
    1dd4:	51 83       	std	Z+1, r21	; 0x01
    1dd6:	40 83       	st	Z, r20
    1dd8:	08 95       	ret

00001dda <mulacc>:
    1dda:	44 fd       	sbrc	r20, 4
    1ddc:	17 c0       	rjmp	.+46     	; 0x1e0c <mulacc+0x32>
    1dde:	46 fd       	sbrc	r20, 6
    1de0:	17 c0       	rjmp	.+46     	; 0x1e10 <mulacc+0x36>
    1de2:	ab 01       	movw	r20, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	da 01       	movw	r26, r20
    1de8:	fb 01       	movw	r30, r22
    1dea:	aa 0f       	add	r26, r26
    1dec:	bb 1f       	adc	r27, r27
    1dee:	ee 1f       	adc	r30, r30
    1df0:	ff 1f       	adc	r31, r31
    1df2:	10 94       	com	r1
    1df4:	d1 f7       	brne	.-12     	; 0x1dea <mulacc+0x10>
    1df6:	4a 0f       	add	r20, r26
    1df8:	5b 1f       	adc	r21, r27
    1dfa:	6e 1f       	adc	r22, r30
    1dfc:	7f 1f       	adc	r23, r31
    1dfe:	cb 01       	movw	r24, r22
    1e00:	ba 01       	movw	r22, r20
    1e02:	66 0f       	add	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <mulacc+0x44>
    1e0c:	33 e0       	ldi	r19, 0x03	; 3
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <mulacc+0x38>
    1e10:	34 e0       	ldi	r19, 0x04	; 4
    1e12:	66 0f       	add	r22, r22
    1e14:	77 1f       	adc	r23, r23
    1e16:	88 1f       	adc	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	31 50       	subi	r19, 0x01	; 1
    1e1c:	d1 f7       	brne	.-12     	; 0x1e12 <mulacc+0x38>
    1e1e:	62 0f       	add	r22, r18
    1e20:	71 1d       	adc	r23, r1
    1e22:	81 1d       	adc	r24, r1
    1e24:	91 1d       	adc	r25, r1
    1e26:	08 95       	ret

00001e28 <skip_spaces>:
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	8c 01       	movw	r16, r24
    1e32:	c8 01       	movw	r24, r16
    1e34:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    1e38:	ec 01       	movw	r28, r24
    1e3a:	97 fd       	sbrc	r25, 7
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <skip_spaces+0x26>
    1e3e:	0e 94 01 19 	call	0x3202	; 0x3202 <isspace>
    1e42:	89 2b       	or	r24, r25
    1e44:	b1 f7       	brne	.-20     	; 0x1e32 <skip_spaces+0xa>
    1e46:	b8 01       	movw	r22, r16
    1e48:	ce 01       	movw	r24, r28
    1e4a:	0e 94 e6 19 	call	0x33cc	; 0x33cc <ungetc>
    1e4e:	ce 01       	movw	r24, r28
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	08 95       	ret

00001e5a <conv_int>:
    1e5a:	8f 92       	push	r8
    1e5c:	9f 92       	push	r9
    1e5e:	af 92       	push	r10
    1e60:	bf 92       	push	r11
    1e62:	cf 92       	push	r12
    1e64:	df 92       	push	r13
    1e66:	ef 92       	push	r14
    1e68:	ff 92       	push	r15
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	7c 01       	movw	r14, r24
    1e74:	8b 01       	movw	r16, r22
    1e76:	6a 01       	movw	r12, r20
    1e78:	d2 2f       	mov	r29, r18
    1e7a:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    1e7e:	9c 01       	movw	r18, r24
    1e80:	33 27       	eor	r19, r19
    1e82:	2b 32       	cpi	r18, 0x2B	; 43
    1e84:	31 05       	cpc	r19, r1
    1e86:	21 f0       	breq	.+8      	; 0x1e90 <conv_int+0x36>
    1e88:	2d 32       	cpi	r18, 0x2D	; 45
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	59 f4       	brne	.+22     	; 0x1ea4 <conv_int+0x4a>
    1e8e:	d0 68       	ori	r29, 0x80	; 128
    1e90:	01 50       	subi	r16, 0x01	; 1
    1e92:	11 09       	sbc	r17, r1
    1e94:	11 f4       	brne	.+4      	; 0x1e9a <conv_int+0x40>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	6b c0       	rjmp	.+214    	; 0x1f70 <conv_int+0x116>
    1e9a:	c7 01       	movw	r24, r14
    1e9c:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    1ea0:	97 fd       	sbrc	r25, 7
    1ea2:	f9 cf       	rjmp	.-14     	; 0x1e96 <conv_int+0x3c>
    1ea4:	cd 2f       	mov	r28, r29
    1ea6:	cd 7f       	andi	r28, 0xFD	; 253
    1ea8:	2d 2f       	mov	r18, r29
    1eaa:	20 73       	andi	r18, 0x30	; 48
    1eac:	19 f5       	brne	.+70     	; 0x1ef4 <conv_int+0x9a>
    1eae:	80 33       	cpi	r24, 0x30	; 48
    1eb0:	09 f5       	brne	.+66     	; 0x1ef4 <conv_int+0x9a>
    1eb2:	58 01       	movw	r10, r16
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	a8 1a       	sub	r10, r24
    1eb8:	b1 08       	sbc	r11, r1
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <conv_int+0x64>
    1ebc:	45 c0       	rjmp	.+138    	; 0x1f48 <conv_int+0xee>
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    1ec4:	97 fd       	sbrc	r25, 7
    1ec6:	40 c0       	rjmp	.+128    	; 0x1f48 <conv_int+0xee>
    1ec8:	9c 01       	movw	r18, r24
    1eca:	2f 7d       	andi	r18, 0xDF	; 223
    1ecc:	33 27       	eor	r19, r19
    1ece:	28 35       	cpi	r18, 0x58	; 88
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	51 f4       	brne	.+20     	; 0x1ee8 <conv_int+0x8e>
    1ed4:	c2 64       	ori	r28, 0x42	; 66
    1ed6:	02 50       	subi	r16, 0x02	; 2
    1ed8:	11 09       	sbc	r17, r1
    1eda:	b1 f1       	breq	.+108    	; 0x1f48 <conv_int+0xee>
    1edc:	c7 01       	movw	r24, r14
    1ede:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    1ee2:	97 ff       	sbrs	r25, 7
    1ee4:	07 c0       	rjmp	.+14     	; 0x1ef4 <conv_int+0x9a>
    1ee6:	30 c0       	rjmp	.+96     	; 0x1f48 <conv_int+0xee>
    1ee8:	d6 ff       	sbrs	r29, 6
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <conv_int+0x96>
    1eec:	c2 60       	ori	r28, 0x02	; 2
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <conv_int+0x98>
    1ef0:	c2 61       	ori	r28, 0x12	; 18
    1ef2:	85 01       	movw	r16, r10
    1ef4:	81 2c       	mov	r8, r1
    1ef6:	91 2c       	mov	r9, r1
    1ef8:	54 01       	movw	r10, r8
    1efa:	20 ed       	ldi	r18, 0xD0	; 208
    1efc:	28 0f       	add	r18, r24
    1efe:	28 30       	cpi	r18, 0x08	; 8
    1f00:	80 f0       	brcs	.+32     	; 0x1f22 <conv_int+0xc8>
    1f02:	c4 ff       	sbrs	r28, 4
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <conv_int+0xb4>
    1f06:	b7 01       	movw	r22, r14
    1f08:	0e 94 e6 19 	call	0x33cc	; 0x33cc <ungetc>
    1f0c:	1a c0       	rjmp	.+52     	; 0x1f42 <conv_int+0xe8>
    1f0e:	2a 30       	cpi	r18, 0x0A	; 10
    1f10:	40 f0       	brcs	.+16     	; 0x1f22 <conv_int+0xc8>
    1f12:	c6 ff       	sbrs	r28, 6
    1f14:	f8 cf       	rjmp	.-16     	; 0x1f06 <conv_int+0xac>
    1f16:	2f 7d       	andi	r18, 0xDF	; 223
    1f18:	3f ee       	ldi	r19, 0xEF	; 239
    1f1a:	32 0f       	add	r19, r18
    1f1c:	36 30       	cpi	r19, 0x06	; 6
    1f1e:	98 f7       	brcc	.-26     	; 0x1f06 <conv_int+0xac>
    1f20:	27 50       	subi	r18, 0x07	; 7
    1f22:	4c 2f       	mov	r20, r28
    1f24:	c5 01       	movw	r24, r10
    1f26:	b4 01       	movw	r22, r8
    1f28:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <mulacc>
    1f2c:	4b 01       	movw	r8, r22
    1f2e:	5c 01       	movw	r10, r24
    1f30:	c2 60       	ori	r28, 0x02	; 2
    1f32:	01 50       	subi	r16, 0x01	; 1
    1f34:	11 09       	sbc	r17, r1
    1f36:	59 f0       	breq	.+22     	; 0x1f4e <conv_int+0xf4>
    1f38:	c7 01       	movw	r24, r14
    1f3a:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    1f3e:	97 ff       	sbrs	r25, 7
    1f40:	dc cf       	rjmp	.-72     	; 0x1efa <conv_int+0xa0>
    1f42:	c1 fd       	sbrc	r28, 1
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <conv_int+0xf4>
    1f46:	a7 cf       	rjmp	.-178    	; 0x1e96 <conv_int+0x3c>
    1f48:	81 2c       	mov	r8, r1
    1f4a:	91 2c       	mov	r9, r1
    1f4c:	54 01       	movw	r10, r8
    1f4e:	c7 ff       	sbrs	r28, 7
    1f50:	08 c0       	rjmp	.+16     	; 0x1f62 <conv_int+0x108>
    1f52:	b0 94       	com	r11
    1f54:	a0 94       	com	r10
    1f56:	90 94       	com	r9
    1f58:	80 94       	com	r8
    1f5a:	81 1c       	adc	r8, r1
    1f5c:	91 1c       	adc	r9, r1
    1f5e:	a1 1c       	adc	r10, r1
    1f60:	b1 1c       	adc	r11, r1
    1f62:	2c 2f       	mov	r18, r28
    1f64:	b5 01       	movw	r22, r10
    1f66:	a4 01       	movw	r20, r8
    1f68:	c6 01       	movw	r24, r12
    1f6a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <putval>
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	9f 90       	pop	r9
    1f86:	8f 90       	pop	r8
    1f88:	08 95       	ret

00001f8a <conv_brk>:
    1f8a:	4f 92       	push	r4
    1f8c:	5f 92       	push	r5
    1f8e:	6f 92       	push	r6
    1f90:	7f 92       	push	r7
    1f92:	8f 92       	push	r8
    1f94:	9f 92       	push	r9
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	a0 97       	sbiw	r28, 0x20	; 32
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	5c 01       	movw	r10, r24
    1fb6:	4b 01       	movw	r8, r22
    1fb8:	7a 01       	movw	r14, r20
    1fba:	8e 01       	movw	r16, r28
    1fbc:	0f 5f       	subi	r16, 0xFF	; 255
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	68 01       	movw	r12, r16
    1fc2:	80 e2       	ldi	r24, 0x20	; 32
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	11 92       	st	Z+, r1
    1fc8:	8a 95       	dec	r24
    1fca:	e9 f7       	brne	.-6      	; 0x1fc6 <conv_brk+0x3c>
    1fcc:	f5 01       	movw	r30, r10
    1fce:	53 80       	ldd	r5, Z+3	; 0x03
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	61 2c       	mov	r6, r1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	71 2c       	mov	r7, r1
    1fda:	a1 e0       	ldi	r26, 0x01	; 1
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	f9 01       	movw	r30, r18
    1fe0:	53 fc       	sbrc	r5, 3
    1fe2:	85 91       	lpm	r24, Z+
    1fe4:	53 fe       	sbrs	r5, 3
    1fe6:	81 91       	ld	r24, Z+
    1fe8:	8f 01       	movw	r16, r30
    1fea:	48 2e       	mov	r4, r24
    1fec:	9f 01       	movw	r18, r30
    1fee:	81 11       	cpse	r24, r1
    1ff0:	03 c0       	rjmp	.+6      	; 0x1ff8 <conv_brk+0x6e>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	96 c0       	rjmp	.+300    	; 0x2124 <conv_brk+0x19a>
    1ff8:	8e 35       	cpi	r24, 0x5E	; 94
    1ffa:	19 f4       	brne	.+6      	; 0x2002 <conv_brk+0x78>
    1ffc:	41 15       	cp	r20, r1
    1ffe:	51 05       	cpc	r21, r1
    2000:	51 f1       	breq	.+84     	; 0x2056 <conv_brk+0xcc>
    2002:	67 2d       	mov	r22, r7
    2004:	70 e0       	ldi	r23, 0x00	; 0
    2006:	64 17       	cp	r22, r20
    2008:	75 07       	cpc	r23, r21
    200a:	3c f4       	brge	.+14     	; 0x201a <conv_brk+0x90>
    200c:	8d 35       	cpi	r24, 0x5D	; 93
    200e:	61 f1       	breq	.+88     	; 0x2068 <conv_brk+0xde>
    2010:	8d 32       	cpi	r24, 0x2D	; 45
    2012:	19 f4       	brne	.+6      	; 0x201a <conv_brk+0x90>
    2014:	99 23       	and	r25, r25
    2016:	11 f1       	breq	.+68     	; 0x205c <conv_brk+0xd2>
    2018:	03 c0       	rjmp	.+6      	; 0x2020 <conv_brk+0x96>
    201a:	99 23       	and	r25, r25
    201c:	09 f4       	brne	.+2      	; 0x2020 <conv_brk+0x96>
    201e:	6d c0       	rjmp	.+218    	; 0x20fa <conv_brk+0x170>
    2020:	84 2d       	mov	r24, r4
    2022:	86 95       	lsr	r24
    2024:	86 95       	lsr	r24
    2026:	86 95       	lsr	r24
    2028:	f6 01       	movw	r30, r12
    202a:	e8 0f       	add	r30, r24
    202c:	f1 1d       	adc	r31, r1
    202e:	84 2d       	mov	r24, r4
    2030:	87 70       	andi	r24, 0x07	; 7
    2032:	8d 01       	movw	r16, r26
    2034:	02 c0       	rjmp	.+4      	; 0x203a <conv_brk+0xb0>
    2036:	00 0f       	add	r16, r16
    2038:	11 1f       	adc	r17, r17
    203a:	8a 95       	dec	r24
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <conv_brk+0xac>
    203e:	c8 01       	movw	r24, r16
    2040:	90 81       	ld	r25, Z
    2042:	89 2b       	or	r24, r25
    2044:	80 83       	st	Z, r24
    2046:	64 14       	cp	r6, r4
    2048:	59 f0       	breq	.+22     	; 0x2060 <conv_brk+0xd6>
    204a:	46 14       	cp	r4, r6
    204c:	10 f4       	brcc	.+4      	; 0x2052 <conv_brk+0xc8>
    204e:	43 94       	inc	r4
    2050:	e7 cf       	rjmp	.-50     	; 0x2020 <conv_brk+0x96>
    2052:	4a 94       	dec	r4
    2054:	e5 cf       	rjmp	.-54     	; 0x2020 <conv_brk+0x96>
    2056:	77 24       	eor	r7, r7
    2058:	73 94       	inc	r7
    205a:	03 c0       	rjmp	.+6      	; 0x2062 <conv_brk+0xd8>
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	01 c0       	rjmp	.+2      	; 0x2062 <conv_brk+0xd8>
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	4f 5f       	subi	r20, 0xFF	; 255
    2064:	5f 4f       	sbci	r21, 0xFF	; 255
    2066:	bb cf       	rjmp	.-138    	; 0x1fde <conv_brk+0x54>
    2068:	99 23       	and	r25, r25
    206a:	19 f0       	breq	.+6      	; 0x2072 <conv_brk+0xe8>
    206c:	8e 81       	ldd	r24, Y+6	; 0x06
    206e:	80 62       	ori	r24, 0x20	; 32
    2070:	8e 83       	std	Y+6, r24	; 0x06
    2072:	71 10       	cpse	r7, r1
    2074:	03 c0       	rjmp	.+6      	; 0x207c <conv_brk+0xf2>
    2076:	77 24       	eor	r7, r7
    2078:	73 94       	inc	r7
    207a:	19 c0       	rjmp	.+50     	; 0x20ae <conv_brk+0x124>
    207c:	f6 01       	movw	r30, r12
    207e:	9e 01       	movw	r18, r28
    2080:	2f 5d       	subi	r18, 0xDF	; 223
    2082:	3f 4f       	sbci	r19, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	80 95       	com	r24
    2088:	81 93       	st	Z+, r24
    208a:	2e 17       	cp	r18, r30
    208c:	3f 07       	cpc	r19, r31
    208e:	d1 f7       	brne	.-12     	; 0x2084 <conv_brk+0xfa>
    2090:	f2 cf       	rjmp	.-28     	; 0x2076 <conv_brk+0xec>
    2092:	e1 14       	cp	r14, r1
    2094:	f1 04       	cpc	r15, r1
    2096:	31 f0       	breq	.+12     	; 0x20a4 <conv_brk+0x11a>
    2098:	f7 01       	movw	r30, r14
    209a:	80 83       	st	Z, r24
    209c:	b7 01       	movw	r22, r14
    209e:	6f 5f       	subi	r22, 0xFF	; 255
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	7b 01       	movw	r14, r22
    20a4:	71 e0       	ldi	r23, 0x01	; 1
    20a6:	87 1a       	sub	r8, r23
    20a8:	91 08       	sbc	r9, r1
    20aa:	71 2c       	mov	r7, r1
    20ac:	f9 f0       	breq	.+62     	; 0x20ec <conv_brk+0x162>
    20ae:	c5 01       	movw	r24, r10
    20b0:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    20b4:	97 fd       	sbrc	r25, 7
    20b6:	18 c0       	rjmp	.+48     	; 0x20e8 <conv_brk+0x15e>
    20b8:	fc 01       	movw	r30, r24
    20ba:	ff 27       	eor	r31, r31
    20bc:	23 e0       	ldi	r18, 0x03	; 3
    20be:	f5 95       	asr	r31
    20c0:	e7 95       	ror	r30
    20c2:	2a 95       	dec	r18
    20c4:	e1 f7       	brne	.-8      	; 0x20be <conv_brk+0x134>
    20c6:	ec 0d       	add	r30, r12
    20c8:	fd 1d       	adc	r31, r13
    20ca:	20 81       	ld	r18, Z
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	ac 01       	movw	r20, r24
    20d0:	47 70       	andi	r20, 0x07	; 7
    20d2:	55 27       	eor	r21, r21
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <conv_brk+0x150>
    20d6:	35 95       	asr	r19
    20d8:	27 95       	ror	r18
    20da:	4a 95       	dec	r20
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <conv_brk+0x14c>
    20de:	20 fd       	sbrc	r18, 0
    20e0:	d8 cf       	rjmp	.-80     	; 0x2092 <conv_brk+0x108>
    20e2:	b5 01       	movw	r22, r10
    20e4:	0e 94 e6 19 	call	0x33cc	; 0x33cc <ungetc>
    20e8:	71 10       	cpse	r7, r1
    20ea:	83 cf       	rjmp	.-250    	; 0x1ff2 <conv_brk+0x68>
    20ec:	e1 14       	cp	r14, r1
    20ee:	f1 04       	cpc	r15, r1
    20f0:	11 f0       	breq	.+4      	; 0x20f6 <conv_brk+0x16c>
    20f2:	f7 01       	movw	r30, r14
    20f4:	10 82       	st	Z, r1
    20f6:	c8 01       	movw	r24, r16
    20f8:	15 c0       	rjmp	.+42     	; 0x2124 <conv_brk+0x19a>
    20fa:	68 2f       	mov	r22, r24
    20fc:	66 95       	lsr	r22
    20fe:	66 95       	lsr	r22
    2100:	66 95       	lsr	r22
    2102:	f6 01       	movw	r30, r12
    2104:	e6 0f       	add	r30, r22
    2106:	f1 1d       	adc	r31, r1
    2108:	68 2f       	mov	r22, r24
    210a:	67 70       	andi	r22, 0x07	; 7
    210c:	8d 01       	movw	r16, r26
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <conv_brk+0x18a>
    2110:	00 0f       	add	r16, r16
    2112:	11 1f       	adc	r17, r17
    2114:	6a 95       	dec	r22
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <conv_brk+0x186>
    2118:	b8 01       	movw	r22, r16
    211a:	70 81       	ld	r23, Z
    211c:	67 2b       	or	r22, r23
    211e:	60 83       	st	Z, r22
    2120:	68 2e       	mov	r6, r24
    2122:	9f cf       	rjmp	.-194    	; 0x2062 <conv_brk+0xd8>
    2124:	a0 96       	adiw	r28, 0x20	; 32
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	ff 90       	pop	r15
    2134:	ef 90       	pop	r14
    2136:	df 90       	pop	r13
    2138:	cf 90       	pop	r12
    213a:	bf 90       	pop	r11
    213c:	af 90       	pop	r10
    213e:	9f 90       	pop	r9
    2140:	8f 90       	pop	r8
    2142:	7f 90       	pop	r7
    2144:	6f 90       	pop	r6
    2146:	5f 90       	pop	r5
    2148:	4f 90       	pop	r4
    214a:	08 95       	ret

0000214c <conv_flt>:
    214c:	2f 92       	push	r2
    214e:	3f 92       	push	r3
    2150:	4f 92       	push	r4
    2152:	5f 92       	push	r5
    2154:	6f 92       	push	r6
    2156:	7f 92       	push	r7
    2158:	9f 92       	push	r9
    215a:	af 92       	push	r10
    215c:	bf 92       	push	r11
    215e:	cf 92       	push	r12
    2160:	df 92       	push	r13
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	6c 01       	movw	r12, r24
    2170:	8b 01       	movw	r16, r22
    2172:	1a 01       	movw	r2, r20
    2174:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    2178:	ec 01       	movw	r28, r24
    217a:	99 27       	eor	r25, r25
    217c:	8b 32       	cpi	r24, 0x2B	; 43
    217e:	91 05       	cpc	r25, r1
    2180:	29 f0       	breq	.+10     	; 0x218c <conv_flt+0x40>
    2182:	8d 97       	sbiw	r24, 0x2d	; 45
    2184:	81 f4       	brne	.+32     	; 0x21a6 <conv_flt+0x5a>
    2186:	30 e8       	ldi	r19, 0x80	; 128
    2188:	93 2e       	mov	r9, r19
    218a:	01 c0       	rjmp	.+2      	; 0x218e <conv_flt+0x42>
    218c:	91 2c       	mov	r9, r1
    218e:	01 50       	subi	r16, 0x01	; 1
    2190:	11 09       	sbc	r17, r1
    2192:	11 f4       	brne	.+4      	; 0x2198 <conv_flt+0x4c>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	0c c1       	rjmp	.+536    	; 0x23b0 <conv_flt+0x264>
    2198:	c6 01       	movw	r24, r12
    219a:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    219e:	ec 01       	movw	r28, r24
    21a0:	97 ff       	sbrs	r25, 7
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <conv_flt+0x5c>
    21a4:	f7 cf       	rjmp	.-18     	; 0x2194 <conv_flt+0x48>
    21a6:	91 2c       	mov	r9, r1
    21a8:	ce 01       	movw	r24, r28
    21aa:	0e 94 0a 19 	call	0x3214	; 0x3214 <tolower>
    21ae:	89 36       	cpi	r24, 0x69	; 105
    21b0:	91 05       	cpc	r25, r1
    21b2:	31 f0       	breq	.+12     	; 0x21c0 <conv_flt+0x74>
    21b4:	8e 36       	cpi	r24, 0x6E	; 110
    21b6:	91 05       	cpc	r25, r1
    21b8:	99 f5       	brne	.+102    	; 0x2220 <conv_flt+0xd4>
    21ba:	ca e1       	ldi	r28, 0x1A	; 26
    21bc:	d2 e0       	ldi	r29, 0x02	; 2
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <conv_flt+0x78>
    21c0:	cd e1       	ldi	r28, 0x1D	; 29
    21c2:	d2 e0       	ldi	r29, 0x02	; 2
    21c4:	21 96       	adiw	r28, 0x01	; 1
    21c6:	fe 01       	movw	r30, r28
    21c8:	31 97       	sbiw	r30, 0x01	; 1
    21ca:	b4 90       	lpm	r11, Z
    21cc:	bb 20       	and	r11, r11
    21ce:	c9 f0       	breq	.+50     	; 0x2202 <conv_flt+0xb6>
    21d0:	01 50       	subi	r16, 0x01	; 1
    21d2:	11 09       	sbc	r17, r1
    21d4:	91 f0       	breq	.+36     	; 0x21fa <conv_flt+0xae>
    21d6:	c6 01       	movw	r24, r12
    21d8:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    21dc:	7c 01       	movw	r14, r24
    21de:	97 fd       	sbrc	r25, 7
    21e0:	0c c0       	rjmp	.+24     	; 0x21fa <conv_flt+0xae>
    21e2:	0e 94 0a 19 	call	0x3214	; 0x3214 <tolower>
    21e6:	99 27       	eor	r25, r25
    21e8:	eb 2d       	mov	r30, r11
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	8e 17       	cp	r24, r30
    21ee:	9f 07       	cpc	r25, r31
    21f0:	49 f3       	breq	.-46     	; 0x21c4 <conv_flt+0x78>
    21f2:	b6 01       	movw	r22, r12
    21f4:	c7 01       	movw	r24, r14
    21f6:	0e 94 e6 19 	call	0x33cc	; 0x33cc <ungetc>
    21fa:	c0 52       	subi	r28, 0x20	; 32
    21fc:	d2 40       	sbci	r29, 0x02	; 2
    21fe:	51 f6       	brne	.-108    	; 0x2194 <conv_flt+0x48>
    2200:	03 c0       	rjmp	.+6      	; 0x2208 <conv_flt+0xbc>
    2202:	cd 51       	subi	r28, 0x1D	; 29
    2204:	d2 40       	sbci	r29, 0x02	; 2
    2206:	29 f0       	breq	.+10     	; 0x2212 <conv_flt+0xc6>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a0 e8       	ldi	r26, 0x80	; 128
    220e:	bf e7       	ldi	r27, 0x7F	; 127
    2210:	04 c0       	rjmp	.+8      	; 0x221a <conv_flt+0xce>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a0 ec       	ldi	r26, 0xC0	; 192
    2218:	bf e7       	ldi	r27, 0x7F	; 127
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	b8 c0       	rjmp	.+368    	; 0x2390 <conv_flt+0x244>
    2220:	41 2c       	mov	r4, r1
    2222:	51 2c       	mov	r5, r1
    2224:	32 01       	movw	r6, r4
    2226:	e1 2c       	mov	r14, r1
    2228:	f1 2c       	mov	r15, r1
    222a:	2c 2f       	mov	r18, r28
    222c:	20 53       	subi	r18, 0x30	; 48
    222e:	2a 30       	cpi	r18, 0x0A	; 10
    2230:	10 f5       	brcc	.+68     	; 0x2276 <conv_flt+0x12a>
    2232:	e9 2d       	mov	r30, r9
    2234:	e2 60       	ori	r30, 0x02	; 2
    2236:	be 2e       	mov	r11, r30
    2238:	89 2d       	mov	r24, r9
    223a:	88 70       	andi	r24, 0x08	; 8
    223c:	92 fe       	sbrs	r9, 2
    223e:	06 c0       	rjmp	.+12     	; 0x224c <conv_flt+0x100>
    2240:	81 11       	cpse	r24, r1
    2242:	20 c0       	rjmp	.+64     	; 0x2284 <conv_flt+0x138>
    2244:	ff ef       	ldi	r31, 0xFF	; 255
    2246:	ef 1a       	sub	r14, r31
    2248:	ff 0a       	sbc	r15, r31
    224a:	1c c0       	rjmp	.+56     	; 0x2284 <conv_flt+0x138>
    224c:	88 23       	and	r24, r24
    224e:	19 f0       	breq	.+6      	; 0x2256 <conv_flt+0x10a>
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	e8 1a       	sub	r14, r24
    2254:	f1 08       	sbc	r15, r1
    2256:	40 e2       	ldi	r20, 0x20	; 32
    2258:	c3 01       	movw	r24, r6
    225a:	b2 01       	movw	r22, r4
    225c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <mulacc>
    2260:	2b 01       	movw	r4, r22
    2262:	3c 01       	movw	r6, r24
    2264:	68 39       	cpi	r22, 0x98	; 152
    2266:	79 49       	sbci	r23, 0x99	; 153
    2268:	89 49       	sbci	r24, 0x99	; 153
    226a:	99 41       	sbci	r25, 0x19	; 25
    226c:	58 f0       	brcs	.+22     	; 0x2284 <conv_flt+0x138>
    226e:	f9 2d       	mov	r31, r9
    2270:	f6 60       	ori	r31, 0x06	; 6
    2272:	bf 2e       	mov	r11, r31
    2274:	07 c0       	rjmp	.+14     	; 0x2284 <conv_flt+0x138>
    2276:	2e 3f       	cpi	r18, 0xFE	; 254
    2278:	89 f4       	brne	.+34     	; 0x229c <conv_flt+0x150>
    227a:	93 fc       	sbrc	r9, 3
    227c:	0f c0       	rjmp	.+30     	; 0x229c <conv_flt+0x150>
    227e:	29 2d       	mov	r18, r9
    2280:	28 60       	ori	r18, 0x08	; 8
    2282:	b2 2e       	mov	r11, r18
    2284:	01 50       	subi	r16, 0x01	; 1
    2286:	11 09       	sbc	r17, r1
    2288:	41 f0       	breq	.+16     	; 0x229a <conv_flt+0x14e>
    228a:	c6 01       	movw	r24, r12
    228c:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    2290:	ec 01       	movw	r28, r24
    2292:	9b 2c       	mov	r9, r11
    2294:	97 ff       	sbrs	r25, 7
    2296:	c9 cf       	rjmp	.-110    	; 0x222a <conv_flt+0xde>
    2298:	01 c0       	rjmp	.+2      	; 0x229c <conv_flt+0x150>
    229a:	9b 2c       	mov	r9, r11
    229c:	91 fe       	sbrs	r9, 1
    229e:	7a cf       	rjmp	.-268    	; 0x2194 <conv_flt+0x48>
    22a0:	ce 01       	movw	r24, r28
    22a2:	8f 7d       	andi	r24, 0xDF	; 223
    22a4:	99 27       	eor	r25, r25
    22a6:	85 34       	cpi	r24, 0x45	; 69
    22a8:	91 05       	cpc	r25, r1
    22aa:	09 f0       	breq	.+2      	; 0x22ae <conv_flt+0x162>
    22ac:	42 c0       	rjmp	.+132    	; 0x2332 <conv_flt+0x1e6>
    22ae:	58 01       	movw	r10, r16
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	a8 1a       	sub	r10, r24
    22b4:	b1 08       	sbc	r11, r1
    22b6:	09 f4       	brne	.+2      	; 0x22ba <conv_flt+0x16e>
    22b8:	6d cf       	rjmp	.-294    	; 0x2194 <conv_flt+0x48>
    22ba:	c6 01       	movw	r24, r12
    22bc:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    22c0:	ec 01       	movw	r28, r24
    22c2:	97 fd       	sbrc	r25, 7
    22c4:	67 cf       	rjmp	.-306    	; 0x2194 <conv_flt+0x48>
    22c6:	99 27       	eor	r25, r25
    22c8:	8b 32       	cpi	r24, 0x2B	; 43
    22ca:	91 05       	cpc	r25, r1
    22cc:	29 f0       	breq	.+10     	; 0x22d8 <conv_flt+0x18c>
    22ce:	8d 97       	sbiw	r24, 0x2d	; 45
    22d0:	69 f4       	brne	.+26     	; 0x22ec <conv_flt+0x1a0>
    22d2:	e9 2d       	mov	r30, r9
    22d4:	e0 61       	ori	r30, 0x10	; 16
    22d6:	9e 2e       	mov	r9, r30
    22d8:	58 01       	movw	r10, r16
    22da:	f2 e0       	ldi	r31, 0x02	; 2
    22dc:	af 1a       	sub	r10, r31
    22de:	b1 08       	sbc	r11, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <conv_flt+0x198>
    22e2:	58 cf       	rjmp	.-336    	; 0x2194 <conv_flt+0x48>
    22e4:	c6 01       	movw	r24, r12
    22e6:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    22ea:	ec 01       	movw	r28, r24
    22ec:	ce 01       	movw	r24, r28
    22ee:	c0 97       	sbiw	r24, 0x30	; 48
    22f0:	0a 97       	sbiw	r24, 0x0a	; 10
    22f2:	08 f0       	brcs	.+2      	; 0x22f6 <conv_flt+0x1aa>
    22f4:	4f cf       	rjmp	.-354    	; 0x2194 <conv_flt+0x48>
    22f6:	85 01       	movw	r16, r10
    22f8:	a1 2c       	mov	r10, r1
    22fa:	b1 2c       	mov	r11, r1
    22fc:	b5 01       	movw	r22, r10
    22fe:	bb 0c       	add	r11, r11
    2300:	88 0b       	sbc	r24, r24
    2302:	99 0b       	sbc	r25, r25
    2304:	2c 2f       	mov	r18, r28
    2306:	20 53       	subi	r18, 0x30	; 48
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <mulacc>
    230e:	5b 01       	movw	r10, r22
    2310:	01 50       	subi	r16, 0x01	; 1
    2312:	11 09       	sbc	r17, r1
    2314:	39 f0       	breq	.+14     	; 0x2324 <conv_flt+0x1d8>
    2316:	c6 01       	movw	r24, r12
    2318:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    231c:	ec 01       	movw	r28, r24
    231e:	c0 97       	sbiw	r24, 0x30	; 48
    2320:	0a 97       	sbiw	r24, 0x0a	; 10
    2322:	60 f3       	brcs	.-40     	; 0x22fc <conv_flt+0x1b0>
    2324:	94 fe       	sbrs	r9, 4
    2326:	03 c0       	rjmp	.+6      	; 0x232e <conv_flt+0x1e2>
    2328:	b1 94       	neg	r11
    232a:	a1 94       	neg	r10
    232c:	b1 08       	sbc	r11, r1
    232e:	ea 0c       	add	r14, r10
    2330:	fb 1c       	adc	r15, r11
    2332:	01 2b       	or	r16, r17
    2334:	31 f0       	breq	.+12     	; 0x2342 <conv_flt+0x1f6>
    2336:	d7 fd       	sbrc	r29, 7
    2338:	04 c0       	rjmp	.+8      	; 0x2342 <conv_flt+0x1f6>
    233a:	b6 01       	movw	r22, r12
    233c:	ce 01       	movw	r24, r28
    233e:	0e 94 e6 19 	call	0x33cc	; 0x33cc <ungetc>
    2342:	c3 01       	movw	r24, r6
    2344:	b2 01       	movw	r22, r4
    2346:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__floatunsisf>
    234a:	f7 fe       	sbrs	r15, 7
    234c:	06 c0       	rjmp	.+12     	; 0x235a <conv_flt+0x20e>
    234e:	f1 94       	neg	r15
    2350:	e1 94       	neg	r14
    2352:	f1 08       	sbc	r15, r1
    2354:	c9 e3       	ldi	r28, 0x39	; 57
    2356:	d2 e0       	ldi	r29, 0x02	; 2
    2358:	02 c0       	rjmp	.+4      	; 0x235e <conv_flt+0x212>
    235a:	c1 e5       	ldi	r28, 0x51	; 81
    235c:	d2 e0       	ldi	r29, 0x02	; 2
    235e:	6e 01       	movw	r12, r28
    2360:	28 e1       	ldi	r18, 0x18	; 24
    2362:	c2 1a       	sub	r12, r18
    2364:	d1 08       	sbc	r13, r1
    2366:	00 e2       	ldi	r16, 0x20	; 32
    2368:	10 e0       	ldi	r17, 0x00	; 0
    236a:	e0 16       	cp	r14, r16
    236c:	f1 06       	cpc	r15, r17
    236e:	50 f0       	brcs	.+20     	; 0x2384 <conv_flt+0x238>
    2370:	fe 01       	movw	r30, r28
    2372:	25 91       	lpm	r18, Z+
    2374:	35 91       	lpm	r19, Z+
    2376:	45 91       	lpm	r20, Z+
    2378:	54 91       	lpm	r21, Z
    237a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__mulsf3>
    237e:	e0 1a       	sub	r14, r16
    2380:	f1 0a       	sbc	r15, r17
    2382:	f3 cf       	rjmp	.-26     	; 0x236a <conv_flt+0x21e>
    2384:	24 97       	sbiw	r28, 0x04	; 4
    2386:	16 95       	lsr	r17
    2388:	07 95       	ror	r16
    238a:	cc 16       	cp	r12, r28
    238c:	dd 06       	cpc	r13, r29
    238e:	69 f7       	brne	.-38     	; 0x236a <conv_flt+0x21e>
    2390:	97 fe       	sbrs	r9, 7
    2392:	05 c0       	rjmp	.+10     	; 0x239e <conv_flt+0x252>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	b0 58       	subi	r27, 0x80	; 128
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	21 14       	cp	r2, r1
    23a0:	31 04       	cpc	r3, r1
    23a2:	29 f0       	breq	.+10     	; 0x23ae <conv_flt+0x262>
    23a4:	f1 01       	movw	r30, r2
    23a6:	60 83       	st	Z, r22
    23a8:	71 83       	std	Z+1, r23	; 0x01
    23aa:	82 83       	std	Z+2, r24	; 0x02
    23ac:	93 83       	std	Z+3, r25	; 0x03
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	df 90       	pop	r13
    23be:	cf 90       	pop	r12
    23c0:	bf 90       	pop	r11
    23c2:	af 90       	pop	r10
    23c4:	9f 90       	pop	r9
    23c6:	7f 90       	pop	r7
    23c8:	6f 90       	pop	r6
    23ca:	5f 90       	pop	r5
    23cc:	4f 90       	pop	r4
    23ce:	3f 90       	pop	r3
    23d0:	2f 90       	pop	r2
    23d2:	08 95       	ret

000023d4 <vfscanf>:
    23d4:	6f 92       	push	r6
    23d6:	7f 92       	push	r7
    23d8:	8f 92       	push	r8
    23da:	9f 92       	push	r9
    23dc:	af 92       	push	r10
    23de:	bf 92       	push	r11
    23e0:	cf 92       	push	r12
    23e2:	df 92       	push	r13
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    23f0:	5c 01       	movw	r10, r24
    23f2:	eb 01       	movw	r28, r22
    23f4:	4a 01       	movw	r8, r20
    23f6:	fc 01       	movw	r30, r24
    23f8:	16 82       	std	Z+6, r1	; 0x06
    23fa:	17 82       	std	Z+7, r1	; 0x07
    23fc:	61 2c       	mov	r6, r1
    23fe:	f5 01       	movw	r30, r10
    2400:	03 81       	ldd	r16, Z+3	; 0x03
    2402:	fe 01       	movw	r30, r28
    2404:	03 fd       	sbrc	r16, 3
    2406:	85 91       	lpm	r24, Z+
    2408:	03 ff       	sbrs	r16, 3
    240a:	81 91       	ld	r24, Z+
    240c:	18 2f       	mov	r17, r24
    240e:	ef 01       	movw	r28, r30
    2410:	88 23       	and	r24, r24
    2412:	09 f4       	brne	.+2      	; 0x2416 <vfscanf+0x42>
    2414:	0f c1       	rjmp	.+542    	; 0x2634 <vfscanf+0x260>
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 01 19 	call	0x3202	; 0x3202 <isspace>
    241c:	89 2b       	or	r24, r25
    241e:	21 f0       	breq	.+8      	; 0x2428 <vfscanf+0x54>
    2420:	c5 01       	movw	r24, r10
    2422:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <skip_spaces>
    2426:	eb cf       	rjmp	.-42     	; 0x23fe <vfscanf+0x2a>
    2428:	15 32       	cpi	r17, 0x25	; 37
    242a:	41 f4       	brne	.+16     	; 0x243c <vfscanf+0x68>
    242c:	fe 01       	movw	r30, r28
    242e:	03 fd       	sbrc	r16, 3
    2430:	15 91       	lpm	r17, Z+
    2432:	03 ff       	sbrs	r16, 3
    2434:	11 91       	ld	r17, Z+
    2436:	ef 01       	movw	r28, r30
    2438:	15 32       	cpi	r17, 0x25	; 37
    243a:	81 f4       	brne	.+32     	; 0x245c <vfscanf+0x88>
    243c:	c5 01       	movw	r24, r10
    243e:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    2442:	97 fd       	sbrc	r25, 7
    2444:	f5 c0       	rjmp	.+490    	; 0x2630 <vfscanf+0x25c>
    2446:	41 2f       	mov	r20, r17
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	9c 01       	movw	r18, r24
    244c:	33 27       	eor	r19, r19
    244e:	24 17       	cp	r18, r20
    2450:	35 07       	cpc	r19, r21
    2452:	a9 f2       	breq	.-86     	; 0x23fe <vfscanf+0x2a>
    2454:	b5 01       	movw	r22, r10
    2456:	0e 94 e6 19 	call	0x33cc	; 0x33cc <ungetc>
    245a:	ec c0       	rjmp	.+472    	; 0x2634 <vfscanf+0x260>
    245c:	1a 32       	cpi	r17, 0x2A	; 42
    245e:	41 f4       	brne	.+16     	; 0x2470 <vfscanf+0x9c>
    2460:	03 fd       	sbrc	r16, 3
    2462:	15 91       	lpm	r17, Z+
    2464:	03 ff       	sbrs	r16, 3
    2466:	11 91       	ld	r17, Z+
    2468:	ef 01       	movw	r28, r30
    246a:	77 24       	eor	r7, r7
    246c:	73 94       	inc	r7
    246e:	01 c0       	rjmp	.+2      	; 0x2472 <vfscanf+0x9e>
    2470:	71 2c       	mov	r7, r1
    2472:	e1 2c       	mov	r14, r1
    2474:	f1 2c       	mov	r15, r1
    2476:	20 ed       	ldi	r18, 0xD0	; 208
    2478:	21 0f       	add	r18, r17
    247a:	2a 30       	cpi	r18, 0x0A	; 10
    247c:	88 f4       	brcc	.+34     	; 0x24a0 <vfscanf+0xcc>
    247e:	f7 2d       	mov	r31, r7
    2480:	f2 60       	ori	r31, 0x02	; 2
    2482:	7f 2e       	mov	r7, r31
    2484:	b7 01       	movw	r22, r14
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <mulacc>
    2490:	7b 01       	movw	r14, r22
    2492:	fe 01       	movw	r30, r28
    2494:	03 fd       	sbrc	r16, 3
    2496:	15 91       	lpm	r17, Z+
    2498:	03 ff       	sbrs	r16, 3
    249a:	11 91       	ld	r17, Z+
    249c:	ef 01       	movw	r28, r30
    249e:	eb cf       	rjmp	.-42     	; 0x2476 <vfscanf+0xa2>
    24a0:	71 fe       	sbrs	r7, 1
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <vfscanf+0xd8>
    24a4:	e1 14       	cp	r14, r1
    24a6:	f1 04       	cpc	r15, r1
    24a8:	21 f4       	brne	.+8      	; 0x24b2 <vfscanf+0xde>
    24aa:	c4 c0       	rjmp	.+392    	; 0x2634 <vfscanf+0x260>
    24ac:	ee 24       	eor	r14, r14
    24ae:	ea 94       	dec	r14
    24b0:	fe 2c       	mov	r15, r14
    24b2:	18 36       	cpi	r17, 0x68	; 104
    24b4:	19 f0       	breq	.+6      	; 0x24bc <vfscanf+0xe8>
    24b6:	1c 36       	cpi	r17, 0x6C	; 108
    24b8:	61 f0       	breq	.+24     	; 0x24d2 <vfscanf+0xfe>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <vfscanf+0x110>
    24bc:	fe 01       	movw	r30, r28
    24be:	03 fd       	sbrc	r16, 3
    24c0:	15 91       	lpm	r17, Z+
    24c2:	03 ff       	sbrs	r16, 3
    24c4:	11 91       	ld	r17, Z+
    24c6:	ef 01       	movw	r28, r30
    24c8:	18 36       	cpi	r17, 0x68	; 104
    24ca:	61 f4       	brne	.+24     	; 0x24e4 <vfscanf+0x110>
    24cc:	87 2d       	mov	r24, r7
    24ce:	88 60       	ori	r24, 0x08	; 8
    24d0:	78 2e       	mov	r7, r24
    24d2:	97 2d       	mov	r25, r7
    24d4:	94 60       	ori	r25, 0x04	; 4
    24d6:	79 2e       	mov	r7, r25
    24d8:	fe 01       	movw	r30, r28
    24da:	03 fd       	sbrc	r16, 3
    24dc:	15 91       	lpm	r17, Z+
    24de:	03 ff       	sbrs	r16, 3
    24e0:	11 91       	ld	r17, Z+
    24e2:	ef 01       	movw	r28, r30
    24e4:	11 23       	and	r17, r17
    24e6:	09 f4       	brne	.+2      	; 0x24ea <vfscanf+0x116>
    24e8:	a5 c0       	rjmp	.+330    	; 0x2634 <vfscanf+0x260>
    24ea:	61 2f       	mov	r22, r17
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	88 e0       	ldi	r24, 0x08	; 8
    24f0:	92 e0       	ldi	r25, 0x02	; 2
    24f2:	0e 94 12 19 	call	0x3224	; 0x3224 <strchr_P>
    24f6:	89 2b       	or	r24, r25
    24f8:	09 f4       	brne	.+2      	; 0x24fc <vfscanf+0x128>
    24fa:	9c c0       	rjmp	.+312    	; 0x2634 <vfscanf+0x260>
    24fc:	70 fc       	sbrc	r7, 0
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <vfscanf+0x13a>
    2500:	f4 01       	movw	r30, r8
    2502:	c0 80       	ld	r12, Z
    2504:	d1 80       	ldd	r13, Z+1	; 0x01
    2506:	c4 01       	movw	r24, r8
    2508:	02 96       	adiw	r24, 0x02	; 2
    250a:	4c 01       	movw	r8, r24
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <vfscanf+0x13e>
    250e:	c1 2c       	mov	r12, r1
    2510:	d1 2c       	mov	r13, r1
    2512:	1e 36       	cpi	r17, 0x6E	; 110
    2514:	51 f4       	brne	.+20     	; 0x252a <vfscanf+0x156>
    2516:	f5 01       	movw	r30, r10
    2518:	46 81       	ldd	r20, Z+6	; 0x06
    251a:	57 81       	ldd	r21, Z+7	; 0x07
    251c:	60 e0       	ldi	r22, 0x00	; 0
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	27 2d       	mov	r18, r7
    2522:	c6 01       	movw	r24, r12
    2524:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <putval>
    2528:	6a cf       	rjmp	.-300    	; 0x23fe <vfscanf+0x2a>
    252a:	13 36       	cpi	r17, 0x63	; 99
    252c:	b9 f4       	brne	.+46     	; 0x255c <vfscanf+0x188>
    252e:	71 fc       	sbrc	r7, 1
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <vfscanf+0x164>
    2532:	ee 24       	eor	r14, r14
    2534:	e3 94       	inc	r14
    2536:	f1 2c       	mov	r15, r1
    2538:	c5 01       	movw	r24, r10
    253a:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    253e:	97 fd       	sbrc	r25, 7
    2540:	77 c0       	rjmp	.+238    	; 0x2630 <vfscanf+0x25c>
    2542:	c1 14       	cp	r12, r1
    2544:	d1 04       	cpc	r13, r1
    2546:	29 f0       	breq	.+10     	; 0x2552 <vfscanf+0x17e>
    2548:	f6 01       	movw	r30, r12
    254a:	80 83       	st	Z, r24
    254c:	c6 01       	movw	r24, r12
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	6c 01       	movw	r12, r24
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	e9 1a       	sub	r14, r25
    2556:	f1 08       	sbc	r15, r1
    2558:	79 f7       	brne	.-34     	; 0x2538 <vfscanf+0x164>
    255a:	66 c0       	rjmp	.+204    	; 0x2628 <vfscanf+0x254>
    255c:	1b 35       	cpi	r17, 0x5B	; 91
    255e:	59 f4       	brne	.+22     	; 0x2576 <vfscanf+0x1a2>
    2560:	9e 01       	movw	r18, r28
    2562:	a6 01       	movw	r20, r12
    2564:	b7 01       	movw	r22, r14
    2566:	c5 01       	movw	r24, r10
    2568:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <conv_brk>
    256c:	ec 01       	movw	r28, r24
    256e:	89 2b       	or	r24, r25
    2570:	09 f0       	breq	.+2      	; 0x2574 <vfscanf+0x1a0>
    2572:	5a c0       	rjmp	.+180    	; 0x2628 <vfscanf+0x254>
    2574:	54 c0       	rjmp	.+168    	; 0x261e <vfscanf+0x24a>
    2576:	c5 01       	movw	r24, r10
    2578:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <skip_spaces>
    257c:	97 fd       	sbrc	r25, 7
    257e:	58 c0       	rjmp	.+176    	; 0x2630 <vfscanf+0x25c>
    2580:	1f 36       	cpi	r17, 0x6F	; 111
    2582:	e1 f1       	breq	.+120    	; 0x25fc <vfscanf+0x228>
    2584:	40 f4       	brcc	.+16     	; 0x2596 <vfscanf+0x1c2>
    2586:	14 36       	cpi	r17, 0x64	; 100
    2588:	a9 f1       	breq	.+106    	; 0x25f4 <vfscanf+0x220>
    258a:	19 36       	cpi	r17, 0x69	; 105
    258c:	d1 f1       	breq	.+116    	; 0x2602 <vfscanf+0x22e>
    258e:	18 35       	cpi	r17, 0x58	; 88
    2590:	09 f0       	breq	.+2      	; 0x2594 <vfscanf+0x1c0>
    2592:	3e c0       	rjmp	.+124    	; 0x2610 <vfscanf+0x23c>
    2594:	2b c0       	rjmp	.+86     	; 0x25ec <vfscanf+0x218>
    2596:	13 37       	cpi	r17, 0x73	; 115
    2598:	a9 f0       	breq	.+42     	; 0x25c4 <vfscanf+0x1f0>
    259a:	18 f4       	brcc	.+6      	; 0x25a2 <vfscanf+0x1ce>
    259c:	10 37       	cpi	r17, 0x70	; 112
    259e:	31 f1       	breq	.+76     	; 0x25ec <vfscanf+0x218>
    25a0:	37 c0       	rjmp	.+110    	; 0x2610 <vfscanf+0x23c>
    25a2:	15 37       	cpi	r17, 0x75	; 117
    25a4:	39 f1       	breq	.+78     	; 0x25f4 <vfscanf+0x220>
    25a6:	18 37       	cpi	r17, 0x78	; 120
    25a8:	09 f1       	breq	.+66     	; 0x25ec <vfscanf+0x218>
    25aa:	32 c0       	rjmp	.+100    	; 0x2610 <vfscanf+0x23c>
    25ac:	c1 14       	cp	r12, r1
    25ae:	d1 04       	cpc	r13, r1
    25b0:	29 f0       	breq	.+10     	; 0x25bc <vfscanf+0x1e8>
    25b2:	f6 01       	movw	r30, r12
    25b4:	00 83       	st	Z, r16
    25b6:	c6 01       	movw	r24, r12
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	6c 01       	movw	r12, r24
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	e9 1a       	sub	r14, r25
    25c0:	f1 08       	sbc	r15, r1
    25c2:	71 f0       	breq	.+28     	; 0x25e0 <vfscanf+0x20c>
    25c4:	c5 01       	movw	r24, r10
    25c6:	0e 94 43 19 	call	0x3286	; 0x3286 <fgetc>
    25ca:	8c 01       	movw	r16, r24
    25cc:	97 fd       	sbrc	r25, 7
    25ce:	08 c0       	rjmp	.+16     	; 0x25e0 <vfscanf+0x20c>
    25d0:	0e 94 01 19 	call	0x3202	; 0x3202 <isspace>
    25d4:	89 2b       	or	r24, r25
    25d6:	51 f3       	breq	.-44     	; 0x25ac <vfscanf+0x1d8>
    25d8:	b5 01       	movw	r22, r10
    25da:	c8 01       	movw	r24, r16
    25dc:	0e 94 e6 19 	call	0x33cc	; 0x33cc <ungetc>
    25e0:	c1 14       	cp	r12, r1
    25e2:	d1 04       	cpc	r13, r1
    25e4:	09 f1       	breq	.+66     	; 0x2628 <vfscanf+0x254>
    25e6:	f6 01       	movw	r30, r12
    25e8:	10 82       	st	Z, r1
    25ea:	1e c0       	rjmp	.+60     	; 0x2628 <vfscanf+0x254>
    25ec:	f7 2d       	mov	r31, r7
    25ee:	f0 64       	ori	r31, 0x40	; 64
    25f0:	7f 2e       	mov	r7, r31
    25f2:	07 c0       	rjmp	.+14     	; 0x2602 <vfscanf+0x22e>
    25f4:	87 2d       	mov	r24, r7
    25f6:	80 62       	ori	r24, 0x20	; 32
    25f8:	78 2e       	mov	r7, r24
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <vfscanf+0x22e>
    25fc:	97 2d       	mov	r25, r7
    25fe:	90 61       	ori	r25, 0x10	; 16
    2600:	79 2e       	mov	r7, r25
    2602:	27 2d       	mov	r18, r7
    2604:	a6 01       	movw	r20, r12
    2606:	b7 01       	movw	r22, r14
    2608:	c5 01       	movw	r24, r10
    260a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <conv_int>
    260e:	05 c0       	rjmp	.+10     	; 0x261a <vfscanf+0x246>
    2610:	a6 01       	movw	r20, r12
    2612:	b7 01       	movw	r22, r14
    2614:	c5 01       	movw	r24, r10
    2616:	0e 94 a6 10 	call	0x214c	; 0x214c <conv_flt>
    261a:	81 11       	cpse	r24, r1
    261c:	05 c0       	rjmp	.+10     	; 0x2628 <vfscanf+0x254>
    261e:	f5 01       	movw	r30, r10
    2620:	83 81       	ldd	r24, Z+3	; 0x03
    2622:	80 73       	andi	r24, 0x30	; 48
    2624:	29 f4       	brne	.+10     	; 0x2630 <vfscanf+0x25c>
    2626:	06 c0       	rjmp	.+12     	; 0x2634 <vfscanf+0x260>
    2628:	70 fc       	sbrc	r7, 0
    262a:	e9 ce       	rjmp	.-558    	; 0x23fe <vfscanf+0x2a>
    262c:	63 94       	inc	r6
    262e:	e7 ce       	rjmp	.-562    	; 0x23fe <vfscanf+0x2a>
    2630:	66 20       	and	r6, r6
    2632:	19 f0       	breq	.+6      	; 0x263a <vfscanf+0x266>
    2634:	86 2d       	mov	r24, r6
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	02 c0       	rjmp	.+4      	; 0x263e <vfscanf+0x26a>
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	9f ef       	ldi	r25, 0xFF	; 255
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	ef 90       	pop	r14
    264a:	df 90       	pop	r13
    264c:	cf 90       	pop	r12
    264e:	bf 90       	pop	r11
    2650:	af 90       	pop	r10
    2652:	9f 90       	pop	r9
    2654:	8f 90       	pop	r8
    2656:	7f 90       	pop	r7
    2658:	6f 90       	pop	r6
    265a:	08 95       	ret

0000265c <vfprintf>:
    265c:	2f 92       	push	r2
    265e:	3f 92       	push	r3
    2660:	4f 92       	push	r4
    2662:	5f 92       	push	r5
    2664:	6f 92       	push	r6
    2666:	7f 92       	push	r7
    2668:	8f 92       	push	r8
    266a:	9f 92       	push	r9
    266c:	af 92       	push	r10
    266e:	bf 92       	push	r11
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	60 97       	sbiw	r28, 0x10	; 16
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	7c 01       	movw	r14, r24
    268c:	1b 01       	movw	r2, r22
    268e:	6a 01       	movw	r12, r20
    2690:	fc 01       	movw	r30, r24
    2692:	16 82       	std	Z+6, r1	; 0x06
    2694:	17 82       	std	Z+7, r1	; 0x07
    2696:	83 81       	ldd	r24, Z+3	; 0x03
    2698:	81 ff       	sbrs	r24, 1
    269a:	44 c3       	rjmp	.+1672   	; 0x2d24 <vfprintf+0x6c8>
    269c:	9e 01       	movw	r18, r28
    269e:	2f 5f       	subi	r18, 0xFF	; 255
    26a0:	3f 4f       	sbci	r19, 0xFF	; 255
    26a2:	39 01       	movw	r6, r18
    26a4:	f7 01       	movw	r30, r14
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	f1 01       	movw	r30, r2
    26aa:	93 fd       	sbrc	r25, 3
    26ac:	85 91       	lpm	r24, Z+
    26ae:	93 ff       	sbrs	r25, 3
    26b0:	81 91       	ld	r24, Z+
    26b2:	1f 01       	movw	r2, r30
    26b4:	88 23       	and	r24, r24
    26b6:	09 f4       	brne	.+2      	; 0x26ba <vfprintf+0x5e>
    26b8:	31 c3       	rjmp	.+1634   	; 0x2d1c <vfprintf+0x6c0>
    26ba:	85 32       	cpi	r24, 0x25	; 37
    26bc:	39 f4       	brne	.+14     	; 0x26cc <vfprintf+0x70>
    26be:	93 fd       	sbrc	r25, 3
    26c0:	85 91       	lpm	r24, Z+
    26c2:	93 ff       	sbrs	r25, 3
    26c4:	81 91       	ld	r24, Z+
    26c6:	1f 01       	movw	r2, r30
    26c8:	85 32       	cpi	r24, 0x25	; 37
    26ca:	39 f4       	brne	.+14     	; 0x26da <vfprintf+0x7e>
    26cc:	b7 01       	movw	r22, r14
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    26d4:	56 01       	movw	r10, r12
    26d6:	65 01       	movw	r12, r10
    26d8:	e5 cf       	rjmp	.-54     	; 0x26a4 <vfprintf+0x48>
    26da:	10 e0       	ldi	r17, 0x00	; 0
    26dc:	51 2c       	mov	r5, r1
    26de:	91 2c       	mov	r9, r1
    26e0:	ff e1       	ldi	r31, 0x1F	; 31
    26e2:	f9 15       	cp	r31, r9
    26e4:	d8 f0       	brcs	.+54     	; 0x271c <vfprintf+0xc0>
    26e6:	8b 32       	cpi	r24, 0x2B	; 43
    26e8:	79 f0       	breq	.+30     	; 0x2708 <vfprintf+0xac>
    26ea:	38 f4       	brcc	.+14     	; 0x26fa <vfprintf+0x9e>
    26ec:	80 32       	cpi	r24, 0x20	; 32
    26ee:	79 f0       	breq	.+30     	; 0x270e <vfprintf+0xb2>
    26f0:	83 32       	cpi	r24, 0x23	; 35
    26f2:	a1 f4       	brne	.+40     	; 0x271c <vfprintf+0xc0>
    26f4:	f9 2d       	mov	r31, r9
    26f6:	f0 61       	ori	r31, 0x10	; 16
    26f8:	2e c0       	rjmp	.+92     	; 0x2756 <vfprintf+0xfa>
    26fa:	8d 32       	cpi	r24, 0x2D	; 45
    26fc:	61 f0       	breq	.+24     	; 0x2716 <vfprintf+0xba>
    26fe:	80 33       	cpi	r24, 0x30	; 48
    2700:	69 f4       	brne	.+26     	; 0x271c <vfprintf+0xc0>
    2702:	29 2d       	mov	r18, r9
    2704:	21 60       	ori	r18, 0x01	; 1
    2706:	2d c0       	rjmp	.+90     	; 0x2762 <vfprintf+0x106>
    2708:	39 2d       	mov	r19, r9
    270a:	32 60       	ori	r19, 0x02	; 2
    270c:	93 2e       	mov	r9, r19
    270e:	89 2d       	mov	r24, r9
    2710:	84 60       	ori	r24, 0x04	; 4
    2712:	98 2e       	mov	r9, r24
    2714:	2a c0       	rjmp	.+84     	; 0x276a <vfprintf+0x10e>
    2716:	e9 2d       	mov	r30, r9
    2718:	e8 60       	ori	r30, 0x08	; 8
    271a:	15 c0       	rjmp	.+42     	; 0x2746 <vfprintf+0xea>
    271c:	97 fc       	sbrc	r9, 7
    271e:	2d c0       	rjmp	.+90     	; 0x277a <vfprintf+0x11e>
    2720:	20 ed       	ldi	r18, 0xD0	; 208
    2722:	28 0f       	add	r18, r24
    2724:	2a 30       	cpi	r18, 0x0A	; 10
    2726:	88 f4       	brcc	.+34     	; 0x274a <vfprintf+0xee>
    2728:	96 fe       	sbrs	r9, 6
    272a:	06 c0       	rjmp	.+12     	; 0x2738 <vfprintf+0xdc>
    272c:	3a e0       	ldi	r19, 0x0A	; 10
    272e:	13 9f       	mul	r17, r19
    2730:	20 0d       	add	r18, r0
    2732:	11 24       	eor	r1, r1
    2734:	12 2f       	mov	r17, r18
    2736:	19 c0       	rjmp	.+50     	; 0x276a <vfprintf+0x10e>
    2738:	8a e0       	ldi	r24, 0x0A	; 10
    273a:	58 9e       	mul	r5, r24
    273c:	20 0d       	add	r18, r0
    273e:	11 24       	eor	r1, r1
    2740:	52 2e       	mov	r5, r18
    2742:	e9 2d       	mov	r30, r9
    2744:	e0 62       	ori	r30, 0x20	; 32
    2746:	9e 2e       	mov	r9, r30
    2748:	10 c0       	rjmp	.+32     	; 0x276a <vfprintf+0x10e>
    274a:	8e 32       	cpi	r24, 0x2E	; 46
    274c:	31 f4       	brne	.+12     	; 0x275a <vfprintf+0xfe>
    274e:	96 fc       	sbrc	r9, 6
    2750:	e5 c2       	rjmp	.+1482   	; 0x2d1c <vfprintf+0x6c0>
    2752:	f9 2d       	mov	r31, r9
    2754:	f0 64       	ori	r31, 0x40	; 64
    2756:	9f 2e       	mov	r9, r31
    2758:	08 c0       	rjmp	.+16     	; 0x276a <vfprintf+0x10e>
    275a:	8c 36       	cpi	r24, 0x6C	; 108
    275c:	21 f4       	brne	.+8      	; 0x2766 <vfprintf+0x10a>
    275e:	29 2d       	mov	r18, r9
    2760:	20 68       	ori	r18, 0x80	; 128
    2762:	92 2e       	mov	r9, r18
    2764:	02 c0       	rjmp	.+4      	; 0x276a <vfprintf+0x10e>
    2766:	88 36       	cpi	r24, 0x68	; 104
    2768:	41 f4       	brne	.+16     	; 0x277a <vfprintf+0x11e>
    276a:	f1 01       	movw	r30, r2
    276c:	93 fd       	sbrc	r25, 3
    276e:	85 91       	lpm	r24, Z+
    2770:	93 ff       	sbrs	r25, 3
    2772:	81 91       	ld	r24, Z+
    2774:	1f 01       	movw	r2, r30
    2776:	81 11       	cpse	r24, r1
    2778:	b3 cf       	rjmp	.-154    	; 0x26e0 <vfprintf+0x84>
    277a:	9b eb       	ldi	r25, 0xBB	; 187
    277c:	98 0f       	add	r25, r24
    277e:	93 30       	cpi	r25, 0x03	; 3
    2780:	20 f4       	brcc	.+8      	; 0x278a <vfprintf+0x12e>
    2782:	99 2d       	mov	r25, r9
    2784:	90 61       	ori	r25, 0x10	; 16
    2786:	80 5e       	subi	r24, 0xE0	; 224
    2788:	07 c0       	rjmp	.+14     	; 0x2798 <vfprintf+0x13c>
    278a:	9b e9       	ldi	r25, 0x9B	; 155
    278c:	98 0f       	add	r25, r24
    278e:	93 30       	cpi	r25, 0x03	; 3
    2790:	08 f0       	brcs	.+2      	; 0x2794 <vfprintf+0x138>
    2792:	66 c1       	rjmp	.+716    	; 0x2a60 <vfprintf+0x404>
    2794:	99 2d       	mov	r25, r9
    2796:	9f 7e       	andi	r25, 0xEF	; 239
    2798:	96 ff       	sbrs	r25, 6
    279a:	16 e0       	ldi	r17, 0x06	; 6
    279c:	9f 73       	andi	r25, 0x3F	; 63
    279e:	99 2e       	mov	r9, r25
    27a0:	85 36       	cpi	r24, 0x65	; 101
    27a2:	19 f4       	brne	.+6      	; 0x27aa <vfprintf+0x14e>
    27a4:	90 64       	ori	r25, 0x40	; 64
    27a6:	99 2e       	mov	r9, r25
    27a8:	08 c0       	rjmp	.+16     	; 0x27ba <vfprintf+0x15e>
    27aa:	86 36       	cpi	r24, 0x66	; 102
    27ac:	21 f4       	brne	.+8      	; 0x27b6 <vfprintf+0x15a>
    27ae:	39 2f       	mov	r19, r25
    27b0:	30 68       	ori	r19, 0x80	; 128
    27b2:	93 2e       	mov	r9, r19
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <vfprintf+0x15e>
    27b6:	11 11       	cpse	r17, r1
    27b8:	11 50       	subi	r17, 0x01	; 1
    27ba:	97 fe       	sbrs	r9, 7
    27bc:	07 c0       	rjmp	.+14     	; 0x27cc <vfprintf+0x170>
    27be:	1c 33       	cpi	r17, 0x3C	; 60
    27c0:	50 f4       	brcc	.+20     	; 0x27d6 <vfprintf+0x17a>
    27c2:	44 24       	eor	r4, r4
    27c4:	43 94       	inc	r4
    27c6:	41 0e       	add	r4, r17
    27c8:	27 e0       	ldi	r18, 0x07	; 7
    27ca:	0b c0       	rjmp	.+22     	; 0x27e2 <vfprintf+0x186>
    27cc:	18 30       	cpi	r17, 0x08	; 8
    27ce:	38 f0       	brcs	.+14     	; 0x27de <vfprintf+0x182>
    27d0:	27 e0       	ldi	r18, 0x07	; 7
    27d2:	17 e0       	ldi	r17, 0x07	; 7
    27d4:	05 c0       	rjmp	.+10     	; 0x27e0 <vfprintf+0x184>
    27d6:	27 e0       	ldi	r18, 0x07	; 7
    27d8:	9c e3       	ldi	r25, 0x3C	; 60
    27da:	49 2e       	mov	r4, r25
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <vfprintf+0x186>
    27de:	21 2f       	mov	r18, r17
    27e0:	41 2c       	mov	r4, r1
    27e2:	56 01       	movw	r10, r12
    27e4:	84 e0       	ldi	r24, 0x04	; 4
    27e6:	a8 0e       	add	r10, r24
    27e8:	b1 1c       	adc	r11, r1
    27ea:	f6 01       	movw	r30, r12
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	04 2d       	mov	r16, r4
    27f6:	a3 01       	movw	r20, r6
    27f8:	0e 94 29 18 	call	0x3052	; 0x3052 <__ftoa_engine>
    27fc:	6c 01       	movw	r12, r24
    27fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2800:	fc 87       	std	Y+12, r31	; 0x0c
    2802:	f0 ff       	sbrs	r31, 0
    2804:	02 c0       	rjmp	.+4      	; 0x280a <vfprintf+0x1ae>
    2806:	f3 ff       	sbrs	r31, 3
    2808:	06 c0       	rjmp	.+12     	; 0x2816 <vfprintf+0x1ba>
    280a:	91 fc       	sbrc	r9, 1
    280c:	06 c0       	rjmp	.+12     	; 0x281a <vfprintf+0x1be>
    280e:	92 fe       	sbrs	r9, 2
    2810:	06 c0       	rjmp	.+12     	; 0x281e <vfprintf+0x1c2>
    2812:	00 e2       	ldi	r16, 0x20	; 32
    2814:	05 c0       	rjmp	.+10     	; 0x2820 <vfprintf+0x1c4>
    2816:	0d e2       	ldi	r16, 0x2D	; 45
    2818:	03 c0       	rjmp	.+6      	; 0x2820 <vfprintf+0x1c4>
    281a:	0b e2       	ldi	r16, 0x2B	; 43
    281c:	01 c0       	rjmp	.+2      	; 0x2820 <vfprintf+0x1c4>
    281e:	00 e0       	ldi	r16, 0x00	; 0
    2820:	8c 85       	ldd	r24, Y+12	; 0x0c
    2822:	8c 70       	andi	r24, 0x0C	; 12
    2824:	19 f0       	breq	.+6      	; 0x282c <vfprintf+0x1d0>
    2826:	01 11       	cpse	r16, r1
    2828:	5a c2       	rjmp	.+1204   	; 0x2cde <vfprintf+0x682>
    282a:	9b c2       	rjmp	.+1334   	; 0x2d62 <vfprintf+0x706>
    282c:	97 fe       	sbrs	r9, 7
    282e:	10 c0       	rjmp	.+32     	; 0x2850 <vfprintf+0x1f4>
    2830:	4c 0c       	add	r4, r12
    2832:	fc 85       	ldd	r31, Y+12	; 0x0c
    2834:	f4 ff       	sbrs	r31, 4
    2836:	04 c0       	rjmp	.+8      	; 0x2840 <vfprintf+0x1e4>
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	81 33       	cpi	r24, 0x31	; 49
    283c:	09 f4       	brne	.+2      	; 0x2840 <vfprintf+0x1e4>
    283e:	4a 94       	dec	r4
    2840:	14 14       	cp	r1, r4
    2842:	74 f5       	brge	.+92     	; 0x28a0 <vfprintf+0x244>
    2844:	28 e0       	ldi	r18, 0x08	; 8
    2846:	24 15       	cp	r18, r4
    2848:	78 f5       	brcc	.+94     	; 0x28a8 <vfprintf+0x24c>
    284a:	88 e0       	ldi	r24, 0x08	; 8
    284c:	48 2e       	mov	r4, r24
    284e:	2c c0       	rjmp	.+88     	; 0x28a8 <vfprintf+0x24c>
    2850:	96 fc       	sbrc	r9, 6
    2852:	2a c0       	rjmp	.+84     	; 0x28a8 <vfprintf+0x24c>
    2854:	81 2f       	mov	r24, r17
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	8c 15       	cp	r24, r12
    285a:	9d 05       	cpc	r25, r13
    285c:	9c f0       	brlt	.+38     	; 0x2884 <vfprintf+0x228>
    285e:	3c ef       	ldi	r19, 0xFC	; 252
    2860:	c3 16       	cp	r12, r19
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	d3 06       	cpc	r13, r19
    2866:	74 f0       	brlt	.+28     	; 0x2884 <vfprintf+0x228>
    2868:	89 2d       	mov	r24, r9
    286a:	80 68       	ori	r24, 0x80	; 128
    286c:	98 2e       	mov	r9, r24
    286e:	0a c0       	rjmp	.+20     	; 0x2884 <vfprintf+0x228>
    2870:	e2 e0       	ldi	r30, 0x02	; 2
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	ec 0f       	add	r30, r28
    2876:	fd 1f       	adc	r31, r29
    2878:	e1 0f       	add	r30, r17
    287a:	f1 1d       	adc	r31, r1
    287c:	80 81       	ld	r24, Z
    287e:	80 33       	cpi	r24, 0x30	; 48
    2880:	19 f4       	brne	.+6      	; 0x2888 <vfprintf+0x22c>
    2882:	11 50       	subi	r17, 0x01	; 1
    2884:	11 11       	cpse	r17, r1
    2886:	f4 cf       	rjmp	.-24     	; 0x2870 <vfprintf+0x214>
    2888:	97 fe       	sbrs	r9, 7
    288a:	0e c0       	rjmp	.+28     	; 0x28a8 <vfprintf+0x24c>
    288c:	44 24       	eor	r4, r4
    288e:	43 94       	inc	r4
    2890:	41 0e       	add	r4, r17
    2892:	81 2f       	mov	r24, r17
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	c8 16       	cp	r12, r24
    2898:	d9 06       	cpc	r13, r25
    289a:	2c f4       	brge	.+10     	; 0x28a6 <vfprintf+0x24a>
    289c:	1c 19       	sub	r17, r12
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <vfprintf+0x24c>
    28a0:	44 24       	eor	r4, r4
    28a2:	43 94       	inc	r4
    28a4:	01 c0       	rjmp	.+2      	; 0x28a8 <vfprintf+0x24c>
    28a6:	10 e0       	ldi	r17, 0x00	; 0
    28a8:	97 fe       	sbrs	r9, 7
    28aa:	06 c0       	rjmp	.+12     	; 0x28b8 <vfprintf+0x25c>
    28ac:	1c 14       	cp	r1, r12
    28ae:	1d 04       	cpc	r1, r13
    28b0:	34 f4       	brge	.+12     	; 0x28be <vfprintf+0x262>
    28b2:	c6 01       	movw	r24, r12
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	05 c0       	rjmp	.+10     	; 0x28c2 <vfprintf+0x266>
    28b8:	85 e0       	ldi	r24, 0x05	; 5
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <vfprintf+0x266>
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	01 11       	cpse	r16, r1
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	11 23       	and	r17, r17
    28c8:	31 f0       	breq	.+12     	; 0x28d6 <vfprintf+0x27a>
    28ca:	21 2f       	mov	r18, r17
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	2f 5f       	subi	r18, 0xFF	; 255
    28d0:	3f 4f       	sbci	r19, 0xFF	; 255
    28d2:	82 0f       	add	r24, r18
    28d4:	93 1f       	adc	r25, r19
    28d6:	25 2d       	mov	r18, r5
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	82 17       	cp	r24, r18
    28dc:	93 07       	cpc	r25, r19
    28de:	14 f4       	brge	.+4      	; 0x28e4 <vfprintf+0x288>
    28e0:	58 1a       	sub	r5, r24
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <vfprintf+0x28a>
    28e4:	51 2c       	mov	r5, r1
    28e6:	89 2d       	mov	r24, r9
    28e8:	89 70       	andi	r24, 0x09	; 9
    28ea:	49 f4       	brne	.+18     	; 0x28fe <vfprintf+0x2a2>
    28ec:	55 20       	and	r5, r5
    28ee:	39 f0       	breq	.+14     	; 0x28fe <vfprintf+0x2a2>
    28f0:	b7 01       	movw	r22, r14
    28f2:	80 e2       	ldi	r24, 0x20	; 32
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    28fa:	5a 94       	dec	r5
    28fc:	f7 cf       	rjmp	.-18     	; 0x28ec <vfprintf+0x290>
    28fe:	00 23       	and	r16, r16
    2900:	29 f0       	breq	.+10     	; 0x290c <vfprintf+0x2b0>
    2902:	b7 01       	movw	r22, r14
    2904:	80 2f       	mov	r24, r16
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    290c:	93 fc       	sbrc	r9, 3
    290e:	09 c0       	rjmp	.+18     	; 0x2922 <vfprintf+0x2c6>
    2910:	55 20       	and	r5, r5
    2912:	39 f0       	breq	.+14     	; 0x2922 <vfprintf+0x2c6>
    2914:	b7 01       	movw	r22, r14
    2916:	80 e3       	ldi	r24, 0x30	; 48
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    291e:	5a 94       	dec	r5
    2920:	f7 cf       	rjmp	.-18     	; 0x2910 <vfprintf+0x2b4>
    2922:	97 fe       	sbrs	r9, 7
    2924:	4c c0       	rjmp	.+152    	; 0x29be <vfprintf+0x362>
    2926:	46 01       	movw	r8, r12
    2928:	d7 fe       	sbrs	r13, 7
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <vfprintf+0x2d4>
    292c:	81 2c       	mov	r8, r1
    292e:	91 2c       	mov	r9, r1
    2930:	c6 01       	movw	r24, r12
    2932:	88 19       	sub	r24, r8
    2934:	99 09       	sbc	r25, r9
    2936:	f3 01       	movw	r30, r6
    2938:	e8 0f       	add	r30, r24
    293a:	f9 1f       	adc	r31, r25
    293c:	ed 87       	std	Y+13, r30	; 0x0d
    293e:	fe 87       	std	Y+14, r31	; 0x0e
    2940:	96 01       	movw	r18, r12
    2942:	24 19       	sub	r18, r4
    2944:	31 09       	sbc	r19, r1
    2946:	2f 87       	std	Y+15, r18	; 0x0f
    2948:	38 8b       	std	Y+16, r19	; 0x10
    294a:	01 2f       	mov	r16, r17
    294c:	10 e0       	ldi	r17, 0x00	; 0
    294e:	11 95       	neg	r17
    2950:	01 95       	neg	r16
    2952:	11 09       	sbc	r17, r1
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	83 16       	cp	r8, r19
    2958:	93 06       	cpc	r9, r19
    295a:	29 f4       	brne	.+10     	; 0x2966 <vfprintf+0x30a>
    295c:	b7 01       	movw	r22, r14
    295e:	8e e2       	ldi	r24, 0x2E	; 46
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2966:	c8 14       	cp	r12, r8
    2968:	d9 04       	cpc	r13, r9
    296a:	4c f0       	brlt	.+18     	; 0x297e <vfprintf+0x322>
    296c:	8f 85       	ldd	r24, Y+15	; 0x0f
    296e:	98 89       	ldd	r25, Y+16	; 0x10
    2970:	88 15       	cp	r24, r8
    2972:	99 05       	cpc	r25, r9
    2974:	24 f4       	brge	.+8      	; 0x297e <vfprintf+0x322>
    2976:	ed 85       	ldd	r30, Y+13	; 0x0d
    2978:	fe 85       	ldd	r31, Y+14	; 0x0e
    297a:	81 81       	ldd	r24, Z+1	; 0x01
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <vfprintf+0x324>
    297e:	80 e3       	ldi	r24, 0x30	; 48
    2980:	f1 e0       	ldi	r31, 0x01	; 1
    2982:	8f 1a       	sub	r8, r31
    2984:	91 08       	sbc	r9, r1
    2986:	2d 85       	ldd	r18, Y+13	; 0x0d
    2988:	3e 85       	ldd	r19, Y+14	; 0x0e
    298a:	2f 5f       	subi	r18, 0xFF	; 255
    298c:	3f 4f       	sbci	r19, 0xFF	; 255
    298e:	2d 87       	std	Y+13, r18	; 0x0d
    2990:	3e 87       	std	Y+14, r19	; 0x0e
    2992:	80 16       	cp	r8, r16
    2994:	91 06       	cpc	r9, r17
    2996:	2c f0       	brlt	.+10     	; 0x29a2 <vfprintf+0x346>
    2998:	b7 01       	movw	r22, r14
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    29a0:	d9 cf       	rjmp	.-78     	; 0x2954 <vfprintf+0x2f8>
    29a2:	c8 14       	cp	r12, r8
    29a4:	d9 04       	cpc	r13, r9
    29a6:	41 f4       	brne	.+16     	; 0x29b8 <vfprintf+0x35c>
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	96 33       	cpi	r25, 0x36	; 54
    29ac:	20 f4       	brcc	.+8      	; 0x29b6 <vfprintf+0x35a>
    29ae:	95 33       	cpi	r25, 0x35	; 53
    29b0:	19 f4       	brne	.+6      	; 0x29b8 <vfprintf+0x35c>
    29b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    29b4:	34 ff       	sbrs	r19, 4
    29b6:	81 e3       	ldi	r24, 0x31	; 49
    29b8:	b7 01       	movw	r22, r14
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	4e c0       	rjmp	.+156    	; 0x2a5a <vfprintf+0x3fe>
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	81 33       	cpi	r24, 0x31	; 49
    29c2:	19 f0       	breq	.+6      	; 0x29ca <vfprintf+0x36e>
    29c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    29c6:	9f 7e       	andi	r25, 0xEF	; 239
    29c8:	9c 87       	std	Y+12, r25	; 0x0c
    29ca:	b7 01       	movw	r22, r14
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    29d2:	11 11       	cpse	r17, r1
    29d4:	05 c0       	rjmp	.+10     	; 0x29e0 <vfprintf+0x384>
    29d6:	94 fc       	sbrc	r9, 4
    29d8:	18 c0       	rjmp	.+48     	; 0x2a0a <vfprintf+0x3ae>
    29da:	85 e6       	ldi	r24, 0x65	; 101
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	17 c0       	rjmp	.+46     	; 0x2a0e <vfprintf+0x3b2>
    29e0:	b7 01       	movw	r22, r14
    29e2:	8e e2       	ldi	r24, 0x2E	; 46
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    29ea:	1e 5f       	subi	r17, 0xFE	; 254
    29ec:	82 e0       	ldi	r24, 0x02	; 2
    29ee:	01 e0       	ldi	r16, 0x01	; 1
    29f0:	08 0f       	add	r16, r24
    29f2:	f3 01       	movw	r30, r6
    29f4:	e8 0f       	add	r30, r24
    29f6:	f1 1d       	adc	r31, r1
    29f8:	80 81       	ld	r24, Z
    29fa:	b7 01       	movw	r22, r14
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a02:	80 2f       	mov	r24, r16
    2a04:	01 13       	cpse	r16, r17
    2a06:	f3 cf       	rjmp	.-26     	; 0x29ee <vfprintf+0x392>
    2a08:	e6 cf       	rjmp	.-52     	; 0x29d6 <vfprintf+0x37a>
    2a0a:	85 e4       	ldi	r24, 0x45	; 69
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	b7 01       	movw	r22, r14
    2a10:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a14:	d7 fc       	sbrc	r13, 7
    2a16:	06 c0       	rjmp	.+12     	; 0x2a24 <vfprintf+0x3c8>
    2a18:	c1 14       	cp	r12, r1
    2a1a:	d1 04       	cpc	r13, r1
    2a1c:	41 f4       	brne	.+16     	; 0x2a2e <vfprintf+0x3d2>
    2a1e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a20:	e4 ff       	sbrs	r30, 4
    2a22:	05 c0       	rjmp	.+10     	; 0x2a2e <vfprintf+0x3d2>
    2a24:	d1 94       	neg	r13
    2a26:	c1 94       	neg	r12
    2a28:	d1 08       	sbc	r13, r1
    2a2a:	8d e2       	ldi	r24, 0x2D	; 45
    2a2c:	01 c0       	rjmp	.+2      	; 0x2a30 <vfprintf+0x3d4>
    2a2e:	8b e2       	ldi	r24, 0x2B	; 43
    2a30:	b7 01       	movw	r22, r14
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a38:	80 e3       	ldi	r24, 0x30	; 48
    2a3a:	2a e0       	ldi	r18, 0x0A	; 10
    2a3c:	c2 16       	cp	r12, r18
    2a3e:	d1 04       	cpc	r13, r1
    2a40:	2c f0       	brlt	.+10     	; 0x2a4c <vfprintf+0x3f0>
    2a42:	8f 5f       	subi	r24, 0xFF	; 255
    2a44:	fa e0       	ldi	r31, 0x0A	; 10
    2a46:	cf 1a       	sub	r12, r31
    2a48:	d1 08       	sbc	r13, r1
    2a4a:	f7 cf       	rjmp	.-18     	; 0x2a3a <vfprintf+0x3de>
    2a4c:	b7 01       	movw	r22, r14
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a54:	b7 01       	movw	r22, r14
    2a56:	c6 01       	movw	r24, r12
    2a58:	c0 96       	adiw	r24, 0x30	; 48
    2a5a:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a5e:	54 c1       	rjmp	.+680    	; 0x2d08 <vfprintf+0x6ac>
    2a60:	83 36       	cpi	r24, 0x63	; 99
    2a62:	31 f0       	breq	.+12     	; 0x2a70 <vfprintf+0x414>
    2a64:	83 37       	cpi	r24, 0x73	; 115
    2a66:	79 f0       	breq	.+30     	; 0x2a86 <vfprintf+0x42a>
    2a68:	83 35       	cpi	r24, 0x53	; 83
    2a6a:	09 f0       	breq	.+2      	; 0x2a6e <vfprintf+0x412>
    2a6c:	56 c0       	rjmp	.+172    	; 0x2b1a <vfprintf+0x4be>
    2a6e:	20 c0       	rjmp	.+64     	; 0x2ab0 <vfprintf+0x454>
    2a70:	56 01       	movw	r10, r12
    2a72:	32 e0       	ldi	r19, 0x02	; 2
    2a74:	a3 0e       	add	r10, r19
    2a76:	b1 1c       	adc	r11, r1
    2a78:	f6 01       	movw	r30, r12
    2a7a:	80 81       	ld	r24, Z
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	01 e0       	ldi	r16, 0x01	; 1
    2a80:	10 e0       	ldi	r17, 0x00	; 0
    2a82:	63 01       	movw	r12, r6
    2a84:	12 c0       	rjmp	.+36     	; 0x2aaa <vfprintf+0x44e>
    2a86:	56 01       	movw	r10, r12
    2a88:	f2 e0       	ldi	r31, 0x02	; 2
    2a8a:	af 0e       	add	r10, r31
    2a8c:	b1 1c       	adc	r11, r1
    2a8e:	f6 01       	movw	r30, r12
    2a90:	c0 80       	ld	r12, Z
    2a92:	d1 80       	ldd	r13, Z+1	; 0x01
    2a94:	96 fe       	sbrs	r9, 6
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <vfprintf+0x442>
    2a98:	61 2f       	mov	r22, r17
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <vfprintf+0x446>
    2a9e:	6f ef       	ldi	r22, 0xFF	; 255
    2aa0:	7f ef       	ldi	r23, 0xFF	; 255
    2aa2:	c6 01       	movw	r24, r12
    2aa4:	0e 94 38 19 	call	0x3270	; 0x3270 <strnlen>
    2aa8:	8c 01       	movw	r16, r24
    2aaa:	f9 2d       	mov	r31, r9
    2aac:	ff 77       	andi	r31, 0x7F	; 127
    2aae:	14 c0       	rjmp	.+40     	; 0x2ad8 <vfprintf+0x47c>
    2ab0:	56 01       	movw	r10, r12
    2ab2:	22 e0       	ldi	r18, 0x02	; 2
    2ab4:	a2 0e       	add	r10, r18
    2ab6:	b1 1c       	adc	r11, r1
    2ab8:	f6 01       	movw	r30, r12
    2aba:	c0 80       	ld	r12, Z
    2abc:	d1 80       	ldd	r13, Z+1	; 0x01
    2abe:	96 fe       	sbrs	r9, 6
    2ac0:	03 c0       	rjmp	.+6      	; 0x2ac8 <vfprintf+0x46c>
    2ac2:	61 2f       	mov	r22, r17
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <vfprintf+0x470>
    2ac8:	6f ef       	ldi	r22, 0xFF	; 255
    2aca:	7f ef       	ldi	r23, 0xFF	; 255
    2acc:	c6 01       	movw	r24, r12
    2ace:	0e 94 1d 19 	call	0x323a	; 0x323a <strnlen_P>
    2ad2:	8c 01       	movw	r16, r24
    2ad4:	f9 2d       	mov	r31, r9
    2ad6:	f0 68       	ori	r31, 0x80	; 128
    2ad8:	9f 2e       	mov	r9, r31
    2ada:	f3 fd       	sbrc	r31, 3
    2adc:	1a c0       	rjmp	.+52     	; 0x2b12 <vfprintf+0x4b6>
    2ade:	85 2d       	mov	r24, r5
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	08 17       	cp	r16, r24
    2ae4:	19 07       	cpc	r17, r25
    2ae6:	a8 f4       	brcc	.+42     	; 0x2b12 <vfprintf+0x4b6>
    2ae8:	b7 01       	movw	r22, r14
    2aea:	80 e2       	ldi	r24, 0x20	; 32
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2af2:	5a 94       	dec	r5
    2af4:	f4 cf       	rjmp	.-24     	; 0x2ade <vfprintf+0x482>
    2af6:	f6 01       	movw	r30, r12
    2af8:	97 fc       	sbrc	r9, 7
    2afa:	85 91       	lpm	r24, Z+
    2afc:	97 fe       	sbrs	r9, 7
    2afe:	81 91       	ld	r24, Z+
    2b00:	6f 01       	movw	r12, r30
    2b02:	b7 01       	movw	r22, r14
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b0a:	51 10       	cpse	r5, r1
    2b0c:	5a 94       	dec	r5
    2b0e:	01 50       	subi	r16, 0x01	; 1
    2b10:	11 09       	sbc	r17, r1
    2b12:	01 15       	cp	r16, r1
    2b14:	11 05       	cpc	r17, r1
    2b16:	79 f7       	brne	.-34     	; 0x2af6 <vfprintf+0x49a>
    2b18:	f7 c0       	rjmp	.+494    	; 0x2d08 <vfprintf+0x6ac>
    2b1a:	84 36       	cpi	r24, 0x64	; 100
    2b1c:	11 f0       	breq	.+4      	; 0x2b22 <vfprintf+0x4c6>
    2b1e:	89 36       	cpi	r24, 0x69	; 105
    2b20:	61 f5       	brne	.+88     	; 0x2b7a <vfprintf+0x51e>
    2b22:	56 01       	movw	r10, r12
    2b24:	97 fe       	sbrs	r9, 7
    2b26:	09 c0       	rjmp	.+18     	; 0x2b3a <vfprintf+0x4de>
    2b28:	24 e0       	ldi	r18, 0x04	; 4
    2b2a:	a2 0e       	add	r10, r18
    2b2c:	b1 1c       	adc	r11, r1
    2b2e:	f6 01       	movw	r30, r12
    2b30:	60 81       	ld	r22, Z
    2b32:	71 81       	ldd	r23, Z+1	; 0x01
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	93 81       	ldd	r25, Z+3	; 0x03
    2b38:	0a c0       	rjmp	.+20     	; 0x2b4e <vfprintf+0x4f2>
    2b3a:	f2 e0       	ldi	r31, 0x02	; 2
    2b3c:	af 0e       	add	r10, r31
    2b3e:	b1 1c       	adc	r11, r1
    2b40:	f6 01       	movw	r30, r12
    2b42:	60 81       	ld	r22, Z
    2b44:	71 81       	ldd	r23, Z+1	; 0x01
    2b46:	07 2e       	mov	r0, r23
    2b48:	00 0c       	add	r0, r0
    2b4a:	88 0b       	sbc	r24, r24
    2b4c:	99 0b       	sbc	r25, r25
    2b4e:	f9 2d       	mov	r31, r9
    2b50:	ff 76       	andi	r31, 0x6F	; 111
    2b52:	9f 2e       	mov	r9, r31
    2b54:	97 ff       	sbrs	r25, 7
    2b56:	09 c0       	rjmp	.+18     	; 0x2b6a <vfprintf+0x50e>
    2b58:	90 95       	com	r25
    2b5a:	80 95       	com	r24
    2b5c:	70 95       	com	r23
    2b5e:	61 95       	neg	r22
    2b60:	7f 4f       	sbci	r23, 0xFF	; 255
    2b62:	8f 4f       	sbci	r24, 0xFF	; 255
    2b64:	9f 4f       	sbci	r25, 0xFF	; 255
    2b66:	f0 68       	ori	r31, 0x80	; 128
    2b68:	9f 2e       	mov	r9, r31
    2b6a:	2a e0       	ldi	r18, 0x0A	; 10
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	a3 01       	movw	r20, r6
    2b70:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__ultoa_invert>
    2b74:	c8 2e       	mov	r12, r24
    2b76:	c6 18       	sub	r12, r6
    2b78:	3f c0       	rjmp	.+126    	; 0x2bf8 <vfprintf+0x59c>
    2b7a:	09 2d       	mov	r16, r9
    2b7c:	85 37       	cpi	r24, 0x75	; 117
    2b7e:	21 f4       	brne	.+8      	; 0x2b88 <vfprintf+0x52c>
    2b80:	0f 7e       	andi	r16, 0xEF	; 239
    2b82:	2a e0       	ldi	r18, 0x0A	; 10
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	1d c0       	rjmp	.+58     	; 0x2bc2 <vfprintf+0x566>
    2b88:	09 7f       	andi	r16, 0xF9	; 249
    2b8a:	8f 36       	cpi	r24, 0x6F	; 111
    2b8c:	91 f0       	breq	.+36     	; 0x2bb2 <vfprintf+0x556>
    2b8e:	18 f4       	brcc	.+6      	; 0x2b96 <vfprintf+0x53a>
    2b90:	88 35       	cpi	r24, 0x58	; 88
    2b92:	59 f0       	breq	.+22     	; 0x2baa <vfprintf+0x54e>
    2b94:	c3 c0       	rjmp	.+390    	; 0x2d1c <vfprintf+0x6c0>
    2b96:	80 37       	cpi	r24, 0x70	; 112
    2b98:	19 f0       	breq	.+6      	; 0x2ba0 <vfprintf+0x544>
    2b9a:	88 37       	cpi	r24, 0x78	; 120
    2b9c:	11 f0       	breq	.+4      	; 0x2ba2 <vfprintf+0x546>
    2b9e:	be c0       	rjmp	.+380    	; 0x2d1c <vfprintf+0x6c0>
    2ba0:	00 61       	ori	r16, 0x10	; 16
    2ba2:	04 ff       	sbrs	r16, 4
    2ba4:	09 c0       	rjmp	.+18     	; 0x2bb8 <vfprintf+0x55c>
    2ba6:	04 60       	ori	r16, 0x04	; 4
    2ba8:	07 c0       	rjmp	.+14     	; 0x2bb8 <vfprintf+0x55c>
    2baa:	94 fe       	sbrs	r9, 4
    2bac:	08 c0       	rjmp	.+16     	; 0x2bbe <vfprintf+0x562>
    2bae:	06 60       	ori	r16, 0x06	; 6
    2bb0:	06 c0       	rjmp	.+12     	; 0x2bbe <vfprintf+0x562>
    2bb2:	28 e0       	ldi	r18, 0x08	; 8
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	05 c0       	rjmp	.+10     	; 0x2bc2 <vfprintf+0x566>
    2bb8:	20 e1       	ldi	r18, 0x10	; 16
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <vfprintf+0x566>
    2bbe:	20 e1       	ldi	r18, 0x10	; 16
    2bc0:	32 e0       	ldi	r19, 0x02	; 2
    2bc2:	56 01       	movw	r10, r12
    2bc4:	07 ff       	sbrs	r16, 7
    2bc6:	09 c0       	rjmp	.+18     	; 0x2bda <vfprintf+0x57e>
    2bc8:	84 e0       	ldi	r24, 0x04	; 4
    2bca:	a8 0e       	add	r10, r24
    2bcc:	b1 1c       	adc	r11, r1
    2bce:	f6 01       	movw	r30, r12
    2bd0:	60 81       	ld	r22, Z
    2bd2:	71 81       	ldd	r23, Z+1	; 0x01
    2bd4:	82 81       	ldd	r24, Z+2	; 0x02
    2bd6:	93 81       	ldd	r25, Z+3	; 0x03
    2bd8:	08 c0       	rjmp	.+16     	; 0x2bea <vfprintf+0x58e>
    2bda:	f2 e0       	ldi	r31, 0x02	; 2
    2bdc:	af 0e       	add	r10, r31
    2bde:	b1 1c       	adc	r11, r1
    2be0:	f6 01       	movw	r30, r12
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	a3 01       	movw	r20, r6
    2bec:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__ultoa_invert>
    2bf0:	c8 2e       	mov	r12, r24
    2bf2:	c6 18       	sub	r12, r6
    2bf4:	0f 77       	andi	r16, 0x7F	; 127
    2bf6:	90 2e       	mov	r9, r16
    2bf8:	96 fe       	sbrs	r9, 6
    2bfa:	0b c0       	rjmp	.+22     	; 0x2c12 <vfprintf+0x5b6>
    2bfc:	09 2d       	mov	r16, r9
    2bfe:	0e 7f       	andi	r16, 0xFE	; 254
    2c00:	c1 16       	cp	r12, r17
    2c02:	50 f4       	brcc	.+20     	; 0x2c18 <vfprintf+0x5bc>
    2c04:	94 fe       	sbrs	r9, 4
    2c06:	0a c0       	rjmp	.+20     	; 0x2c1c <vfprintf+0x5c0>
    2c08:	92 fc       	sbrc	r9, 2
    2c0a:	08 c0       	rjmp	.+16     	; 0x2c1c <vfprintf+0x5c0>
    2c0c:	09 2d       	mov	r16, r9
    2c0e:	0e 7e       	andi	r16, 0xEE	; 238
    2c10:	05 c0       	rjmp	.+10     	; 0x2c1c <vfprintf+0x5c0>
    2c12:	dc 2c       	mov	r13, r12
    2c14:	09 2d       	mov	r16, r9
    2c16:	03 c0       	rjmp	.+6      	; 0x2c1e <vfprintf+0x5c2>
    2c18:	dc 2c       	mov	r13, r12
    2c1a:	01 c0       	rjmp	.+2      	; 0x2c1e <vfprintf+0x5c2>
    2c1c:	d1 2e       	mov	r13, r17
    2c1e:	04 ff       	sbrs	r16, 4
    2c20:	0d c0       	rjmp	.+26     	; 0x2c3c <vfprintf+0x5e0>
    2c22:	fe 01       	movw	r30, r28
    2c24:	ec 0d       	add	r30, r12
    2c26:	f1 1d       	adc	r31, r1
    2c28:	80 81       	ld	r24, Z
    2c2a:	80 33       	cpi	r24, 0x30	; 48
    2c2c:	11 f4       	brne	.+4      	; 0x2c32 <vfprintf+0x5d6>
    2c2e:	09 7e       	andi	r16, 0xE9	; 233
    2c30:	09 c0       	rjmp	.+18     	; 0x2c44 <vfprintf+0x5e8>
    2c32:	02 ff       	sbrs	r16, 2
    2c34:	06 c0       	rjmp	.+12     	; 0x2c42 <vfprintf+0x5e6>
    2c36:	d3 94       	inc	r13
    2c38:	d3 94       	inc	r13
    2c3a:	04 c0       	rjmp	.+8      	; 0x2c44 <vfprintf+0x5e8>
    2c3c:	80 2f       	mov	r24, r16
    2c3e:	86 78       	andi	r24, 0x86	; 134
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <vfprintf+0x5e8>
    2c42:	d3 94       	inc	r13
    2c44:	03 fd       	sbrc	r16, 3
    2c46:	11 c0       	rjmp	.+34     	; 0x2c6a <vfprintf+0x60e>
    2c48:	00 ff       	sbrs	r16, 0
    2c4a:	06 c0       	rjmp	.+12     	; 0x2c58 <vfprintf+0x5fc>
    2c4c:	1c 2d       	mov	r17, r12
    2c4e:	d5 14       	cp	r13, r5
    2c50:	80 f4       	brcc	.+32     	; 0x2c72 <vfprintf+0x616>
    2c52:	15 0d       	add	r17, r5
    2c54:	1d 19       	sub	r17, r13
    2c56:	0d c0       	rjmp	.+26     	; 0x2c72 <vfprintf+0x616>
    2c58:	d5 14       	cp	r13, r5
    2c5a:	58 f4       	brcc	.+22     	; 0x2c72 <vfprintf+0x616>
    2c5c:	b7 01       	movw	r22, r14
    2c5e:	80 e2       	ldi	r24, 0x20	; 32
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2c66:	d3 94       	inc	r13
    2c68:	f7 cf       	rjmp	.-18     	; 0x2c58 <vfprintf+0x5fc>
    2c6a:	d5 14       	cp	r13, r5
    2c6c:	10 f4       	brcc	.+4      	; 0x2c72 <vfprintf+0x616>
    2c6e:	5d 18       	sub	r5, r13
    2c70:	01 c0       	rjmp	.+2      	; 0x2c74 <vfprintf+0x618>
    2c72:	51 2c       	mov	r5, r1
    2c74:	04 ff       	sbrs	r16, 4
    2c76:	10 c0       	rjmp	.+32     	; 0x2c98 <vfprintf+0x63c>
    2c78:	b7 01       	movw	r22, r14
    2c7a:	80 e3       	ldi	r24, 0x30	; 48
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2c82:	02 ff       	sbrs	r16, 2
    2c84:	17 c0       	rjmp	.+46     	; 0x2cb4 <vfprintf+0x658>
    2c86:	01 fd       	sbrc	r16, 1
    2c88:	03 c0       	rjmp	.+6      	; 0x2c90 <vfprintf+0x634>
    2c8a:	88 e7       	ldi	r24, 0x78	; 120
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	02 c0       	rjmp	.+4      	; 0x2c94 <vfprintf+0x638>
    2c90:	88 e5       	ldi	r24, 0x58	; 88
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	b7 01       	movw	r22, r14
    2c96:	0c c0       	rjmp	.+24     	; 0x2cb0 <vfprintf+0x654>
    2c98:	80 2f       	mov	r24, r16
    2c9a:	86 78       	andi	r24, 0x86	; 134
    2c9c:	59 f0       	breq	.+22     	; 0x2cb4 <vfprintf+0x658>
    2c9e:	01 ff       	sbrs	r16, 1
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <vfprintf+0x64a>
    2ca2:	8b e2       	ldi	r24, 0x2B	; 43
    2ca4:	01 c0       	rjmp	.+2      	; 0x2ca8 <vfprintf+0x64c>
    2ca6:	80 e2       	ldi	r24, 0x20	; 32
    2ca8:	07 fd       	sbrc	r16, 7
    2caa:	8d e2       	ldi	r24, 0x2D	; 45
    2cac:	b7 01       	movw	r22, r14
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2cb4:	c1 16       	cp	r12, r17
    2cb6:	38 f4       	brcc	.+14     	; 0x2cc6 <vfprintf+0x66a>
    2cb8:	b7 01       	movw	r22, r14
    2cba:	80 e3       	ldi	r24, 0x30	; 48
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2cc2:	11 50       	subi	r17, 0x01	; 1
    2cc4:	f7 cf       	rjmp	.-18     	; 0x2cb4 <vfprintf+0x658>
    2cc6:	ca 94       	dec	r12
    2cc8:	f3 01       	movw	r30, r6
    2cca:	ec 0d       	add	r30, r12
    2ccc:	f1 1d       	adc	r31, r1
    2cce:	80 81       	ld	r24, Z
    2cd0:	b7 01       	movw	r22, r14
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2cd8:	c1 10       	cpse	r12, r1
    2cda:	f5 cf       	rjmp	.-22     	; 0x2cc6 <vfprintf+0x66a>
    2cdc:	15 c0       	rjmp	.+42     	; 0x2d08 <vfprintf+0x6ac>
    2cde:	f4 e0       	ldi	r31, 0x04	; 4
    2ce0:	f5 15       	cp	r31, r5
    2ce2:	60 f5       	brcc	.+88     	; 0x2d3c <vfprintf+0x6e0>
    2ce4:	84 e0       	ldi	r24, 0x04	; 4
    2ce6:	58 1a       	sub	r5, r24
    2ce8:	93 fe       	sbrs	r9, 3
    2cea:	1f c0       	rjmp	.+62     	; 0x2d2a <vfprintf+0x6ce>
    2cec:	01 11       	cpse	r16, r1
    2cee:	27 c0       	rjmp	.+78     	; 0x2d3e <vfprintf+0x6e2>
    2cf0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cf2:	23 ff       	sbrs	r18, 3
    2cf4:	2a c0       	rjmp	.+84     	; 0x2d4a <vfprintf+0x6ee>
    2cf6:	06 e0       	ldi	r16, 0x06	; 6
    2cf8:	11 e0       	ldi	r17, 0x01	; 1
    2cfa:	39 2d       	mov	r19, r9
    2cfc:	30 71       	andi	r19, 0x10	; 16
    2cfe:	93 2e       	mov	r9, r19
    2d00:	f8 01       	movw	r30, r16
    2d02:	84 91       	lpm	r24, Z
    2d04:	81 11       	cpse	r24, r1
    2d06:	24 c0       	rjmp	.+72     	; 0x2d50 <vfprintf+0x6f4>
    2d08:	55 20       	and	r5, r5
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <vfprintf+0x6b2>
    2d0c:	e4 cc       	rjmp	.-1592   	; 0x26d6 <vfprintf+0x7a>
    2d0e:	b7 01       	movw	r22, r14
    2d10:	80 e2       	ldi	r24, 0x20	; 32
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2d18:	5a 94       	dec	r5
    2d1a:	f6 cf       	rjmp	.-20     	; 0x2d08 <vfprintf+0x6ac>
    2d1c:	f7 01       	movw	r30, r14
    2d1e:	86 81       	ldd	r24, Z+6	; 0x06
    2d20:	97 81       	ldd	r25, Z+7	; 0x07
    2d22:	26 c0       	rjmp	.+76     	; 0x2d70 <vfprintf+0x714>
    2d24:	8f ef       	ldi	r24, 0xFF	; 255
    2d26:	9f ef       	ldi	r25, 0xFF	; 255
    2d28:	23 c0       	rjmp	.+70     	; 0x2d70 <vfprintf+0x714>
    2d2a:	b7 01       	movw	r22, r14
    2d2c:	80 e2       	ldi	r24, 0x20	; 32
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2d34:	5a 94       	dec	r5
    2d36:	51 10       	cpse	r5, r1
    2d38:	f8 cf       	rjmp	.-16     	; 0x2d2a <vfprintf+0x6ce>
    2d3a:	d8 cf       	rjmp	.-80     	; 0x2cec <vfprintf+0x690>
    2d3c:	51 2c       	mov	r5, r1
    2d3e:	b7 01       	movw	r22, r14
    2d40:	80 2f       	mov	r24, r16
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2d48:	d3 cf       	rjmp	.-90     	; 0x2cf0 <vfprintf+0x694>
    2d4a:	0a e0       	ldi	r16, 0x0A	; 10
    2d4c:	11 e0       	ldi	r17, 0x01	; 1
    2d4e:	d5 cf       	rjmp	.-86     	; 0x2cfa <vfprintf+0x69e>
    2d50:	91 10       	cpse	r9, r1
    2d52:	80 52       	subi	r24, 0x20	; 32
    2d54:	b7 01       	movw	r22, r14
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2d5c:	0f 5f       	subi	r16, 0xFF	; 255
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d60:	cf cf       	rjmp	.-98     	; 0x2d00 <vfprintf+0x6a4>
    2d62:	23 e0       	ldi	r18, 0x03	; 3
    2d64:	25 15       	cp	r18, r5
    2d66:	10 f4       	brcc	.+4      	; 0x2d6c <vfprintf+0x710>
    2d68:	83 e0       	ldi	r24, 0x03	; 3
    2d6a:	bd cf       	rjmp	.-134    	; 0x2ce6 <vfprintf+0x68a>
    2d6c:	51 2c       	mov	r5, r1
    2d6e:	c0 cf       	rjmp	.-128    	; 0x2cf0 <vfprintf+0x694>
    2d70:	60 96       	adiw	r28, 0x10	; 16
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	de bf       	out	0x3e, r29	; 62
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	ff 90       	pop	r15
    2d80:	ef 90       	pop	r14
    2d82:	df 90       	pop	r13
    2d84:	cf 90       	pop	r12
    2d86:	bf 90       	pop	r11
    2d88:	af 90       	pop	r10
    2d8a:	9f 90       	pop	r9
    2d8c:	8f 90       	pop	r8
    2d8e:	7f 90       	pop	r7
    2d90:	6f 90       	pop	r6
    2d92:	5f 90       	pop	r5
    2d94:	4f 90       	pop	r4
    2d96:	3f 90       	pop	r3
    2d98:	2f 90       	pop	r2
    2d9a:	08 95       	ret

00002d9c <__udivmodsi4>:
    2d9c:	a1 e2       	ldi	r26, 0x21	; 33
    2d9e:	1a 2e       	mov	r1, r26
    2da0:	aa 1b       	sub	r26, r26
    2da2:	bb 1b       	sub	r27, r27
    2da4:	fd 01       	movw	r30, r26
    2da6:	0d c0       	rjmp	.+26     	; 0x2dc2 <__udivmodsi4_ep>

00002da8 <__udivmodsi4_loop>:
    2da8:	aa 1f       	adc	r26, r26
    2daa:	bb 1f       	adc	r27, r27
    2dac:	ee 1f       	adc	r30, r30
    2dae:	ff 1f       	adc	r31, r31
    2db0:	a2 17       	cp	r26, r18
    2db2:	b3 07       	cpc	r27, r19
    2db4:	e4 07       	cpc	r30, r20
    2db6:	f5 07       	cpc	r31, r21
    2db8:	20 f0       	brcs	.+8      	; 0x2dc2 <__udivmodsi4_ep>
    2dba:	a2 1b       	sub	r26, r18
    2dbc:	b3 0b       	sbc	r27, r19
    2dbe:	e4 0b       	sbc	r30, r20
    2dc0:	f5 0b       	sbc	r31, r21

00002dc2 <__udivmodsi4_ep>:
    2dc2:	66 1f       	adc	r22, r22
    2dc4:	77 1f       	adc	r23, r23
    2dc6:	88 1f       	adc	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	1a 94       	dec	r1
    2dcc:	69 f7       	brne	.-38     	; 0x2da8 <__udivmodsi4_loop>
    2dce:	60 95       	com	r22
    2dd0:	70 95       	com	r23
    2dd2:	80 95       	com	r24
    2dd4:	90 95       	com	r25
    2dd6:	9b 01       	movw	r18, r22
    2dd8:	ac 01       	movw	r20, r24
    2dda:	bd 01       	movw	r22, r26
    2ddc:	cf 01       	movw	r24, r30
    2dde:	08 95       	ret

00002de0 <__tablejump2__>:
    2de0:	ee 0f       	add	r30, r30
    2de2:	ff 1f       	adc	r31, r31
    2de4:	00 24       	eor	r0, r0
    2de6:	00 1c       	adc	r0, r0
    2de8:	0b be       	out	0x3b, r0	; 59
    2dea:	07 90       	elpm	r0, Z+
    2dec:	f6 91       	elpm	r31, Z
    2dee:	e0 2d       	mov	r30, r0
    2df0:	09 94       	ijmp

00002df2 <__umulhisi3>:
    2df2:	a2 9f       	mul	r26, r18
    2df4:	b0 01       	movw	r22, r0
    2df6:	b3 9f       	mul	r27, r19
    2df8:	c0 01       	movw	r24, r0
    2dfa:	a3 9f       	mul	r26, r19
    2dfc:	70 0d       	add	r23, r0
    2dfe:	81 1d       	adc	r24, r1
    2e00:	11 24       	eor	r1, r1
    2e02:	91 1d       	adc	r25, r1
    2e04:	b2 9f       	mul	r27, r18
    2e06:	70 0d       	add	r23, r0
    2e08:	81 1d       	adc	r24, r1
    2e0a:	11 24       	eor	r1, r1
    2e0c:	91 1d       	adc	r25, r1
    2e0e:	08 95       	ret

00002e10 <malloc>:
    2e10:	0f 93       	push	r16
    2e12:	1f 93       	push	r17
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	82 30       	cpi	r24, 0x02	; 2
    2e1a:	91 05       	cpc	r25, r1
    2e1c:	10 f4       	brcc	.+4      	; 0x2e22 <malloc+0x12>
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	e0 91 67 45 	lds	r30, 0x4567	; 0x804567 <__flp>
    2e26:	f0 91 68 45 	lds	r31, 0x4568	; 0x804568 <__flp+0x1>
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	a0 e0       	ldi	r26, 0x00	; 0
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	30 97       	sbiw	r30, 0x00	; 0
    2e34:	19 f1       	breq	.+70     	; 0x2e7c <malloc+0x6c>
    2e36:	40 81       	ld	r20, Z
    2e38:	51 81       	ldd	r21, Z+1	; 0x01
    2e3a:	02 81       	ldd	r16, Z+2	; 0x02
    2e3c:	13 81       	ldd	r17, Z+3	; 0x03
    2e3e:	48 17       	cp	r20, r24
    2e40:	59 07       	cpc	r21, r25
    2e42:	c8 f0       	brcs	.+50     	; 0x2e76 <malloc+0x66>
    2e44:	84 17       	cp	r24, r20
    2e46:	95 07       	cpc	r25, r21
    2e48:	69 f4       	brne	.+26     	; 0x2e64 <malloc+0x54>
    2e4a:	10 97       	sbiw	r26, 0x00	; 0
    2e4c:	31 f0       	breq	.+12     	; 0x2e5a <malloc+0x4a>
    2e4e:	12 96       	adiw	r26, 0x02	; 2
    2e50:	0c 93       	st	X, r16
    2e52:	12 97       	sbiw	r26, 0x02	; 2
    2e54:	13 96       	adiw	r26, 0x03	; 3
    2e56:	1c 93       	st	X, r17
    2e58:	27 c0       	rjmp	.+78     	; 0x2ea8 <malloc+0x98>
    2e5a:	00 93 67 45 	sts	0x4567, r16	; 0x804567 <__flp>
    2e5e:	10 93 68 45 	sts	0x4568, r17	; 0x804568 <__flp+0x1>
    2e62:	22 c0       	rjmp	.+68     	; 0x2ea8 <malloc+0x98>
    2e64:	21 15       	cp	r18, r1
    2e66:	31 05       	cpc	r19, r1
    2e68:	19 f0       	breq	.+6      	; 0x2e70 <malloc+0x60>
    2e6a:	42 17       	cp	r20, r18
    2e6c:	53 07       	cpc	r21, r19
    2e6e:	18 f4       	brcc	.+6      	; 0x2e76 <malloc+0x66>
    2e70:	9a 01       	movw	r18, r20
    2e72:	bd 01       	movw	r22, r26
    2e74:	ef 01       	movw	r28, r30
    2e76:	df 01       	movw	r26, r30
    2e78:	f8 01       	movw	r30, r16
    2e7a:	db cf       	rjmp	.-74     	; 0x2e32 <malloc+0x22>
    2e7c:	21 15       	cp	r18, r1
    2e7e:	31 05       	cpc	r19, r1
    2e80:	f9 f0       	breq	.+62     	; 0x2ec0 <malloc+0xb0>
    2e82:	28 1b       	sub	r18, r24
    2e84:	39 0b       	sbc	r19, r25
    2e86:	24 30       	cpi	r18, 0x04	; 4
    2e88:	31 05       	cpc	r19, r1
    2e8a:	80 f4       	brcc	.+32     	; 0x2eac <malloc+0x9c>
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e90:	61 15       	cp	r22, r1
    2e92:	71 05       	cpc	r23, r1
    2e94:	21 f0       	breq	.+8      	; 0x2e9e <malloc+0x8e>
    2e96:	fb 01       	movw	r30, r22
    2e98:	82 83       	std	Z+2, r24	; 0x02
    2e9a:	93 83       	std	Z+3, r25	; 0x03
    2e9c:	04 c0       	rjmp	.+8      	; 0x2ea6 <malloc+0x96>
    2e9e:	80 93 67 45 	sts	0x4567, r24	; 0x804567 <__flp>
    2ea2:	90 93 68 45 	sts	0x4568, r25	; 0x804568 <__flp+0x1>
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	32 96       	adiw	r30, 0x02	; 2
    2eaa:	44 c0       	rjmp	.+136    	; 0x2f34 <malloc+0x124>
    2eac:	fe 01       	movw	r30, r28
    2eae:	e2 0f       	add	r30, r18
    2eb0:	f3 1f       	adc	r31, r19
    2eb2:	81 93       	st	Z+, r24
    2eb4:	91 93       	st	Z+, r25
    2eb6:	22 50       	subi	r18, 0x02	; 2
    2eb8:	31 09       	sbc	r19, r1
    2eba:	28 83       	st	Y, r18
    2ebc:	39 83       	std	Y+1, r19	; 0x01
    2ebe:	3a c0       	rjmp	.+116    	; 0x2f34 <malloc+0x124>
    2ec0:	20 91 65 45 	lds	r18, 0x4565	; 0x804565 <__brkval>
    2ec4:	30 91 66 45 	lds	r19, 0x4566	; 0x804566 <__brkval+0x1>
    2ec8:	23 2b       	or	r18, r19
    2eca:	41 f4       	brne	.+16     	; 0x2edc <malloc+0xcc>
    2ecc:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    2ed0:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    2ed4:	20 93 65 45 	sts	0x4565, r18	; 0x804565 <__brkval>
    2ed8:	30 93 66 45 	sts	0x4566, r19	; 0x804566 <__brkval+0x1>
    2edc:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    2ee0:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    2ee4:	21 15       	cp	r18, r1
    2ee6:	31 05       	cpc	r19, r1
    2ee8:	41 f4       	brne	.+16     	; 0x2efa <malloc+0xea>
    2eea:	2d b7       	in	r18, 0x3d	; 61
    2eec:	3e b7       	in	r19, 0x3e	; 62
    2eee:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    2ef2:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    2ef6:	24 1b       	sub	r18, r20
    2ef8:	35 0b       	sbc	r19, r21
    2efa:	e0 91 65 45 	lds	r30, 0x4565	; 0x804565 <__brkval>
    2efe:	f0 91 66 45 	lds	r31, 0x4566	; 0x804566 <__brkval+0x1>
    2f02:	e2 17       	cp	r30, r18
    2f04:	f3 07       	cpc	r31, r19
    2f06:	a0 f4       	brcc	.+40     	; 0x2f30 <malloc+0x120>
    2f08:	2e 1b       	sub	r18, r30
    2f0a:	3f 0b       	sbc	r19, r31
    2f0c:	28 17       	cp	r18, r24
    2f0e:	39 07       	cpc	r19, r25
    2f10:	78 f0       	brcs	.+30     	; 0x2f30 <malloc+0x120>
    2f12:	ac 01       	movw	r20, r24
    2f14:	4e 5f       	subi	r20, 0xFE	; 254
    2f16:	5f 4f       	sbci	r21, 0xFF	; 255
    2f18:	24 17       	cp	r18, r20
    2f1a:	35 07       	cpc	r19, r21
    2f1c:	48 f0       	brcs	.+18     	; 0x2f30 <malloc+0x120>
    2f1e:	4e 0f       	add	r20, r30
    2f20:	5f 1f       	adc	r21, r31
    2f22:	40 93 65 45 	sts	0x4565, r20	; 0x804565 <__brkval>
    2f26:	50 93 66 45 	sts	0x4566, r21	; 0x804566 <__brkval+0x1>
    2f2a:	81 93       	st	Z+, r24
    2f2c:	91 93       	st	Z+, r25
    2f2e:	02 c0       	rjmp	.+4      	; 0x2f34 <malloc+0x124>
    2f30:	e0 e0       	ldi	r30, 0x00	; 0
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	cf 01       	movw	r24, r30
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <free>:
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <free+0xa>
    2f48:	81 c0       	rjmp	.+258    	; 0x304c <free+0x10c>
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	32 97       	sbiw	r30, 0x02	; 2
    2f4e:	12 82       	std	Z+2, r1	; 0x02
    2f50:	13 82       	std	Z+3, r1	; 0x03
    2f52:	a0 91 67 45 	lds	r26, 0x4567	; 0x804567 <__flp>
    2f56:	b0 91 68 45 	lds	r27, 0x4568	; 0x804568 <__flp+0x1>
    2f5a:	10 97       	sbiw	r26, 0x00	; 0
    2f5c:	81 f4       	brne	.+32     	; 0x2f7e <free+0x3e>
    2f5e:	20 81       	ld	r18, Z
    2f60:	31 81       	ldd	r19, Z+1	; 0x01
    2f62:	82 0f       	add	r24, r18
    2f64:	93 1f       	adc	r25, r19
    2f66:	20 91 65 45 	lds	r18, 0x4565	; 0x804565 <__brkval>
    2f6a:	30 91 66 45 	lds	r19, 0x4566	; 0x804566 <__brkval+0x1>
    2f6e:	28 17       	cp	r18, r24
    2f70:	39 07       	cpc	r19, r25
    2f72:	51 f5       	brne	.+84     	; 0x2fc8 <free+0x88>
    2f74:	e0 93 65 45 	sts	0x4565, r30	; 0x804565 <__brkval>
    2f78:	f0 93 66 45 	sts	0x4566, r31	; 0x804566 <__brkval+0x1>
    2f7c:	67 c0       	rjmp	.+206    	; 0x304c <free+0x10c>
    2f7e:	ed 01       	movw	r28, r26
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	ce 17       	cp	r28, r30
    2f86:	df 07       	cpc	r29, r31
    2f88:	40 f4       	brcc	.+16     	; 0x2f9a <free+0x5a>
    2f8a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f8c:	5b 81       	ldd	r21, Y+3	; 0x03
    2f8e:	9e 01       	movw	r18, r28
    2f90:	41 15       	cp	r20, r1
    2f92:	51 05       	cpc	r21, r1
    2f94:	f1 f0       	breq	.+60     	; 0x2fd2 <free+0x92>
    2f96:	ea 01       	movw	r28, r20
    2f98:	f5 cf       	rjmp	.-22     	; 0x2f84 <free+0x44>
    2f9a:	c2 83       	std	Z+2, r28	; 0x02
    2f9c:	d3 83       	std	Z+3, r29	; 0x03
    2f9e:	40 81       	ld	r20, Z
    2fa0:	51 81       	ldd	r21, Z+1	; 0x01
    2fa2:	84 0f       	add	r24, r20
    2fa4:	95 1f       	adc	r25, r21
    2fa6:	c8 17       	cp	r28, r24
    2fa8:	d9 07       	cpc	r29, r25
    2faa:	59 f4       	brne	.+22     	; 0x2fc2 <free+0x82>
    2fac:	88 81       	ld	r24, Y
    2fae:	99 81       	ldd	r25, Y+1	; 0x01
    2fb0:	84 0f       	add	r24, r20
    2fb2:	95 1f       	adc	r25, r21
    2fb4:	02 96       	adiw	r24, 0x02	; 2
    2fb6:	80 83       	st	Z, r24
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbe:	82 83       	std	Z+2, r24	; 0x02
    2fc0:	93 83       	std	Z+3, r25	; 0x03
    2fc2:	21 15       	cp	r18, r1
    2fc4:	31 05       	cpc	r19, r1
    2fc6:	29 f4       	brne	.+10     	; 0x2fd2 <free+0x92>
    2fc8:	e0 93 67 45 	sts	0x4567, r30	; 0x804567 <__flp>
    2fcc:	f0 93 68 45 	sts	0x4568, r31	; 0x804568 <__flp+0x1>
    2fd0:	3d c0       	rjmp	.+122    	; 0x304c <free+0x10c>
    2fd2:	e9 01       	movw	r28, r18
    2fd4:	ea 83       	std	Y+2, r30	; 0x02
    2fd6:	fb 83       	std	Y+3, r31	; 0x03
    2fd8:	49 91       	ld	r20, Y+
    2fda:	59 91       	ld	r21, Y+
    2fdc:	c4 0f       	add	r28, r20
    2fde:	d5 1f       	adc	r29, r21
    2fe0:	ec 17       	cp	r30, r28
    2fe2:	fd 07       	cpc	r31, r29
    2fe4:	61 f4       	brne	.+24     	; 0x2ffe <free+0xbe>
    2fe6:	80 81       	ld	r24, Z
    2fe8:	91 81       	ldd	r25, Z+1	; 0x01
    2fea:	84 0f       	add	r24, r20
    2fec:	95 1f       	adc	r25, r21
    2fee:	02 96       	adiw	r24, 0x02	; 2
    2ff0:	e9 01       	movw	r28, r18
    2ff2:	88 83       	st	Y, r24
    2ff4:	99 83       	std	Y+1, r25	; 0x01
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	8a 83       	std	Y+2, r24	; 0x02
    2ffc:	9b 83       	std	Y+3, r25	; 0x03
    2ffe:	e0 e0       	ldi	r30, 0x00	; 0
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	12 96       	adiw	r26, 0x02	; 2
    3004:	8d 91       	ld	r24, X+
    3006:	9c 91       	ld	r25, X
    3008:	13 97       	sbiw	r26, 0x03	; 3
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	19 f0       	breq	.+6      	; 0x3014 <free+0xd4>
    300e:	fd 01       	movw	r30, r26
    3010:	dc 01       	movw	r26, r24
    3012:	f7 cf       	rjmp	.-18     	; 0x3002 <free+0xc2>
    3014:	8d 91       	ld	r24, X+
    3016:	9c 91       	ld	r25, X
    3018:	11 97       	sbiw	r26, 0x01	; 1
    301a:	9d 01       	movw	r18, r26
    301c:	2e 5f       	subi	r18, 0xFE	; 254
    301e:	3f 4f       	sbci	r19, 0xFF	; 255
    3020:	82 0f       	add	r24, r18
    3022:	93 1f       	adc	r25, r19
    3024:	20 91 65 45 	lds	r18, 0x4565	; 0x804565 <__brkval>
    3028:	30 91 66 45 	lds	r19, 0x4566	; 0x804566 <__brkval+0x1>
    302c:	28 17       	cp	r18, r24
    302e:	39 07       	cpc	r19, r25
    3030:	69 f4       	brne	.+26     	; 0x304c <free+0x10c>
    3032:	30 97       	sbiw	r30, 0x00	; 0
    3034:	29 f4       	brne	.+10     	; 0x3040 <free+0x100>
    3036:	10 92 67 45 	sts	0x4567, r1	; 0x804567 <__flp>
    303a:	10 92 68 45 	sts	0x4568, r1	; 0x804568 <__flp+0x1>
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <free+0x104>
    3040:	12 82       	std	Z+2, r1	; 0x02
    3042:	13 82       	std	Z+3, r1	; 0x03
    3044:	a0 93 65 45 	sts	0x4565, r26	; 0x804565 <__brkval>
    3048:	b0 93 66 45 	sts	0x4566, r27	; 0x804566 <__brkval+0x1>
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	08 95       	ret

00003052 <__ftoa_engine>:
    3052:	28 30       	cpi	r18, 0x08	; 8
    3054:	08 f0       	brcs	.+2      	; 0x3058 <__ftoa_engine+0x6>
    3056:	27 e0       	ldi	r18, 0x07	; 7
    3058:	33 27       	eor	r19, r19
    305a:	da 01       	movw	r26, r20
    305c:	99 0f       	add	r25, r25
    305e:	31 1d       	adc	r19, r1
    3060:	87 fd       	sbrc	r24, 7
    3062:	91 60       	ori	r25, 0x01	; 1
    3064:	00 96       	adiw	r24, 0x00	; 0
    3066:	61 05       	cpc	r22, r1
    3068:	71 05       	cpc	r23, r1
    306a:	39 f4       	brne	.+14     	; 0x307a <__ftoa_engine+0x28>
    306c:	32 60       	ori	r19, 0x02	; 2
    306e:	2e 5f       	subi	r18, 0xFE	; 254
    3070:	3d 93       	st	X+, r19
    3072:	30 e3       	ldi	r19, 0x30	; 48
    3074:	2a 95       	dec	r18
    3076:	e1 f7       	brne	.-8      	; 0x3070 <__ftoa_engine+0x1e>
    3078:	08 95       	ret
    307a:	9f 3f       	cpi	r25, 0xFF	; 255
    307c:	30 f0       	brcs	.+12     	; 0x308a <__ftoa_engine+0x38>
    307e:	80 38       	cpi	r24, 0x80	; 128
    3080:	71 05       	cpc	r23, r1
    3082:	61 05       	cpc	r22, r1
    3084:	09 f0       	breq	.+2      	; 0x3088 <__ftoa_engine+0x36>
    3086:	3c 5f       	subi	r19, 0xFC	; 252
    3088:	3c 5f       	subi	r19, 0xFC	; 252
    308a:	3d 93       	st	X+, r19
    308c:	91 30       	cpi	r25, 0x01	; 1
    308e:	08 f0       	brcs	.+2      	; 0x3092 <__ftoa_engine+0x40>
    3090:	80 68       	ori	r24, 0x80	; 128
    3092:	91 1d       	adc	r25, r1
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	1f 93       	push	r17
    309a:	0f 93       	push	r16
    309c:	ff 92       	push	r15
    309e:	ef 92       	push	r14
    30a0:	19 2f       	mov	r17, r25
    30a2:	98 7f       	andi	r25, 0xF8	; 248
    30a4:	96 95       	lsr	r25
    30a6:	e9 2f       	mov	r30, r25
    30a8:	96 95       	lsr	r25
    30aa:	96 95       	lsr	r25
    30ac:	e9 0f       	add	r30, r25
    30ae:	ff 27       	eor	r31, r31
    30b0:	e8 59       	subi	r30, 0x98	; 152
    30b2:	fe 4f       	sbci	r31, 0xFE	; 254
    30b4:	99 27       	eor	r25, r25
    30b6:	33 27       	eor	r19, r19
    30b8:	ee 24       	eor	r14, r14
    30ba:	ff 24       	eor	r15, r15
    30bc:	a7 01       	movw	r20, r14
    30be:	e7 01       	movw	r28, r14
    30c0:	05 90       	lpm	r0, Z+
    30c2:	08 94       	sec
    30c4:	07 94       	ror	r0
    30c6:	28 f4       	brcc	.+10     	; 0x30d2 <__ftoa_engine+0x80>
    30c8:	36 0f       	add	r19, r22
    30ca:	e7 1e       	adc	r14, r23
    30cc:	f8 1e       	adc	r15, r24
    30ce:	49 1f       	adc	r20, r25
    30d0:	51 1d       	adc	r21, r1
    30d2:	66 0f       	add	r22, r22
    30d4:	77 1f       	adc	r23, r23
    30d6:	88 1f       	adc	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	06 94       	lsr	r0
    30dc:	a1 f7       	brne	.-24     	; 0x30c6 <__ftoa_engine+0x74>
    30de:	05 90       	lpm	r0, Z+
    30e0:	07 94       	ror	r0
    30e2:	28 f4       	brcc	.+10     	; 0x30ee <__ftoa_engine+0x9c>
    30e4:	e7 0e       	add	r14, r23
    30e6:	f8 1e       	adc	r15, r24
    30e8:	49 1f       	adc	r20, r25
    30ea:	56 1f       	adc	r21, r22
    30ec:	c1 1d       	adc	r28, r1
    30ee:	77 0f       	add	r23, r23
    30f0:	88 1f       	adc	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	66 1f       	adc	r22, r22
    30f6:	06 94       	lsr	r0
    30f8:	a1 f7       	brne	.-24     	; 0x30e2 <__ftoa_engine+0x90>
    30fa:	05 90       	lpm	r0, Z+
    30fc:	07 94       	ror	r0
    30fe:	28 f4       	brcc	.+10     	; 0x310a <__ftoa_engine+0xb8>
    3100:	f8 0e       	add	r15, r24
    3102:	49 1f       	adc	r20, r25
    3104:	56 1f       	adc	r21, r22
    3106:	c7 1f       	adc	r28, r23
    3108:	d1 1d       	adc	r29, r1
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	66 1f       	adc	r22, r22
    3110:	77 1f       	adc	r23, r23
    3112:	06 94       	lsr	r0
    3114:	a1 f7       	brne	.-24     	; 0x30fe <__ftoa_engine+0xac>
    3116:	05 90       	lpm	r0, Z+
    3118:	07 94       	ror	r0
    311a:	20 f4       	brcc	.+8      	; 0x3124 <__ftoa_engine+0xd2>
    311c:	49 0f       	add	r20, r25
    311e:	56 1f       	adc	r21, r22
    3120:	c7 1f       	adc	r28, r23
    3122:	d8 1f       	adc	r29, r24
    3124:	99 0f       	add	r25, r25
    3126:	66 1f       	adc	r22, r22
    3128:	77 1f       	adc	r23, r23
    312a:	88 1f       	adc	r24, r24
    312c:	06 94       	lsr	r0
    312e:	a9 f7       	brne	.-22     	; 0x311a <__ftoa_engine+0xc8>
    3130:	84 91       	lpm	r24, Z
    3132:	10 95       	com	r17
    3134:	17 70       	andi	r17, 0x07	; 7
    3136:	41 f0       	breq	.+16     	; 0x3148 <__ftoa_engine+0xf6>
    3138:	d6 95       	lsr	r29
    313a:	c7 95       	ror	r28
    313c:	57 95       	ror	r21
    313e:	47 95       	ror	r20
    3140:	f7 94       	ror	r15
    3142:	e7 94       	ror	r14
    3144:	1a 95       	dec	r17
    3146:	c1 f7       	brne	.-16     	; 0x3138 <__ftoa_engine+0xe6>
    3148:	ee e0       	ldi	r30, 0x0E	; 14
    314a:	f1 e0       	ldi	r31, 0x01	; 1
    314c:	68 94       	set
    314e:	15 90       	lpm	r1, Z+
    3150:	15 91       	lpm	r17, Z+
    3152:	35 91       	lpm	r19, Z+
    3154:	65 91       	lpm	r22, Z+
    3156:	95 91       	lpm	r25, Z+
    3158:	05 90       	lpm	r0, Z+
    315a:	7f e2       	ldi	r23, 0x2F	; 47
    315c:	73 95       	inc	r23
    315e:	e1 18       	sub	r14, r1
    3160:	f1 0a       	sbc	r15, r17
    3162:	43 0b       	sbc	r20, r19
    3164:	56 0b       	sbc	r21, r22
    3166:	c9 0b       	sbc	r28, r25
    3168:	d0 09       	sbc	r29, r0
    316a:	c0 f7       	brcc	.-16     	; 0x315c <__ftoa_engine+0x10a>
    316c:	e1 0c       	add	r14, r1
    316e:	f1 1e       	adc	r15, r17
    3170:	43 1f       	adc	r20, r19
    3172:	56 1f       	adc	r21, r22
    3174:	c9 1f       	adc	r28, r25
    3176:	d0 1d       	adc	r29, r0
    3178:	7e f4       	brtc	.+30     	; 0x3198 <__ftoa_engine+0x146>
    317a:	70 33       	cpi	r23, 0x30	; 48
    317c:	11 f4       	brne	.+4      	; 0x3182 <__ftoa_engine+0x130>
    317e:	8a 95       	dec	r24
    3180:	e6 cf       	rjmp	.-52     	; 0x314e <__ftoa_engine+0xfc>
    3182:	e8 94       	clt
    3184:	01 50       	subi	r16, 0x01	; 1
    3186:	30 f0       	brcs	.+12     	; 0x3194 <__ftoa_engine+0x142>
    3188:	08 0f       	add	r16, r24
    318a:	0a f4       	brpl	.+2      	; 0x318e <__ftoa_engine+0x13c>
    318c:	00 27       	eor	r16, r16
    318e:	02 17       	cp	r16, r18
    3190:	08 f4       	brcc	.+2      	; 0x3194 <__ftoa_engine+0x142>
    3192:	20 2f       	mov	r18, r16
    3194:	23 95       	inc	r18
    3196:	02 2f       	mov	r16, r18
    3198:	7a 33       	cpi	r23, 0x3A	; 58
    319a:	28 f0       	brcs	.+10     	; 0x31a6 <__ftoa_engine+0x154>
    319c:	79 e3       	ldi	r23, 0x39	; 57
    319e:	7d 93       	st	X+, r23
    31a0:	2a 95       	dec	r18
    31a2:	e9 f7       	brne	.-6      	; 0x319e <__ftoa_engine+0x14c>
    31a4:	10 c0       	rjmp	.+32     	; 0x31c6 <__ftoa_engine+0x174>
    31a6:	7d 93       	st	X+, r23
    31a8:	2a 95       	dec	r18
    31aa:	89 f6       	brne	.-94     	; 0x314e <__ftoa_engine+0xfc>
    31ac:	06 94       	lsr	r0
    31ae:	97 95       	ror	r25
    31b0:	67 95       	ror	r22
    31b2:	37 95       	ror	r19
    31b4:	17 95       	ror	r17
    31b6:	17 94       	ror	r1
    31b8:	e1 18       	sub	r14, r1
    31ba:	f1 0a       	sbc	r15, r17
    31bc:	43 0b       	sbc	r20, r19
    31be:	56 0b       	sbc	r21, r22
    31c0:	c9 0b       	sbc	r28, r25
    31c2:	d0 09       	sbc	r29, r0
    31c4:	98 f0       	brcs	.+38     	; 0x31ec <__ftoa_engine+0x19a>
    31c6:	23 95       	inc	r18
    31c8:	7e 91       	ld	r23, -X
    31ca:	73 95       	inc	r23
    31cc:	7a 33       	cpi	r23, 0x3A	; 58
    31ce:	08 f0       	brcs	.+2      	; 0x31d2 <__ftoa_engine+0x180>
    31d0:	70 e3       	ldi	r23, 0x30	; 48
    31d2:	7c 93       	st	X, r23
    31d4:	20 13       	cpse	r18, r16
    31d6:	b8 f7       	brcc	.-18     	; 0x31c6 <__ftoa_engine+0x174>
    31d8:	7e 91       	ld	r23, -X
    31da:	70 61       	ori	r23, 0x10	; 16
    31dc:	7d 93       	st	X+, r23
    31de:	30 f0       	brcs	.+12     	; 0x31ec <__ftoa_engine+0x19a>
    31e0:	83 95       	inc	r24
    31e2:	71 e3       	ldi	r23, 0x31	; 49
    31e4:	7d 93       	st	X+, r23
    31e6:	70 e3       	ldi	r23, 0x30	; 48
    31e8:	2a 95       	dec	r18
    31ea:	e1 f7       	brne	.-8      	; 0x31e4 <__ftoa_engine+0x192>
    31ec:	11 24       	eor	r1, r1
    31ee:	ef 90       	pop	r14
    31f0:	ff 90       	pop	r15
    31f2:	0f 91       	pop	r16
    31f4:	1f 91       	pop	r17
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	99 27       	eor	r25, r25
    31fc:	87 fd       	sbrc	r24, 7
    31fe:	90 95       	com	r25
    3200:	08 95       	ret

00003202 <isspace>:
    3202:	91 11       	cpse	r25, r1
    3204:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__ctype_isfalse>
    3208:	80 32       	cpi	r24, 0x20	; 32
    320a:	19 f0       	breq	.+6      	; 0x3212 <isspace+0x10>
    320c:	89 50       	subi	r24, 0x09	; 9
    320e:	85 50       	subi	r24, 0x05	; 5
    3210:	c8 f7       	brcc	.-14     	; 0x3204 <isspace+0x2>
    3212:	08 95       	ret

00003214 <tolower>:
    3214:	91 11       	cpse	r25, r1
    3216:	08 95       	ret
    3218:	81 54       	subi	r24, 0x41	; 65
    321a:	8a 51       	subi	r24, 0x1A	; 26
    321c:	08 f4       	brcc	.+2      	; 0x3220 <tolower+0xc>
    321e:	80 5e       	subi	r24, 0xE0	; 224
    3220:	85 5a       	subi	r24, 0xA5	; 165
    3222:	08 95       	ret

00003224 <strchr_P>:
    3224:	fc 01       	movw	r30, r24
    3226:	05 90       	lpm	r0, Z+
    3228:	06 16       	cp	r0, r22
    322a:	21 f0       	breq	.+8      	; 0x3234 <strchr_P+0x10>
    322c:	00 20       	and	r0, r0
    322e:	d9 f7       	brne	.-10     	; 0x3226 <strchr_P+0x2>
    3230:	c0 01       	movw	r24, r0
    3232:	08 95       	ret
    3234:	31 97       	sbiw	r30, 0x01	; 1
    3236:	cf 01       	movw	r24, r30
    3238:	08 95       	ret

0000323a <strnlen_P>:
    323a:	fc 01       	movw	r30, r24
    323c:	05 90       	lpm	r0, Z+
    323e:	61 50       	subi	r22, 0x01	; 1
    3240:	70 40       	sbci	r23, 0x00	; 0
    3242:	01 10       	cpse	r0, r1
    3244:	d8 f7       	brcc	.-10     	; 0x323c <strnlen_P+0x2>
    3246:	80 95       	com	r24
    3248:	90 95       	com	r25
    324a:	8e 0f       	add	r24, r30
    324c:	9f 1f       	adc	r25, r31
    324e:	08 95       	ret

00003250 <strcmp>:
    3250:	fb 01       	movw	r30, r22
    3252:	dc 01       	movw	r26, r24
    3254:	8d 91       	ld	r24, X+
    3256:	01 90       	ld	r0, Z+
    3258:	80 19       	sub	r24, r0
    325a:	01 10       	cpse	r0, r1
    325c:	d9 f3       	breq	.-10     	; 0x3254 <strcmp+0x4>
    325e:	99 0b       	sbc	r25, r25
    3260:	08 95       	ret

00003262 <strcpy>:
    3262:	fb 01       	movw	r30, r22
    3264:	dc 01       	movw	r26, r24
    3266:	01 90       	ld	r0, Z+
    3268:	0d 92       	st	X+, r0
    326a:	00 20       	and	r0, r0
    326c:	e1 f7       	brne	.-8      	; 0x3266 <strcpy+0x4>
    326e:	08 95       	ret

00003270 <strnlen>:
    3270:	fc 01       	movw	r30, r24
    3272:	61 50       	subi	r22, 0x01	; 1
    3274:	70 40       	sbci	r23, 0x00	; 0
    3276:	01 90       	ld	r0, Z+
    3278:	01 10       	cpse	r0, r1
    327a:	d8 f7       	brcc	.-10     	; 0x3272 <strnlen+0x2>
    327c:	80 95       	com	r24
    327e:	90 95       	com	r25
    3280:	8e 0f       	add	r24, r30
    3282:	9f 1f       	adc	r25, r31
    3284:	08 95       	ret

00003286 <fgetc>:
    3286:	cf 93       	push	r28
    3288:	df 93       	push	r29
    328a:	ec 01       	movw	r28, r24
    328c:	2b 81       	ldd	r18, Y+3	; 0x03
    328e:	20 ff       	sbrs	r18, 0
    3290:	33 c0       	rjmp	.+102    	; 0x32f8 <fgetc+0x72>
    3292:	26 ff       	sbrs	r18, 6
    3294:	0a c0       	rjmp	.+20     	; 0x32aa <fgetc+0x24>
    3296:	2f 7b       	andi	r18, 0xBF	; 191
    3298:	2b 83       	std	Y+3, r18	; 0x03
    329a:	8e 81       	ldd	r24, Y+6	; 0x06
    329c:	9f 81       	ldd	r25, Y+7	; 0x07
    329e:	01 96       	adiw	r24, 0x01	; 1
    32a0:	8e 83       	std	Y+6, r24	; 0x06
    32a2:	9f 83       	std	Y+7, r25	; 0x07
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	29 c0       	rjmp	.+82     	; 0x32fc <fgetc+0x76>
    32aa:	22 ff       	sbrs	r18, 2
    32ac:	0f c0       	rjmp	.+30     	; 0x32cc <fgetc+0x46>
    32ae:	e8 81       	ld	r30, Y
    32b0:	f9 81       	ldd	r31, Y+1	; 0x01
    32b2:	80 81       	ld	r24, Z
    32b4:	08 2e       	mov	r0, r24
    32b6:	00 0c       	add	r0, r0
    32b8:	99 0b       	sbc	r25, r25
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	19 f4       	brne	.+6      	; 0x32c4 <fgetc+0x3e>
    32be:	20 62       	ori	r18, 0x20	; 32
    32c0:	2b 83       	std	Y+3, r18	; 0x03
    32c2:	1a c0       	rjmp	.+52     	; 0x32f8 <fgetc+0x72>
    32c4:	31 96       	adiw	r30, 0x01	; 1
    32c6:	e8 83       	st	Y, r30
    32c8:	f9 83       	std	Y+1, r31	; 0x01
    32ca:	0e c0       	rjmp	.+28     	; 0x32e8 <fgetc+0x62>
    32cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    32ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    32d0:	09 95       	icall
    32d2:	97 ff       	sbrs	r25, 7
    32d4:	09 c0       	rjmp	.+18     	; 0x32e8 <fgetc+0x62>
    32d6:	2b 81       	ldd	r18, Y+3	; 0x03
    32d8:	01 96       	adiw	r24, 0x01	; 1
    32da:	11 f0       	breq	.+4      	; 0x32e0 <fgetc+0x5a>
    32dc:	80 e2       	ldi	r24, 0x20	; 32
    32de:	01 c0       	rjmp	.+2      	; 0x32e2 <fgetc+0x5c>
    32e0:	80 e1       	ldi	r24, 0x10	; 16
    32e2:	82 2b       	or	r24, r18
    32e4:	8b 83       	std	Y+3, r24	; 0x03
    32e6:	08 c0       	rjmp	.+16     	; 0x32f8 <fgetc+0x72>
    32e8:	2e 81       	ldd	r18, Y+6	; 0x06
    32ea:	3f 81       	ldd	r19, Y+7	; 0x07
    32ec:	2f 5f       	subi	r18, 0xFF	; 255
    32ee:	3f 4f       	sbci	r19, 0xFF	; 255
    32f0:	2e 83       	std	Y+6, r18	; 0x06
    32f2:	3f 83       	std	Y+7, r19	; 0x07
    32f4:	99 27       	eor	r25, r25
    32f6:	02 c0       	rjmp	.+4      	; 0x32fc <fgetc+0x76>
    32f8:	8f ef       	ldi	r24, 0xFF	; 255
    32fa:	9f ef       	ldi	r25, 0xFF	; 255
    32fc:	df 91       	pop	r29
    32fe:	cf 91       	pop	r28
    3300:	08 95       	ret

00003302 <fputc>:
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	fb 01       	movw	r30, r22
    330c:	23 81       	ldd	r18, Z+3	; 0x03
    330e:	21 fd       	sbrc	r18, 1
    3310:	03 c0       	rjmp	.+6      	; 0x3318 <fputc+0x16>
    3312:	8f ef       	ldi	r24, 0xFF	; 255
    3314:	9f ef       	ldi	r25, 0xFF	; 255
    3316:	2c c0       	rjmp	.+88     	; 0x3370 <fputc+0x6e>
    3318:	22 ff       	sbrs	r18, 2
    331a:	16 c0       	rjmp	.+44     	; 0x3348 <fputc+0x46>
    331c:	46 81       	ldd	r20, Z+6	; 0x06
    331e:	57 81       	ldd	r21, Z+7	; 0x07
    3320:	24 81       	ldd	r18, Z+4	; 0x04
    3322:	35 81       	ldd	r19, Z+5	; 0x05
    3324:	42 17       	cp	r20, r18
    3326:	53 07       	cpc	r21, r19
    3328:	44 f4       	brge	.+16     	; 0x333a <fputc+0x38>
    332a:	a0 81       	ld	r26, Z
    332c:	b1 81       	ldd	r27, Z+1	; 0x01
    332e:	9d 01       	movw	r18, r26
    3330:	2f 5f       	subi	r18, 0xFF	; 255
    3332:	3f 4f       	sbci	r19, 0xFF	; 255
    3334:	20 83       	st	Z, r18
    3336:	31 83       	std	Z+1, r19	; 0x01
    3338:	8c 93       	st	X, r24
    333a:	26 81       	ldd	r18, Z+6	; 0x06
    333c:	37 81       	ldd	r19, Z+7	; 0x07
    333e:	2f 5f       	subi	r18, 0xFF	; 255
    3340:	3f 4f       	sbci	r19, 0xFF	; 255
    3342:	26 83       	std	Z+6, r18	; 0x06
    3344:	37 83       	std	Z+7, r19	; 0x07
    3346:	14 c0       	rjmp	.+40     	; 0x3370 <fputc+0x6e>
    3348:	8b 01       	movw	r16, r22
    334a:	ec 01       	movw	r28, r24
    334c:	fb 01       	movw	r30, r22
    334e:	00 84       	ldd	r0, Z+8	; 0x08
    3350:	f1 85       	ldd	r31, Z+9	; 0x09
    3352:	e0 2d       	mov	r30, r0
    3354:	09 95       	icall
    3356:	89 2b       	or	r24, r25
    3358:	e1 f6       	brne	.-72     	; 0x3312 <fputc+0x10>
    335a:	d8 01       	movw	r26, r16
    335c:	16 96       	adiw	r26, 0x06	; 6
    335e:	8d 91       	ld	r24, X+
    3360:	9c 91       	ld	r25, X
    3362:	17 97       	sbiw	r26, 0x07	; 7
    3364:	01 96       	adiw	r24, 0x01	; 1
    3366:	16 96       	adiw	r26, 0x06	; 6
    3368:	8d 93       	st	X+, r24
    336a:	9c 93       	st	X, r25
    336c:	17 97       	sbiw	r26, 0x07	; 7
    336e:	ce 01       	movw	r24, r28
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	08 95       	ret

0000337a <sprintf>:
    337a:	0f 93       	push	r16
    337c:	1f 93       	push	r17
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	2e 97       	sbiw	r28, 0x0e	; 14
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0d 89       	ldd	r16, Y+21	; 0x15
    338e:	1e 89       	ldd	r17, Y+22	; 0x16
    3390:	86 e0       	ldi	r24, 0x06	; 6
    3392:	8c 83       	std	Y+4, r24	; 0x04
    3394:	09 83       	std	Y+1, r16	; 0x01
    3396:	1a 83       	std	Y+2, r17	; 0x02
    3398:	8f ef       	ldi	r24, 0xFF	; 255
    339a:	9f e7       	ldi	r25, 0x7F	; 127
    339c:	8d 83       	std	Y+5, r24	; 0x05
    339e:	9e 83       	std	Y+6, r25	; 0x06
    33a0:	ae 01       	movw	r20, r28
    33a2:	47 5e       	subi	r20, 0xE7	; 231
    33a4:	5f 4f       	sbci	r21, 0xFF	; 255
    33a6:	6f 89       	ldd	r22, Y+23	; 0x17
    33a8:	78 8d       	ldd	r23, Y+24	; 0x18
    33aa:	ce 01       	movw	r24, r28
    33ac:	01 96       	adiw	r24, 0x01	; 1
    33ae:	0e 94 2e 13 	call	0x265c	; 0x265c <vfprintf>
    33b2:	ef 81       	ldd	r30, Y+7	; 0x07
    33b4:	f8 85       	ldd	r31, Y+8	; 0x08
    33b6:	e0 0f       	add	r30, r16
    33b8:	f1 1f       	adc	r31, r17
    33ba:	10 82       	st	Z, r1
    33bc:	2e 96       	adiw	r28, 0x0e	; 14
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	08 95       	ret

000033cc <ungetc>:
    33cc:	fb 01       	movw	r30, r22
    33ce:	23 81       	ldd	r18, Z+3	; 0x03
    33d0:	20 ff       	sbrs	r18, 0
    33d2:	12 c0       	rjmp	.+36     	; 0x33f8 <ungetc+0x2c>
    33d4:	26 fd       	sbrc	r18, 6
    33d6:	10 c0       	rjmp	.+32     	; 0x33f8 <ungetc+0x2c>
    33d8:	8f 3f       	cpi	r24, 0xFF	; 255
    33da:	3f ef       	ldi	r19, 0xFF	; 255
    33dc:	93 07       	cpc	r25, r19
    33de:	61 f0       	breq	.+24     	; 0x33f8 <ungetc+0x2c>
    33e0:	82 83       	std	Z+2, r24	; 0x02
    33e2:	2f 7d       	andi	r18, 0xDF	; 223
    33e4:	20 64       	ori	r18, 0x40	; 64
    33e6:	23 83       	std	Z+3, r18	; 0x03
    33e8:	26 81       	ldd	r18, Z+6	; 0x06
    33ea:	37 81       	ldd	r19, Z+7	; 0x07
    33ec:	21 50       	subi	r18, 0x01	; 1
    33ee:	31 09       	sbc	r19, r1
    33f0:	26 83       	std	Z+6, r18	; 0x06
    33f2:	37 83       	std	Z+7, r19	; 0x07
    33f4:	99 27       	eor	r25, r25
    33f6:	08 95       	ret
    33f8:	8f ef       	ldi	r24, 0xFF	; 255
    33fa:	9f ef       	ldi	r25, 0xFF	; 255
    33fc:	08 95       	ret

000033fe <__ultoa_invert>:
    33fe:	fa 01       	movw	r30, r20
    3400:	aa 27       	eor	r26, r26
    3402:	28 30       	cpi	r18, 0x08	; 8
    3404:	51 f1       	breq	.+84     	; 0x345a <__ultoa_invert+0x5c>
    3406:	20 31       	cpi	r18, 0x10	; 16
    3408:	81 f1       	breq	.+96     	; 0x346a <__ultoa_invert+0x6c>
    340a:	e8 94       	clt
    340c:	6f 93       	push	r22
    340e:	6e 7f       	andi	r22, 0xFE	; 254
    3410:	6e 5f       	subi	r22, 0xFE	; 254
    3412:	7f 4f       	sbci	r23, 0xFF	; 255
    3414:	8f 4f       	sbci	r24, 0xFF	; 255
    3416:	9f 4f       	sbci	r25, 0xFF	; 255
    3418:	af 4f       	sbci	r26, 0xFF	; 255
    341a:	b1 e0       	ldi	r27, 0x01	; 1
    341c:	3e d0       	rcall	.+124    	; 0x349a <__ultoa_invert+0x9c>
    341e:	b4 e0       	ldi	r27, 0x04	; 4
    3420:	3c d0       	rcall	.+120    	; 0x349a <__ultoa_invert+0x9c>
    3422:	67 0f       	add	r22, r23
    3424:	78 1f       	adc	r23, r24
    3426:	89 1f       	adc	r24, r25
    3428:	9a 1f       	adc	r25, r26
    342a:	a1 1d       	adc	r26, r1
    342c:	68 0f       	add	r22, r24
    342e:	79 1f       	adc	r23, r25
    3430:	8a 1f       	adc	r24, r26
    3432:	91 1d       	adc	r25, r1
    3434:	a1 1d       	adc	r26, r1
    3436:	6a 0f       	add	r22, r26
    3438:	71 1d       	adc	r23, r1
    343a:	81 1d       	adc	r24, r1
    343c:	91 1d       	adc	r25, r1
    343e:	a1 1d       	adc	r26, r1
    3440:	20 d0       	rcall	.+64     	; 0x3482 <__ultoa_invert+0x84>
    3442:	09 f4       	brne	.+2      	; 0x3446 <__ultoa_invert+0x48>
    3444:	68 94       	set
    3446:	3f 91       	pop	r19
    3448:	2a e0       	ldi	r18, 0x0A	; 10
    344a:	26 9f       	mul	r18, r22
    344c:	11 24       	eor	r1, r1
    344e:	30 19       	sub	r19, r0
    3450:	30 5d       	subi	r19, 0xD0	; 208
    3452:	31 93       	st	Z+, r19
    3454:	de f6       	brtc	.-74     	; 0x340c <__ultoa_invert+0xe>
    3456:	cf 01       	movw	r24, r30
    3458:	08 95       	ret
    345a:	46 2f       	mov	r20, r22
    345c:	47 70       	andi	r20, 0x07	; 7
    345e:	40 5d       	subi	r20, 0xD0	; 208
    3460:	41 93       	st	Z+, r20
    3462:	b3 e0       	ldi	r27, 0x03	; 3
    3464:	0f d0       	rcall	.+30     	; 0x3484 <__ultoa_invert+0x86>
    3466:	c9 f7       	brne	.-14     	; 0x345a <__ultoa_invert+0x5c>
    3468:	f6 cf       	rjmp	.-20     	; 0x3456 <__ultoa_invert+0x58>
    346a:	46 2f       	mov	r20, r22
    346c:	4f 70       	andi	r20, 0x0F	; 15
    346e:	40 5d       	subi	r20, 0xD0	; 208
    3470:	4a 33       	cpi	r20, 0x3A	; 58
    3472:	18 f0       	brcs	.+6      	; 0x347a <__ultoa_invert+0x7c>
    3474:	49 5d       	subi	r20, 0xD9	; 217
    3476:	31 fd       	sbrc	r19, 1
    3478:	40 52       	subi	r20, 0x20	; 32
    347a:	41 93       	st	Z+, r20
    347c:	02 d0       	rcall	.+4      	; 0x3482 <__ultoa_invert+0x84>
    347e:	a9 f7       	brne	.-22     	; 0x346a <__ultoa_invert+0x6c>
    3480:	ea cf       	rjmp	.-44     	; 0x3456 <__ultoa_invert+0x58>
    3482:	b4 e0       	ldi	r27, 0x04	; 4
    3484:	a6 95       	lsr	r26
    3486:	97 95       	ror	r25
    3488:	87 95       	ror	r24
    348a:	77 95       	ror	r23
    348c:	67 95       	ror	r22
    348e:	ba 95       	dec	r27
    3490:	c9 f7       	brne	.-14     	; 0x3484 <__ultoa_invert+0x86>
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	61 05       	cpc	r22, r1
    3496:	71 05       	cpc	r23, r1
    3498:	08 95       	ret
    349a:	9b 01       	movw	r18, r22
    349c:	ac 01       	movw	r20, r24
    349e:	0a 2e       	mov	r0, r26
    34a0:	06 94       	lsr	r0
    34a2:	57 95       	ror	r21
    34a4:	47 95       	ror	r20
    34a6:	37 95       	ror	r19
    34a8:	27 95       	ror	r18
    34aa:	ba 95       	dec	r27
    34ac:	c9 f7       	brne	.-14     	; 0x34a0 <__ultoa_invert+0xa2>
    34ae:	62 0f       	add	r22, r18
    34b0:	73 1f       	adc	r23, r19
    34b2:	84 1f       	adc	r24, r20
    34b4:	95 1f       	adc	r25, r21
    34b6:	a0 1d       	adc	r26, r0
    34b8:	08 95       	ret

000034ba <__ctype_isfalse>:
    34ba:	99 27       	eor	r25, r25
    34bc:	88 27       	eor	r24, r24

000034be <__ctype_istrue>:
    34be:	08 95       	ret

000034c0 <_exit>:
    34c0:	f8 94       	cli

000034c2 <__stop_program>:
    34c2:	ff cf       	rjmp	.-2      	; 0x34c2 <__stop_program>
