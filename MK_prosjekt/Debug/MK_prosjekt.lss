
MK_prosjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004a6  00804000  000034b4  00003548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  008044a6  008044a6  000039ee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00003a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007ade  00000000  00000000  00003d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038db  00000000  00000000  0000b80a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f77  00000000  00000000  0000f0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  0001105c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003994  00000000  00000000  000117bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001486  00000000  00000000  00015150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  000165d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
       8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
       c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      10:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      14:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__vector_5>
      18:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      1c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      20:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      24:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      28:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      2c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      30:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      34:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      38:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      3c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      40:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      44:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      48:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      4c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      50:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      54:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      58:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      5c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      60:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      64:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      68:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      6c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      70:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      74:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      78:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      7c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      80:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      84:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      88:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      8c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      90:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      94:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      98:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      9c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      a0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      a4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      a8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      ac:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      b0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      b4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      b8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      bc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      c0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      c4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      c8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      cc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      d0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      d4:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_53>
      d8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      dc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      e0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      e4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      e8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      ec:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      f0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      f4:	0e 0b       	sbc	r16, r30
      f6:	3b 0b       	sbc	r19, r27
      f8:	47 0b       	sbc	r20, r23
      fa:	c2 0b       	sbc	r28, r18
      fc:	ae 0c       	add	r10, r14
      fe:	b1 0c       	add	r11, r1
     100:	b4 0c       	add	r11, r4
     102:	b7 0c       	add	r11, r7

00000104 <__trampolines_end>:
     104:	6e 61       	ori	r22, 0x1E	; 30
     106:	6e 00       	.word	0x006e	; ????

00000108 <__c.2332>:
     108:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     118:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     128:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     138:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     148:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     158:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     168:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     178:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     188:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     198:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1a8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1b8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1c8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1d8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1e8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1f8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000206 <__c.2529>:
     206:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     216:	47 00                                               G.

00000218 <pstr_an>:
     218:	61 6e 00                                            an.

0000021b <pstr_nfinity>:
     21b:	6e 66 69 6e 69 74 79 00                             nfinity.

00000223 <pwr_m10>:
     223:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     233:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000023b <pwr_p10>:
     23b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     24b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df e7       	ldi	r29, 0x7F	; 127
     25e:	de bf       	out	0x3e, r29	; 62

00000260 <__do_copy_data>:
     260:	14 e4       	ldi	r17, 0x44	; 68
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b0 e4       	ldi	r27, 0x40	; 64
     266:	e4 eb       	ldi	r30, 0xB4	; 180
     268:	f4 e3       	ldi	r31, 0x34	; 52
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	0b bf       	out	0x3b, r16	; 59
     26e:	02 c0       	rjmp	.+4      	; 0x274 <__do_copy_data+0x14>
     270:	07 90       	elpm	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	a6 3a       	cpi	r26, 0xA6	; 166
     276:	b1 07       	cpc	r27, r17
     278:	d9 f7       	brne	.-10     	; 0x270 <__do_copy_data+0x10>

0000027a <__do_clear_bss>:
     27a:	25 e4       	ldi	r18, 0x45	; 69
     27c:	a6 ea       	ldi	r26, 0xA6	; 166
     27e:	b4 e4       	ldi	r27, 0x44	; 68
     280:	01 c0       	rjmp	.+2      	; 0x284 <.do_clear_bss_start>

00000282 <.do_clear_bss_loop>:
     282:	1d 92       	st	X+, r1

00000284 <.do_clear_bss_start>:
     284:	ad 34       	cpi	r26, 0x4D	; 77
     286:	b2 07       	cpc	r27, r18
     288:	e1 f7       	brne	.-8      	; 0x282 <.do_clear_bss_loop>
     28a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <main>
     28e:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <_exit>

00000292 <__bad_interrupt>:
     292:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000296 <dutycalc>:


}
//calculating duty from 0 - 100%
uint8_t dutycalc(uint8_t pre){
	uint8_t duty = 0xFF*(pre*0.01);
     296:	68 2f       	mov	r22, r24
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__floatsisf>
     2a2:	2a e0       	ldi	r18, 0x0A	; 10
     2a4:	37 ed       	ldi	r19, 0xD7	; 215
     2a6:	43 e2       	ldi	r20, 0x23	; 35
     2a8:	5c e3       	ldi	r21, 0x3C	; 60
     2aa:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__mulsf3>
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	4f e7       	ldi	r20, 0x7F	; 127
     2b4:	53 e4       	ldi	r21, 0x43	; 67
     2b6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__mulsf3>
     2ba:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     2be:	86 2f       	mov	r24, r22
	return duty;
}
     2c0:	08 95       	ret

000002c2 <AnalogWrite>:
	analog_value = (uint16_t)ADC0.RES; //Read the analog value + clear interrupt flag
	return analog_value; //Return the analog value
}

//Function for analogwrite to pin with duty 0 - 100%
void AnalogWrite(char ch, char duty){
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	c8 2f       	mov	r28, r24
     2c8:	d6 2f       	mov	r29, r22
	if (ch == 0){
     2ca:	81 11       	cpse	r24, r1
     2cc:	0a c0       	rjmp	.+20     	; 0x2e2 <AnalogWrite+0x20>
		TCA0.SPLIT.LCMP0 = dutycalc(duty);
     2ce:	86 2f       	mov	r24, r22
     2d0:	0e 94 4b 01 	call	0x296	; 0x296 <dutycalc>
     2d4:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
		PORTD.DIR |= PD0;
     2d8:	e0 e6       	ldi	r30, 0x60	; 96
     2da:	f4 e0       	ldi	r31, 0x04	; 4
     2dc:	80 81       	ld	r24, Z
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	80 83       	st	Z, r24
	}
	if (ch == 1){
     2e2:	c1 30       	cpi	r28, 0x01	; 1
     2e4:	51 f4       	brne	.+20     	; 0x2fa <AnalogWrite+0x38>
		TCA0.SPLIT.LCMP1 = dutycalc(duty);
     2e6:	8d 2f       	mov	r24, r29
     2e8:	0e 94 4b 01 	call	0x296	; 0x296 <dutycalc>
     2ec:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7e0a2a>
		PORTD.DIR |= PD1;
     2f0:	e0 e6       	ldi	r30, 0x60	; 96
     2f2:	f4 e0       	ldi	r31, 0x04	; 4
     2f4:	80 81       	ld	r24, Z
     2f6:	82 60       	ori	r24, 0x02	; 2
     2f8:	80 83       	st	Z, r24
	}
	if (ch == 2){
     2fa:	c2 30       	cpi	r28, 0x02	; 2
     2fc:	51 f4       	brne	.+20     	; 0x312 <AnalogWrite+0x50>
		TCA0.SPLIT.LCMP2 = dutycalc(duty);
     2fe:	8d 2f       	mov	r24, r29
     300:	0e 94 4b 01 	call	0x296	; 0x296 <dutycalc>
     304:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7e0a2c>
		PORTD.DIR |= PD2;
     308:	e0 e6       	ldi	r30, 0x60	; 96
     30a:	f4 e0       	ldi	r31, 0x04	; 4
     30c:	80 81       	ld	r24, Z
     30e:	84 60       	ori	r24, 0x04	; 4
     310:	80 83       	st	Z, r24
	}
	if (ch == 3){
     312:	c3 30       	cpi	r28, 0x03	; 3
     314:	51 f4       	brne	.+20     	; 0x32a <AnalogWrite+0x68>
		TCA0.SPLIT.HCMP0 = dutycalc(duty);
     316:	8d 2f       	mov	r24, r29
     318:	0e 94 4b 01 	call	0x296	; 0x296 <dutycalc>
     31c:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
		PORTD.DIR |= PD3;
     320:	e0 e6       	ldi	r30, 0x60	; 96
     322:	f4 e0       	ldi	r31, 0x04	; 4
     324:	80 81       	ld	r24, Z
     326:	88 60       	ori	r24, 0x08	; 8
     328:	80 83       	st	Z, r24
	}
	if (ch == 4){
     32a:	c4 30       	cpi	r28, 0x04	; 4
     32c:	51 f4       	brne	.+20     	; 0x342 <AnalogWrite+0x80>
		TCA1.SPLIT.LCMP2 = dutycalc(duty);
     32e:	8d 2f       	mov	r24, r29
     330:	0e 94 4b 01 	call	0x296	; 0x296 <dutycalc>
     334:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <__TEXT_REGION_LENGTH__+0x7e0a6c>
		PORTB.DIR |= PB2;
     338:	e0 e2       	ldi	r30, 0x20	; 32
     33a:	f4 e0       	ldi	r31, 0x04	; 4
     33c:	80 81       	ld	r24, Z
     33e:	82 60       	ori	r24, 0x02	; 2
     340:	80 83       	st	Z, r24
	}
	if (ch == 5){
     342:	c5 30       	cpi	r28, 0x05	; 5
     344:	51 f4       	brne	.+20     	; 0x35a <AnalogWrite+0x98>
		TCA1.SPLIT.HCMP0 = dutycalc(duty);
     346:	8d 2f       	mov	r24, r29
     348:	0e 94 4b 01 	call	0x296	; 0x296 <dutycalc>
     34c:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <__TEXT_REGION_LENGTH__+0x7e0a69>
		PORTB.DIR |= PB3;
     350:	e0 e2       	ldi	r30, 0x20	; 32
     352:	f4 e0       	ldi	r31, 0x04	; 4
     354:	80 81       	ld	r24, Z
     356:	84 60       	ori	r24, 0x04	; 4
     358:	80 83       	st	Z, r24
	}
	if (ch == 6){
     35a:	c6 30       	cpi	r28, 0x06	; 6
     35c:	51 f4       	brne	.+20     	; 0x372 <AnalogWrite+0xb0>
		
		TCA1.SPLIT.HCMP1 = dutycalc(duty);
     35e:	8d 2f       	mov	r24, r29
     360:	0e 94 4b 01 	call	0x296	; 0x296 <dutycalc>
     364:	80 93 6b 0a 	sts	0x0A6B, r24	; 0x800a6b <__TEXT_REGION_LENGTH__+0x7e0a6b>
		PORTB.DIR |= PB4;
     368:	e0 e2       	ldi	r30, 0x20	; 32
     36a:	f4 e0       	ldi	r31, 0x04	; 4
     36c:	80 81       	ld	r24, Z
     36e:	80 61       	ori	r24, 0x10	; 16
     370:	80 83       	st	Z, r24
	}
	if (ch == 7){
     372:	c7 30       	cpi	r28, 0x07	; 7
     374:	51 f4       	brne	.+20     	; 0x38a <AnalogWrite+0xc8>
		TCA1.SPLIT.HCMP2 = dutycalc(duty);
     376:	8d 2f       	mov	r24, r29
     378:	0e 94 4b 01 	call	0x296	; 0x296 <dutycalc>
     37c:	80 93 6d 0a 	sts	0x0A6D, r24	; 0x800a6d <__TEXT_REGION_LENGTH__+0x7e0a6d>
		PORTB.DIR |= PB5;
     380:	e0 e2       	ldi	r30, 0x20	; 32
     382:	f4 e0       	ldi	r31, 0x04	; 4
     384:	80 81       	ld	r24, Z
     386:	80 62       	ori	r24, 0x20	; 32
     388:	80 83       	st	Z, r24
	}


}
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <Read_Tacho>:
//Read frequency 
uint32_t Read_Tacho(char ch){
	uint32_t tacho_val = 0;
	uint32_t rpm = 0;
	//Changing event check channel
	if(ch == 0){
     390:	81 11       	cpse	r24, r1
     392:	04 c0       	rjmp	.+8      	; 0x39c <Read_Tacho+0xc>
		EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN0_gc; //Checks event channel 0
     394:	80 e4       	ldi	r24, 0x40	; 64
     396:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     39a:	29 c0       	rjmp	.+82     	; 0x3ee <Read_Tacho+0x5e>
	}
	else if (ch == 1){
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	21 f4       	brne	.+8      	; 0x3a8 <Read_Tacho+0x18>
		EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN1_gc; //Checks event channel 1
     3a0:	81 e4       	ldi	r24, 0x41	; 65
     3a2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3a6:	23 c0       	rjmp	.+70     	; 0x3ee <Read_Tacho+0x5e>
	}
	else if (ch == 2){
     3a8:	82 30       	cpi	r24, 0x02	; 2
     3aa:	21 f4       	brne	.+8      	; 0x3b4 <Read_Tacho+0x24>
		EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN2_gc; //Checks event channel 2
     3ac:	82 e4       	ldi	r24, 0x42	; 66
     3ae:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3b2:	1d c0       	rjmp	.+58     	; 0x3ee <Read_Tacho+0x5e>
	}
	else if (ch == 3){
     3b4:	83 30       	cpi	r24, 0x03	; 3
     3b6:	21 f4       	brne	.+8      	; 0x3c0 <Read_Tacho+0x30>
		EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN3_gc; //Checks event channel 3
     3b8:	83 e4       	ldi	r24, 0x43	; 67
     3ba:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3be:	17 c0       	rjmp	.+46     	; 0x3ee <Read_Tacho+0x5e>
	}
	else if (ch == 4){
     3c0:	84 30       	cpi	r24, 0x04	; 4
     3c2:	21 f4       	brne	.+8      	; 0x3cc <Read_Tacho+0x3c>
		EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN4_gc; //Checks event channel 4
     3c4:	84 e4       	ldi	r24, 0x44	; 68
     3c6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3ca:	11 c0       	rjmp	.+34     	; 0x3ee <Read_Tacho+0x5e>
	}
	else if (ch == 5){
     3cc:	85 30       	cpi	r24, 0x05	; 5
     3ce:	21 f4       	brne	.+8      	; 0x3d8 <Read_Tacho+0x48>
		EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN5_gc; //Checks event channel 5
     3d0:	85 e4       	ldi	r24, 0x45	; 69
     3d2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3d6:	0b c0       	rjmp	.+22     	; 0x3ee <Read_Tacho+0x5e>
	}
	else if (ch == 6){
     3d8:	86 30       	cpi	r24, 0x06	; 6
     3da:	21 f4       	brne	.+8      	; 0x3e4 <Read_Tacho+0x54>
		EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN6_gc; //Checks event channel 6
     3dc:	86 e4       	ldi	r24, 0x46	; 70
     3de:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
     3e2:	05 c0       	rjmp	.+10     	; 0x3ee <Read_Tacho+0x5e>
	}
	else if (ch == 7){
     3e4:	87 30       	cpi	r24, 0x07	; 7
     3e6:	19 f4       	brne	.+6      	; 0x3ee <Read_Tacho+0x5e>
		EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN7_gc; //Checks event channel 7
     3e8:	87 e4       	ldi	r24, 0x47	; 71
     3ea:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7e0212>
	}
	
	
	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL2_gc;
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__TEXT_REGION_LENGTH__+0x7e023e>
	tacho_val = TCB0.CCMP; //Reads the frequency of tacho from the TCB capture/compare register
     3f4:	20 91 0c 0b 	lds	r18, 0x0B0C	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
     3f8:	30 91 0d 0b 	lds	r19, 0x0B0D	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
     3fc:	c9 01       	movw	r24, r18
     3fe:	a0 e0       	ldi	r26, 0x00	; 0
     400:	b0 e0       	ldi	r27, 0x00	; 0
	
	//Remove extreme values when tacho value is 0 and denominator is 0, aka. improper fraction
	if(tacho_val == 0){
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	a1 05       	cpc	r26, r1
     406:	b1 05       	cpc	r27, r1
     408:	79 f0       	breq	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		rpm = 0;
		}else {
		rpm = ((F_CPU*60)/(tacho_val*2)); //Calculates RPM from freqency
     40a:	9c 01       	movw	r18, r24
     40c:	ad 01       	movw	r20, r26
     40e:	22 0f       	add	r18, r18
     410:	33 1f       	adc	r19, r19
     412:	44 1f       	adc	r20, r20
     414:	55 1f       	adc	r21, r21
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	70 e7       	ldi	r23, 0x70	; 112
     41a:	88 e3       	ldi	r24, 0x38	; 56
     41c:	99 e3       	ldi	r25, 0x39	; 57
     41e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodsi4>
     422:	ca 01       	movw	r24, r20
     424:	b9 01       	movw	r22, r18
     426:	03 c0       	rjmp	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL2_gc;
	tacho_val = TCB0.CCMP; //Reads the frequency of tacho from the TCB capture/compare register
	
	//Remove extreme values when tacho value is 0 and denominator is 0, aka. improper fraction
	if(tacho_val == 0){
		rpm = 0;
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	cb 01       	movw	r24, r22
		}else {
		rpm = ((F_CPU*60)/(tacho_val*2)); //Calculates RPM from freqency
	}
	TCB0.CCMP = 0x0000; //Resets the compare value
     42e:	10 92 0c 0b 	sts	0x0B0C, r1	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
     432:	10 92 0d 0b 	sts	0x0B0D, r1	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
	return rpm;
}
     436:	08 95       	ret

00000438 <TCA0_init>:
	TCA1_init();
	TCA0_init();
}

void TCA0_init(){
	PORTMUX.TCAROUTEA |= PORTMUX_TCA0_PORTD_gc; //CHANGE ___________________________
     438:	e0 ee       	ldi	r30, 0xE0	; 224
     43a:	f5 e0       	ldi	r31, 0x05	; 5
     43c:	86 81       	ldd	r24, Z+6	; 0x06
     43e:	83 60       	ori	r24, 0x03	; 3
     440:	86 83       	std	Z+6, r24	; 0x06
	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;	//Enable splitmode
     442:	e0 e0       	ldi	r30, 0x00	; 0
     444:	fa e0       	ldi	r31, 0x0A	; 10
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.HPER = 0xFF; //Set period Lowbits
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	87 a3       	std	Z+39, r24	; 0x27
	TCA0.SPLIT.LPER = 0xFF; //Set period Highbits
     44e:	86 a3       	std	Z+38, r24	; 0x26
	TCA0.SPLIT.CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV16_gc; //Enable clock and set prescaler (crystal clk/16)
     450:	89 e0       	ldi	r24, 0x09	; 9
     452:	80 83       	st	Z, r24
	TCA0.SPLIT.CTRLB = TCA_SPLIT_LCMP0EN_bm | TCA_SPLIT_LCMP1EN_bm | TCA_SPLIT_LCMP2EN_bm;	//Enable low compare bits
     454:	87 e0       	ldi	r24, 0x07	; 7
     456:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm | TCA_SPLIT_HCMP2EN_bm; //Enable High compare bits
     458:	81 81       	ldd	r24, Z+1	; 0x01
     45a:	80 67       	ori	r24, 0x70	; 112
     45c:	81 83       	std	Z+1, r24	; 0x01
     45e:	08 95       	ret

00000460 <TCA1_init>:
}

void TCA1_init(){
	PORTB.DIR |= (1<<3);
     460:	e0 e2       	ldi	r30, 0x20	; 32
     462:	f4 e0       	ldi	r31, 0x04	; 4
     464:	80 81       	ld	r24, Z
     466:	88 60       	ori	r24, 0x08	; 8
     468:	80 83       	st	Z, r24
	PORTB.PINCONFIG |= (1<<3);
     46a:	83 85       	ldd	r24, Z+11	; 0x0b
     46c:	88 60       	ori	r24, 0x08	; 8
     46e:	83 87       	std	Z+11, r24	; 0x0b
	PORTMUX.TCAROUTEA |= PORTMUX_TCA1_PORTB_gc; //Setup
     470:	e0 ee       	ldi	r30, 0xE0	; 224
     472:	f5 e0       	ldi	r31, 0x05	; 5
     474:	86 81       	ldd	r24, Z+6	; 0x06
     476:	86 83       	std	Z+6, r24	; 0x06
	TCA1.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;	//Enable splitmode
     478:	e0 e4       	ldi	r30, 0x40	; 64
     47a:	fa e0       	ldi	r31, 0x0A	; 10
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	83 83       	std	Z+3, r24	; 0x03
	TCA1.SPLIT.HPER = 0xFF; //Set period Lowbits
     480:	8f ef       	ldi	r24, 0xFF	; 255
     482:	87 a3       	std	Z+39, r24	; 0x27
	TCA1.SPLIT.LPER = 0xFF; //Set period Highbits
     484:	86 a3       	std	Z+38, r24	; 0x26
	TCA1.SPLIT.CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV16_gc; //Enable clock and set prescaler (crystal clk/16)
     486:	89 e0       	ldi	r24, 0x09	; 9
     488:	80 83       	st	Z, r24
	TCA1.SPLIT.CTRLB = TCA_SPLIT_LCMP2EN_bm;	//Enable low compare bits
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	81 83       	std	Z+1, r24	; 0x01
	TCA1.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm | TCA_SPLIT_HCMP2EN_bm; //Enable High compare bits
     48e:	81 81       	ldd	r24, Z+1	; 0x01
     490:	80 67       	ori	r24, 0x70	; 112
     492:	81 83       	std	Z+1, r24	; 0x01
     494:	08 95       	ret

00000496 <PWM_init>:
	TCB0.CCMP = 0x0000; //Resets the compare value
	return rpm;
}

void PWM_init(){
	TCA1_init();
     496:	0e 94 30 02 	call	0x460	; 0x460 <TCA1_init>
	TCA0_init();
     49a:	0e 94 1c 02 	call	0x438	; 0x438 <TCA0_init>
     49e:	08 95       	ret

000004a0 <TCB0_init>:
	TCA1.SPLIT.CTRLB = TCA_SPLIT_LCMP2EN_bm;	//Enable low compare bits
	TCA1.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm | TCA_SPLIT_HCMP2EN_bm; //Enable High compare bits
}

void TCB0_init(){
	PORTC.DIRCLR = (1<<0);
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
	TCB0.CCMP = 0x00;
     4a6:	e0 e0       	ldi	r30, 0x00	; 0
     4a8:	fb e0       	ldi	r31, 0x0B	; 11
     4aa:	14 86       	std	Z+12, r1	; 0x0c
     4ac:	15 86       	std	Z+13, r1	; 0x0d
	TCB0.CNT = 0x00;
     4ae:	12 86       	std	Z+10, r1	; 0x0a
     4b0:	13 86       	std	Z+11, r1	; 0x0b
	TCB0.CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_DIV1_gc;
     4b2:	80 81       	ld	r24, Z
     4b4:	81 60       	ori	r24, 0x01	; 1
     4b6:	80 83       	st	Z, r24
	TCB0.CTRLB = (1<<TCB_CCMPEN_bp) | TCB_CNTMODE_FRQ_gc;
     4b8:	83 e1       	ldi	r24, 0x13	; 19
     4ba:	81 83       	std	Z+1, r24	; 0x01
	TCB0.EVCTRL |= TCB_CAPTEI_bm;
     4bc:	84 81       	ldd	r24, Z+4	; 0x04
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	84 83       	std	Z+4, r24	; 0x04
     4c2:	08 95       	ret

000004c4 <RTC_init>:
 * Created: 12.05.2022 23:01:06
 *  Author: Idar Evenstad
 */ 
#include "SystemRTCandClk.h"

void RTC_init(int periode){
     4c4:	9c 01       	movw	r18, r24
	_PROTECTED_WRITE(CLKCTRL.XOSC32KCTRLA, CLKCTRL_ENABLE_bm);
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	88 ed       	ldi	r24, 0xD8	; 216
     4ca:	84 bf       	out	0x34, r24	; 52
     4cc:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	RTC.CLKSEL = RTC_CLKSEL_XOSC32K_gc;
     4d0:	e0 e4       	ldi	r30, 0x40	; 64
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	87 83       	std	Z+7, r24	; 0x07
	RTC.PER = periode; 
     4d8:	22 87       	std	Z+10, r18	; 0x0a
     4da:	33 87       	std	Z+11, r19	; 0x0b
	RTC.INTCTRL = RTC_OVF_bm;
     4dc:	92 83       	std	Z+2, r25	; 0x02
	RTC.CTRLA = RTC_PRESCALER_DIV32768_gc | RTC_RTCEN_bm;
     4de:	89 e7       	ldi	r24, 0x79	; 121
     4e0:	80 83       	st	Z, r24
     4e2:	08 95       	ret

000004e4 <Osc_init>:
}

//Set internal oscillator to set clock
void Osc_init(char main_clk){
	//_PROTECTED_WRITE() allows writing to protected registers CCP = 0xD8 | IOREG
	_PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA,(main_clk << CLKCTRL_FREQSEL0_bp)); 
     4e4:	88 0f       	add	r24, r24
     4e6:	88 0f       	add	r24, r24
     4e8:	98 ed       	ldi	r25, 0xD8	; 216
     4ea:	94 bf       	out	0x34, r25	; 52
     4ec:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     4f0:	08 95       	ret

000004f2 <System_init>:
}

void System_init(){
	PWM_init(); //PWM write init | Initialization of TCA clock
     4f2:	0e 94 4b 02 	call	0x496	; 0x496 <PWM_init>
	Osc_init(7); //Initialize Internal 4MHz Oscillator clock
     4f6:	87 e0       	ldi	r24, 0x07	; 7
     4f8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Osc_init>
	UART3_init(UART_bps); //Initialize UART
     4fc:	60 e8       	ldi	r22, 0x80	; 128
     4fe:	75 e2       	ldi	r23, 0x25	; 37
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 ed 08 	call	0x11da	; 0x11da <UART3_init>
	TCB0_init(); //Initialize TCB0 for measuring frequency
     508:	0e 94 50 02 	call	0x4a0	; 0x4a0 <TCB0_init>
	TWI_init();
     50c:	0e 94 28 03 	call	0x650	; 0x650 <TWI_init>
	RTC_init(0xE10); //1 hour periode
     510:	80 e1       	ldi	r24, 0x10	; 16
     512:	9e e0       	ldi	r25, 0x0E	; 14
     514:	0e 94 62 02 	call	0x4c4	; 0x4c4 <RTC_init>
	sei(); //Global interrupt enable
     518:	78 94       	sei
     51a:	08 95       	ret

0000051c <TWI_EndRead>:
	TempToUART(temperature);
	_delay_ms(1000);
	return temperature;
}
void TWI_EndRead(void){
	while(!I2C_DATA_RECEIVED);
     51c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     520:	88 23       	and	r24, r24
     522:	e4 f7       	brge	.-8      	; 0x51c <TWI_EndRead>
	TWI0.MCTRLB = TWI_MCMD_STOP_gc | TWI_ACKACT_NACK_gc; //Sends stop and NACK to end read operation
     524:	87 e0       	ldi	r24, 0x07	; 7
     526:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
     52a:	08 95       	ret

0000052c <TWI_ReadTempdata>:
}
uint8_t* TWI_ReadTempdata(void){
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
	uint8_t *tempdata = (uint8_t *) malloc(sizeof(uint8_t) * 3);
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 00 17 	call	0x2e00	; 0x2e00 <malloc>
     538:	ec 01       	movw	r28, r24
	while(!I2C_DATA_RECEIVED);	//Wait until data is received
     53a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     53e:	88 23       	and	r24, r24
     540:	e4 f7       	brge	.-8      	; 0x53a <TWI_ReadTempdata+0xe>
	status = TWI0.MDATA;		//Status data for slave
     542:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     546:	80 93 af 44 	sts	0x44AF, r24	; 0x8044af <status>
	while(!I2C_DATA_RECEIVED);
     54a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     54e:	88 23       	and	r24, r24
     550:	e4 f7       	brge	.-8      	; 0x54a <TWI_ReadTempdata+0x1e>
	humidbyteH = TWI0.MDATA;	//Read data
     552:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     556:	80 93 ae 44 	sts	0x44AE, r24	; 0x8044ae <humidbyteH>
	while(!I2C_DATA_RECEIVED);
     55a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     55e:	88 23       	and	r24, r24
     560:	e4 f7       	brge	.-8      	; 0x55a <TWI_ReadTempdata+0x2e>
	humidbyteL = TWI0.MDATA;
     562:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     566:	80 93 ad 44 	sts	0x44AD, r24	; 0x8044ad <humidbyteL>
	while(!I2C_DATA_RECEIVED);
     56a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     56e:	88 23       	and	r24, r24
     570:	e4 f7       	brge	.-8      	; 0x56a <TWI_ReadTempdata+0x3e>
	humidtempbyte = TWI0.MDATA;
     572:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     576:	80 93 ac 44 	sts	0x44AC, r24	; 0x8044ac <humidtempbyte>
	*tempdata = humidtempbyte;	//Save in array
     57a:	80 91 ac 44 	lds	r24, 0x44AC	; 0x8044ac <humidtempbyte>
     57e:	88 83       	st	Y, r24
	while(!I2C_DATA_RECEIVED);
     580:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     584:	88 23       	and	r24, r24
     586:	e4 f7       	brge	.-8      	; 0x580 <TWI_ReadTempdata+0x54>
	tempbyteH = TWI0.MDATA;
     588:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     58c:	80 93 ab 44 	sts	0x44AB, r24	; 0x8044ab <tempbyteH>
	*(tempdata+1) = tempbyteH;
     590:	80 91 ab 44 	lds	r24, 0x44AB	; 0x8044ab <tempbyteH>
     594:	89 83       	std	Y+1, r24	; 0x01
	while(!I2C_DATA_RECEIVED);
     596:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     59a:	88 23       	and	r24, r24
     59c:	e4 f7       	brge	.-8      	; 0x596 <TWI_ReadTempdata+0x6a>
	tempbyteL = TWI0.MDATA;
     59e:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     5a2:	80 93 aa 44 	sts	0x44AA, r24	; 0x8044aa <tempbyteL>
	*(tempdata+2) = tempbyteL;
     5a6:	80 91 aa 44 	lds	r24, 0x44AA	; 0x8044aa <tempbyteL>
     5aa:	8a 83       	std	Y+2, r24	; 0x02
	TWI_EndRead();
     5ac:	0e 94 8e 02 	call	0x51c	; 0x51c <TWI_EndRead>
	return tempdata;			//return array
}
     5b0:	ce 01       	movw	r24, r28
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <TWI_TransmittData>:
	TWI_TransmittData(0x00);				     //DATA1, unspecified but mentioned in AHT10 datasheet
	TWI_EndWrite();                              //Send operation is over
	_delay_ms(75);								 //delay as said in the AHT10 datasheet
}
void TWI_TransmittData(char data){
	while(I2C_SLAVE_NOT_ACK | I2C_NOT_COMPLETE); //Check if slave ACK is received
     5b8:	e5 e0       	ldi	r30, 0x05	; 5
     5ba:	f9 e0       	ldi	r31, 0x09	; 9
     5bc:	90 81       	ld	r25, Z
     5be:	90 71       	andi	r25, 0x10	; 16
     5c0:	20 81       	ld	r18, Z
     5c2:	22 95       	swap	r18
     5c4:	26 95       	lsr	r18
     5c6:	26 95       	lsr	r18
     5c8:	23 70       	andi	r18, 0x03	; 3
     5ca:	31 e0       	ldi	r19, 0x01	; 1
     5cc:	23 27       	eor	r18, r19
     5ce:	42 2f       	mov	r20, r18
     5d0:	41 70       	andi	r20, 0x01	; 1
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	9a 01       	movw	r18, r20
     5d6:	29 2b       	or	r18, r25
     5d8:	23 2b       	or	r18, r19
     5da:	71 f7       	brne	.-36     	; 0x5b8 <TWI_TransmittData>
	TWI0.MDATA = data;
     5dc:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     5e0:	08 95       	ret

000005e2 <TWI_EndWrite>:
}
void TWI_EndWrite(void){
	while(I2C_SLAVE_NOT_ACK | I2C_NOT_COMPLETE);
     5e2:	e5 e0       	ldi	r30, 0x05	; 5
     5e4:	f9 e0       	ldi	r31, 0x09	; 9
     5e6:	80 81       	ld	r24, Z
     5e8:	80 71       	andi	r24, 0x10	; 16
     5ea:	90 81       	ld	r25, Z
     5ec:	92 95       	swap	r25
     5ee:	96 95       	lsr	r25
     5f0:	96 95       	lsr	r25
     5f2:	93 70       	andi	r25, 0x03	; 3
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	92 27       	eor	r25, r18
     5f8:	49 2f       	mov	r20, r25
     5fa:	41 70       	andi	r20, 0x01	; 1
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	9a 01       	movw	r18, r20
     600:	28 2b       	or	r18, r24
     602:	c9 01       	movw	r24, r18
     604:	89 2b       	or	r24, r25
     606:	69 f7       	brne	.-38     	; 0x5e2 <TWI_EndWrite>
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
     60e:	08 95       	ret

00000610 <TWI_TransmittAddr>:
}

void TWI_TransmittAddr(char addr, char RWbit){
	TWI0.MADDR = TWI_SET_ADDR(addr, RWbit);
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	86 2b       	or	r24, r22
     618:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
     61c:	08 95       	ret

0000061e <TWI_StartTemp>:
	*(tempdata+2) = tempbyteL;
	TWI_EndRead();
	return tempdata;			//return array
}
void TWI_StartTemp(void){
	TWI_TransmittAddr(AHT10_ADDRESS, WRITE);
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	88 e3       	ldi	r24, 0x38	; 56
     622:	0e 94 08 03 	call	0x610	; 0x610 <TWI_TransmittAddr>
	TWI_TransmittData(0xAC);				     //Command for triggering measurement
     626:	8c ea       	ldi	r24, 0xAC	; 172
     628:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <TWI_TransmittData>
	TWI_TransmittData(0x03);					 //DATA0, unspecified but mentioned in AHT10 datasheet
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <TWI_TransmittData>
	TWI_TransmittData(0x00);				     //DATA1, unspecified but mentioned in AHT10 datasheet
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <TWI_TransmittData>
	TWI_EndWrite();                              //Send operation is over
     638:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TWI_EndWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63c:	2f e7       	ldi	r18, 0x7F	; 127
     63e:	89 ea       	ldi	r24, 0xA9	; 169
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	21 50       	subi	r18, 0x01	; 1
     644:	80 40       	sbci	r24, 0x00	; 0
     646:	90 40       	sbci	r25, 0x00	; 0
     648:	e1 f7       	brne	.-8      	; 0x642 <TWI_StartTemp+0x24>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <TWI_StartTemp+0x2e>
     64c:	00 00       	nop
     64e:	08 95       	ret

00000650 <TWI_init>:
void TWI_TransmittAddr(char addr, char RWbit){
	TWI0.MADDR = TWI_SET_ADDR(addr, RWbit);
}

void TWI_init(void){
	TWI0.MBAUD = (uint8_t)TWI0_BAUD(I2C_SCL_FREQ, 0);			//Set the Baudrate for
     650:	e0 e0       	ldi	r30, 0x00	; 0
     652:	f9 e0       	ldi	r31, 0x09	; 9
     654:	8b e4       	ldi	r24, 0x4B	; 75
     656:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA = TWI_ENABLE_bm;								//Enable TWI
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;						//Set bus to IDLE
     65c:	85 83       	std	Z+5, r24	; 0x05
	TWI0.MCTRLA |= TWI_SMEN_bm;									//Set to SmartMode to auto ACK after receivin data
     65e:	83 81       	ldd	r24, Z+3	; 0x03
     660:	82 60       	ori	r24, 0x02	; 2
     662:	83 83       	std	Z+3, r24	; 0x03
     664:	08 95       	ret

00000666 <TempCalc>:
}

float TempCalc(void){
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
	//Temporary values
	uint16_t tempbyte = 0;
	uint32_t temporarybyte = 0;
	
	temporarybyte = humidtempbyte & 0b00001111; //Remove humidity data
     66a:	60 91 ac 44 	lds	r22, 0x44AC	; 0x8044ac <humidtempbyte>
     66e:	6f 70       	andi	r22, 0x0F	; 15
     670:	86 2f       	mov	r24, r22
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 e0       	ldi	r26, 0x00	; 0
     676:	b0 e0       	ldi	r27, 0x00	; 0
	temporarybyte = temporarybyte << 16; //Shift to get 20-bit
     678:	bc 01       	movw	r22, r24
     67a:	55 27       	eor	r21, r21
     67c:	44 27       	eor	r20, r20
	tempbyte = tempbyteH << 8 | tempbyteL; //Merge togheter to get 16-bit
     67e:	80 91 ab 44 	lds	r24, 0x44AB	; 0x8044ab <tempbyteH>
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	98 2f       	mov	r25, r24
     686:	88 27       	eor	r24, r24
     688:	20 91 aa 44 	lds	r18, 0x44AA	; 0x8044aa <tempbyteL>
     68c:	82 2b       	or	r24, r18
	temporarybyte = temporarybyte | tempbyte; //Or togheter to get the full 20-bit
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	8a 01       	movw	r16, r20
     694:	9b 01       	movw	r18, r22
     696:	08 2b       	or	r16, r24
     698:	19 2b       	or	r17, r25
     69a:	2a 2b       	or	r18, r26
     69c:	3b 2b       	or	r19, r27
     69e:	c9 01       	movw	r24, r18
     6a0:	b8 01       	movw	r22, r16
	
	temperature = ((temporarybyte/(float)1048576)*200-50); //Calculation for temperature, from AHT10 datasheet
     6a2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e8       	ldi	r20, 0x80	; 128
     6ac:	55 e3       	ldi	r21, 0x35	; 53
     6ae:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__mulsf3>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	48 e4       	ldi	r20, 0x48	; 72
     6b8:	53 e4       	ldi	r21, 0x43	; 67
     6ba:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__mulsf3>
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	48 e4       	ldi	r20, 0x48	; 72
     6c4:	52 e4       	ldi	r21, 0x42	; 66
     6c6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__subsf3>
     6ca:	60 93 a6 44 	sts	0x44A6, r22	; 0x8044a6 <__data_end>
     6ce:	70 93 a7 44 	sts	0x44A7, r23	; 0x8044a7 <__data_end+0x1>
     6d2:	80 93 a8 44 	sts	0x44A8, r24	; 0x8044a8 <__data_end+0x2>
     6d6:	90 93 a9 44 	sts	0x44A9, r25	; 0x8044a9 <__data_end+0x3>
	return temperature;
}
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	08 95       	ret

000006e0 <TempToUART>:

void TempToUART(float temp){
	sprintf(TxBuffer, "temp = %.2f", temp);
     6e0:	9f 93       	push	r25
     6e2:	8f 93       	push	r24
     6e4:	7f 93       	push	r23
     6e6:	6f 93       	push	r22
     6e8:	87 e0       	ldi	r24, 0x07	; 7
     6ea:	90 e4       	ldi	r25, 0x40	; 64
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	88 e1       	ldi	r24, 0x18	; 24
     6f2:	95 e4       	ldi	r25, 0x45	; 69
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 b5 19 	call	0x336a	; 0x336a <sprintf>
	UART_SendBuffer();
     6fc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	UART_NewLine();
     700:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
}
     704:	8d b7       	in	r24, 0x3d	; 61
     706:	9e b7       	in	r25, 0x3e	; 62
     708:	08 96       	adiw	r24, 0x08	; 8
     70a:	8d bf       	out	0x3d, r24	; 61
     70c:	9e bf       	out	0x3e, r25	; 62
     70e:	08 95       	ret

00000710 <TWI_getTemp>:

//Buffer for writing UART
char TxBuffer[24];

void TWI_getTemp(void){
	TWI_StartTemp();
     710:	0e 94 0f 03 	call	0x61e	; 0x61e <TWI_StartTemp>
	TWI_TransmittAddr(AHT10_ADDRESS, READ);
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	88 e3       	ldi	r24, 0x38	; 56
     718:	0e 94 08 03 	call	0x610	; 0x610 <TWI_TransmittAddr>
	//Save array in individual values from array
	uint8_t *arr = TWI_ReadTempdata();
     71c:	0e 94 96 02 	call	0x52c	; 0x52c <TWI_ReadTempdata>
     720:	fc 01       	movw	r30, r24
	humidtempbyte = arr[0];
     722:	80 81       	ld	r24, Z
     724:	80 93 ac 44 	sts	0x44AC, r24	; 0x8044ac <humidtempbyte>
	tempbyteH = arr[1];
     728:	81 81       	ldd	r24, Z+1	; 0x01
     72a:	80 93 ab 44 	sts	0x44AB, r24	; 0x8044ab <tempbyteH>
	tempbyteL = arr[2];
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	80 93 aa 44 	sts	0x44AA, r24	; 0x8044aa <tempbyteL>
	temperature = TempCalc();
     734:	0e 94 33 03 	call	0x666	; 0x666 <TempCalc>
     738:	60 93 a6 44 	sts	0x44A6, r22	; 0x8044a6 <__data_end>
     73c:	70 93 a7 44 	sts	0x44A7, r23	; 0x8044a7 <__data_end+0x1>
     740:	80 93 a8 44 	sts	0x44A8, r24	; 0x8044a8 <__data_end+0x2>
     744:	90 93 a9 44 	sts	0x44A9, r25	; 0x8044a9 <__data_end+0x3>
	TempToUART(temperature);
     748:	0e 94 70 03 	call	0x6e0	; 0x6e0 <TempToUART>
     74c:	2f ef       	ldi	r18, 0xFF	; 255
     74e:	83 ed       	ldi	r24, 0xD3	; 211
     750:	90 e3       	ldi	r25, 0x30	; 48
     752:	21 50       	subi	r18, 0x01	; 1
     754:	80 40       	sbci	r24, 0x00	; 0
     756:	90 40       	sbci	r25, 0x00	; 0
     758:	e1 f7       	brne	.-8      	; 0x752 <TWI_getTemp+0x42>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <TWI_getTemp+0x4c>
     75c:	00 00       	nop
     75e:	08 95       	ret

00000760 <ISR_TWI>:
	sprintf(TxBuffer, "temp = %.2f", temp);
	UART_SendBuffer();
	UART_NewLine();
}

void ISR_TWI(){
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
		TWI_getTemp();
     768:	0e 94 88 03 	call	0x710	; 0x710 <TWI_getTemp>
		EEPROM_SaveFanStatus();
     76c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <EEPROM_SaveFanStatus>
		if(temperature > 70){
     770:	c0 90 a6 44 	lds	r12, 0x44A6	; 0x8044a6 <__data_end>
     774:	d0 90 a7 44 	lds	r13, 0x44A7	; 0x8044a7 <__data_end+0x1>
     778:	e0 90 a8 44 	lds	r14, 0x44A8	; 0x8044a8 <__data_end+0x2>
     77c:	f0 90 a9 44 	lds	r15, 0x44A9	; 0x8044a9 <__data_end+0x3>
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	4c e8       	ldi	r20, 0x8C	; 140
     786:	52 e4       	ldi	r21, 0x42	; 66
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__gesf2>
     790:	18 16       	cp	r1, r24
     792:	3c f4       	brge	.+14     	; 0x7a2 <ISR_TWI+0x42>
			TxBuffer_StringWrite("Check Temp");
     794:	83 e1       	ldi	r24, 0x13	; 19
     796:	90 e4       	ldi	r25, 0x40	; 64
     798:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
			UART_NewLine();
     79c:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
     7a0:	19 c0       	rjmp	.+50     	; 0x7d4 <ISR_TWI+0x74>
		}
		else if(temperature > 85){
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	4a ea       	ldi	r20, 0xAA	; 170
     7a8:	52 e4       	ldi	r21, 0x42	; 66
     7aa:	c7 01       	movw	r24, r14
     7ac:	b6 01       	movw	r22, r12
     7ae:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__gesf2>
     7b2:	18 16       	cp	r1, r24
     7b4:	4c f4       	brge	.+18     	; 0x7c8 <ISR_TWI+0x68>
			TxBuffer_StringWrite("Temp to High, shutting down");
     7b6:	8e e1       	ldi	r24, 0x1E	; 30
     7b8:	90 e4       	ldi	r25, 0x40	; 64
     7ba:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
			UART_NewLine();
     7be:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
			AllOFF();
     7c2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <AllOFF>
     7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <ISR_TWI+0x74>
			} else {
			TxBuffer_StringWrite("Ok");
     7c8:	8a e3       	ldi	r24, 0x3A	; 58
     7ca:	90 e4       	ldi	r25, 0x40	; 64
     7cc:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
			UART_NewLine();
     7d0:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		}
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	08 95       	ret

000007de <my_eeprom_update_byte>:
#include "EEPROM.h"

// Write
void my_eeprom_update_byte(uint8_t adr, uint8_t value)
{
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm); //Holds the program until the NVMCTRL register is ready to receive data
     7de:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
     7e2:	91 fd       	sbrc	r25, 1
     7e4:	fc cf       	rjmp	.-8      	; 0x7de <my_eeprom_update_byte>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, 0x13);	//Sets register to Erase and Write (EEERWR) | and sets the CPU.CCP register to SPM or Allow Self-Programming
     7e6:	9d e9       	ldi	r25, 0x9D	; 157
     7e8:	23 e1       	ldi	r18, 0x13	; 19
     7ea:	94 bf       	out	0x34, r25	; 52
     7ec:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*) (MAPPED_EEPROM_START+adr) = value;	//Writes data to EEPROM
     7f0:	e8 2f       	mov	r30, r24
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	fc 5e       	subi	r31, 0xEC	; 236
     7f6:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, 0x00); //Sets the register back to no command (NOCMD)
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	94 bf       	out	0x34, r25	; 52
     7fc:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
     800:	08 95       	ret

00000802 <my_eeprom_update_char>:
}

void my_eeprom_update_char(uint8_t adr, uint16_t value)
{
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	c8 2f       	mov	r28, r24
     808:	d6 2f       	mov	r29, r22
     80a:	67 2f       	mov	r22, r23
	
	//Converts from uint8 to uint16
	valueHigh = (value >> 8);
	valueLow = value & 0xff;
	
	my_eeprom_update_byte(adr, valueHigh); //Sets the HIGH byte
     80c:	0e 94 ef 03 	call	0x7de	; 0x7de <my_eeprom_update_byte>
	my_eeprom_update_byte((adr+1), valueLow); //Sets the LOW byte
     810:	6d 2f       	mov	r22, r29
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	8c 0f       	add	r24, r28
     816:	0e 94 ef 03 	call	0x7de	; 0x7de <my_eeprom_update_byte>
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <my_eeprom_read_byte>:

// Read from EEPROM
uint8_t my_eeprom_read_byte(uint8_t adr)
{
	uint8_t byte;
	byte = *(uint8_t*) (MAPPED_EEPROM_START+adr); // Reads value from EEPROM
     820:	e8 2f       	mov	r30, r24
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	fc 5e       	subi	r31, 0xEC	; 236
	return byte; //Returns the read value
}
     826:	80 81       	ld	r24, Z
     828:	08 95       	ret

0000082a <my_eeprom_read_char>:

uint16_t my_eeprom_read_char(uint8_t adr)
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	d8 2f       	mov	r29, r24
	uint8_t valueHigh;
	uint8_t valueLow;
	
	valueHigh = my_eeprom_read_byte(adr); //Reads the High-byte
     830:	0e 94 10 04 	call	0x820	; 0x820 <my_eeprom_read_byte>
     834:	c8 2f       	mov	r28, r24
	valueLow = my_eeprom_read_byte(adr+1); //Reads the Low-byte
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	8d 0f       	add	r24, r29
     83a:	0e 94 10 04 	call	0x820	; 0x820 <my_eeprom_read_byte>
	
	uint16_t value;
	value = ((valueHigh << 8) | valueLow);	//Adds the values together to get a complete uint16
     83e:	2c 2f       	mov	r18, r28
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	32 2f       	mov	r19, r18
     844:	22 27       	eor	r18, r18
	
	return value; //Returns the read value
}
     846:	a9 01       	movw	r20, r18
     848:	48 2b       	or	r20, r24
     84a:	ca 01       	movw	r24, r20
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <EEPROM_ReadAll>:
		TxBuffer_StringWrite(": ");
		TxBuffer_IntWrite(TxBuffer, SpeedFromEEPROMch[i]);
		UART_NewLine();
	}
}
void EEPROM_ReadAll(void){
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
	//Read RPM values from trend data in EEPROM
	SpeedFromEEPROMch[0] = my_eeprom_read_char(fan_0_EEPROM_adr);
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 15 04 	call	0x82a	; 0x82a <my_eeprom_read_char>
     85c:	cd ec       	ldi	r28, 0xCD	; 205
     85e:	d4 e4       	ldi	r29, 0x44	; 68
     860:	88 83       	st	Y, r24
     862:	99 83       	std	Y+1, r25	; 0x01
	SpeedFromEEPROMch[1] = my_eeprom_read_char(fan_1_EEPROM_adr);
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	0e 94 15 04 	call	0x82a	; 0x82a <my_eeprom_read_char>
     86a:	8a 83       	std	Y+2, r24	; 0x02
     86c:	9b 83       	std	Y+3, r25	; 0x03
	SpeedFromEEPROMch[2] = my_eeprom_read_char(fan_2_EEPROM_adr);
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	0e 94 15 04 	call	0x82a	; 0x82a <my_eeprom_read_char>
     874:	8c 83       	std	Y+4, r24	; 0x04
     876:	9d 83       	std	Y+5, r25	; 0x05
	SpeedFromEEPROMch[3] = my_eeprom_read_char(fan_3_EEPROM_adr);
     878:	86 e0       	ldi	r24, 0x06	; 6
     87a:	0e 94 15 04 	call	0x82a	; 0x82a <my_eeprom_read_char>
     87e:	8e 83       	std	Y+6, r24	; 0x06
     880:	9f 83       	std	Y+7, r25	; 0x07
	SpeedFromEEPROMch[4] = my_eeprom_read_char(fan_4_EEPROM_adr);
     882:	88 e0       	ldi	r24, 0x08	; 8
     884:	0e 94 15 04 	call	0x82a	; 0x82a <my_eeprom_read_char>
     888:	88 87       	std	Y+8, r24	; 0x08
     88a:	99 87       	std	Y+9, r25	; 0x09
	SpeedFromEEPROMch[5] = my_eeprom_read_char(fan_5_EEPROM_adr);
     88c:	8a e0       	ldi	r24, 0x0A	; 10
     88e:	0e 94 15 04 	call	0x82a	; 0x82a <my_eeprom_read_char>
     892:	8a 87       	std	Y+10, r24	; 0x0a
     894:	9b 87       	std	Y+11, r25	; 0x0b
	SpeedFromEEPROMch[6] = my_eeprom_read_char(fan_6_EEPROM_adr);
     896:	8c e0       	ldi	r24, 0x0C	; 12
     898:	0e 94 15 04 	call	0x82a	; 0x82a <my_eeprom_read_char>
     89c:	8c 87       	std	Y+12, r24	; 0x0c
     89e:	9d 87       	std	Y+13, r25	; 0x0d
	SpeedFromEEPROMch[7] = my_eeprom_read_char(fan_7_EEPROM_adr);
     8a0:	8e e0       	ldi	r24, 0x0E	; 14
     8a2:	0e 94 15 04 	call	0x82a	; 0x82a <my_eeprom_read_char>
     8a6:	8e 87       	std	Y+14, r24	; 0x0e
     8a8:	9f 87       	std	Y+15, r25	; 0x0f
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <UART_Echo>:
		TxBuffer_StringWrite("help, wrong syntax");
	}
}
void UART_Echo(char recvbyte){
	
	if(((recvbyte > 31) && (recvbyte != backspace127)) || (recvbyte == Bell) || (recvbyte == CR) || (recvbyte == LF)){
     8b0:	80 32       	cpi	r24, 0x20	; 32
     8b2:	10 f0       	brcs	.+4      	; 0x8b8 <UART_Echo+0x8>
     8b4:	8f 37       	cpi	r24, 0x7F	; 127
     8b6:	31 f4       	brne	.+12     	; 0x8c4 <UART_Echo+0x14>
     8b8:	87 30       	cpi	r24, 0x07	; 7
     8ba:	21 f0       	breq	.+8      	; 0x8c4 <UART_Echo+0x14>
     8bc:	8d 30       	cpi	r24, 0x0D	; 13
     8be:	11 f0       	breq	.+4      	; 0x8c4 <UART_Echo+0x14>
     8c0:	8a 30       	cpi	r24, 0x0A	; 10
     8c2:	61 f4       	brne	.+24     	; 0x8dc <UART_Echo+0x2c>
		if(RingbufferFull){
     8c4:	90 91 b1 44 	lds	r25, 0x44B1	; 0x8044b1 <RingbufferFull>
     8c8:	99 23       	and	r25, r25
     8ca:	21 f0       	breq	.+8      	; 0x8d4 <UART_Echo+0x24>
			UART_TX_BUFFER = Bell;								//Writes bell(end of line alert)
     8cc:	97 e0       	ldi	r25, 0x07	; 7
     8ce:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <UART_Echo+0x28>
			} else {
			UART_TX_BUFFER = recvbyte;							//Puts the received byte in the tx-buffer
     8d4:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
		}
		NoBackspace = 0;										//Lower the NoBackspace FLag, since something is written
     8d8:	10 92 48 45 	sts	0x4548, r1	; 0x804548 <NoBackspace>
	}
	if((recvbyte == backspace) || (recvbyte == backspace127)) { //Check if backspace is pressed
     8dc:	88 30       	cpi	r24, 0x08	; 8
     8de:	11 f0       	breq	.+4      	; 0x8e4 <UART_Echo+0x34>
     8e0:	8f 37       	cpi	r24, 0x7F	; 127
     8e2:	91 f4       	brne	.+36     	; 0x908 <UART_Echo+0x58>
		if(RingbufferTail == RingbufferHead){				    //Check if buffer is empty
     8e4:	20 91 b2 44 	lds	r18, 0x44B2	; 0x8044b2 <RingbufferTail>
     8e8:	90 91 b3 44 	lds	r25, 0x44B3	; 0x8044b3 <RingbufferHead>
     8ec:	29 13       	cpse	r18, r25
     8ee:	0a c0       	rjmp	.+20     	; 0x904 <UART_Echo+0x54>
			if(NoBackspace == 0){								//Check if NoBackspace flag is low, if so raise it
     8f0:	90 91 48 45 	lds	r25, 0x4548	; 0x804548 <NoBackspace>
     8f4:	91 11       	cpse	r25, r1
     8f6:	08 c0       	rjmp	.+16     	; 0x908 <UART_Echo+0x58>
				NoBackspace = 1;                                //The flag is to disable the user from using backspace
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	90 93 48 45 	sts	0x4548, r25	; 0x804548 <NoBackspace>
				UART_TX_BUFFER = recvbyte;						//Sends the received byte since | backspace
     8fe:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     902:	08 95       	ret
			}
			} else {
			UART_TX_BUFFER = recvbyte;							//Sends the recieved byte, thats not the ones checked above
     904:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     908:	08 95       	ret

0000090a <SearchForCommand>:
	}
}

//Function for finding the incoming command
char SearchForCommand(void){
	for(uint8_t CompareCommand = 0; CompareCommand < NoOfCommands; CompareCommand++){ //Searching command for command in the commandarray
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	1c c0       	rjmp	.+56     	; 0x946 <SearchForCommand+0x3c>
		for(uint8_t CompareChar = 0; CompareChar < MaxCommandLength; CompareChar++){  //Search character for character in the commandarray
			if(commandArray[CompareCommand][CompareChar] == ProcessedBuffer[CompareChar]){ //Check if the command in the received data is equal to commands that are available
     90e:	29 2f       	mov	r18, r25
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	4d e0       	ldi	r20, 0x0D	; 13
     914:	84 9f       	mul	r24, r20
     916:	f0 01       	movw	r30, r0
     918:	11 24       	eor	r1, r1
     91a:	e3 5c       	subi	r30, 0xC3	; 195
     91c:	fb 4b       	sbci	r31, 0xBB	; 187
     91e:	e2 0f       	add	r30, r18
     920:	f3 1f       	adc	r31, r19
     922:	40 81       	ld	r20, Z
     924:	f9 01       	movw	r30, r18
     926:	ef 50       	subi	r30, 0x0F	; 15
     928:	fb 4b       	sbci	r31, 0xBB	; 187
     92a:	20 81       	ld	r18, Z
     92c:	42 13       	cpse	r20, r18
     92e:	04 c0       	rjmp	.+8      	; 0x938 <SearchForCommand+0x2e>
				if(ProcessedBuffer[CompareChar] == 0){
     930:	21 11       	cpse	r18, r1
     932:	03 c0       	rjmp	.+6      	; 0x93a <SearchForCommand+0x30>
					return CompareCommand + 1;
     934:	8f 5f       	subi	r24, 0xFF	; 255
     936:	08 95       	ret
				}
				} else {
				CompareChar = MaxCommandLength;
     938:	9d e0       	ldi	r25, 0x0D	; 13
}

//Function for finding the incoming command
char SearchForCommand(void){
	for(uint8_t CompareCommand = 0; CompareCommand < NoOfCommands; CompareCommand++){ //Searching command for command in the commandarray
		for(uint8_t CompareChar = 0; CompareChar < MaxCommandLength; CompareChar++){  //Search character for character in the commandarray
     93a:	9f 5f       	subi	r25, 0xFF	; 255
     93c:	01 c0       	rjmp	.+2      	; 0x940 <SearchForCommand+0x36>
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	9d 30       	cpi	r25, 0x0D	; 13
     942:	28 f3       	brcs	.-54     	; 0x90e <SearchForCommand+0x4>
	}
}

//Function for finding the incoming command
char SearchForCommand(void){
	for(uint8_t CompareCommand = 0; CompareCommand < NoOfCommands; CompareCommand++){ //Searching command for command in the commandarray
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	88 30       	cpi	r24, 0x08	; 8
     948:	d0 f3       	brcs	.-12     	; 0x93e <SearchForCommand+0x34>
				} else {
				CompareChar = MaxCommandLength;
			}
		}
	}
	return 0; //Process done
     94a:	80 e0       	ldi	r24, 0x00	; 0
}
     94c:	08 95       	ret

0000094e <CharInBUF>:
}

//Function for adding character in to the rx-buffer
void CharInBUF(char incomingchar){
	
	if(incomingchar == backspace || incomingchar == backspace127){
     94e:	88 30       	cpi	r24, 0x08	; 8
     950:	11 f0       	breq	.+4      	; 0x956 <CharInBUF+0x8>
     952:	8f 37       	cpi	r24, 0x7F	; 127
     954:	b9 f4       	brne	.+46     	; 0x984 <CharInBUF+0x36>
		if(RingbufferHead != RingbufferTail){ //Check if its not empty
     956:	90 91 b3 44 	lds	r25, 0x44B3	; 0x8044b3 <RingbufferHead>
     95a:	80 91 b2 44 	lds	r24, 0x44B2	; 0x8044b2 <RingbufferTail>
     95e:	98 17       	cp	r25, r24
     960:	09 f4       	brne	.+2      	; 0x964 <CharInBUF+0x16>
     962:	51 c0       	rjmp	.+162    	; 0xa06 <CharInBUF+0xb8>
			if(RingbufferHead == 0){
     964:	80 91 b3 44 	lds	r24, 0x44B3	; 0x8044b3 <RingbufferHead>
     968:	81 11       	cpse	r24, r1
     96a:	04 c0       	rjmp	.+8      	; 0x974 <CharInBUF+0x26>
				RingbufferHead = RxBufferLength - 1;
     96c:	87 e1       	ldi	r24, 0x17	; 23
     96e:	80 93 b3 44 	sts	0x44B3, r24	; 0x8044b3 <RingbufferHead>
     972:	05 c0       	rjmp	.+10     	; 0x97e <CharInBUF+0x30>
				} else {
				RingbufferHead--; //Decrease buffer index, since it is being emptied | move one character back until emtied
     974:	80 91 b3 44 	lds	r24, 0x44B3	; 0x8044b3 <RingbufferHead>
     978:	81 50       	subi	r24, 0x01	; 1
     97a:	80 93 b3 44 	sts	0x44B3, r24	; 0x8044b3 <RingbufferHead>
			}
			RingbufferFull = FALSE;	//Lower the flag, since it is empty
     97e:	10 92 b1 44 	sts	0x44B1, r1	; 0x8044b1 <RingbufferFull>
     982:	08 95       	ret
		}
		} else {
		
		if(RingbufferFull){ //Check if the the flag raise is true (if its still full)
     984:	90 91 b1 44 	lds	r25, 0x44B1	; 0x8044b1 <RingbufferFull>
     988:	99 23       	and	r25, r25
     98a:	99 f0       	breq	.+38     	; 0x9b2 <CharInBUF+0x64>
			if((RingbufferTail - RingbufferHead == 1) || ((RingbufferHead == RxBufferLength - 1) && (RingbufferTail == 0))){
     98c:	20 91 b2 44 	lds	r18, 0x44B2	; 0x8044b2 <RingbufferTail>
     990:	90 91 b3 44 	lds	r25, 0x44B3	; 0x8044b3 <RingbufferHead>
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	29 1b       	sub	r18, r25
     998:	31 09       	sbc	r19, r1
     99a:	21 30       	cpi	r18, 0x01	; 1
     99c:	31 05       	cpc	r19, r1
     99e:	49 f0       	breq	.+18     	; 0x9b2 <CharInBUF+0x64>
     9a0:	90 91 b3 44 	lds	r25, 0x44B3	; 0x8044b3 <RingbufferHead>
     9a4:	97 31       	cpi	r25, 0x17	; 23
     9a6:	19 f4       	brne	.+6      	; 0x9ae <CharInBUF+0x60>
     9a8:	90 91 b2 44 	lds	r25, 0x44B2	; 0x8044b2 <RingbufferTail>
     9ac:	91 11       	cpse	r25, r1
				//Buffer is full, the byte gets ignored
				} else {
				//The claim is false, change flag back | not full
				RingbufferFull = FALSE;
     9ae:	10 92 b1 44 	sts	0x44B1, r1	; 0x8044b1 <RingbufferFull>
			}
		}
		//If the rxbuffer is not full, put a char into it
		if(!RingbufferFull){
     9b2:	90 91 b1 44 	lds	r25, 0x44B1	; 0x8044b1 <RingbufferFull>
     9b6:	91 11       	cpse	r25, r1
     9b8:	26 c0       	rjmp	.+76     	; 0xa06 <CharInBUF+0xb8>
			RxBuffer[RingbufferHead] = incomingchar; //Put char in to buffer
     9ba:	e0 91 b3 44 	lds	r30, 0x44B3	; 0x8044b3 <RingbufferHead>
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	e0 50       	subi	r30, 0x00	; 0
     9c2:	fb 4b       	sbci	r31, 0xBB	; 187
     9c4:	80 83       	st	Z, r24
			//Checks again if the buffer is full, since a new character is put in it
			if((RingbufferTail - RingbufferHead == 1) || ((RingbufferHead == RxBufferLength - 1) && (RingbufferTail == 0))){
     9c6:	80 91 b2 44 	lds	r24, 0x44B2	; 0x8044b2 <RingbufferTail>
     9ca:	20 91 b3 44 	lds	r18, 0x44B3	; 0x8044b3 <RingbufferHead>
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	82 1b       	sub	r24, r18
     9d2:	91 09       	sbc	r25, r1
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	41 f0       	breq	.+16     	; 0x9e8 <CharInBUF+0x9a>
     9d8:	80 91 b3 44 	lds	r24, 0x44B3	; 0x8044b3 <RingbufferHead>
     9dc:	87 31       	cpi	r24, 0x17	; 23
     9de:	41 f4       	brne	.+16     	; 0x9f0 <CharInBUF+0xa2>
     9e0:	80 91 b2 44 	lds	r24, 0x44B2	; 0x8044b2 <RingbufferTail>
     9e4:	81 11       	cpse	r24, r1
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <CharInBUF+0xa2>
				RingbufferFull = TRUE; //Buffer is full, and the full flag will be raised
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 b1 44 	sts	0x44B1, r24	; 0x8044b1 <RingbufferFull>
     9ee:	08 95       	ret
				} else {
				RingbufferHead++; //If its not full, increase the index of the buffer, since a new character is put in to it
     9f0:	80 91 b3 44 	lds	r24, 0x44B3	; 0x8044b3 <RingbufferHead>
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	80 93 b3 44 	sts	0x44B3, r24	; 0x8044b3 <RingbufferHead>
				
				//If the buffer has reached the end, wrap around
				if(RingbufferHead >= RxBufferLength){
     9fa:	80 91 b3 44 	lds	r24, 0x44B3	; 0x8044b3 <RingbufferHead>
     9fe:	88 31       	cpi	r24, 0x18	; 24
     a00:	10 f0       	brcs	.+4      	; 0xa06 <CharInBUF+0xb8>
					RingbufferHead = 0; //Buffer wrapped around
     a02:	10 92 b3 44 	sts	0x44B3, r1	; 0x8044b3 <RingbufferHead>
     a06:	08 95       	ret

00000a08 <UART_getRxBufferChar>:
}

//Function to extract character for character from the Rx-buffer
char UART_getRxBufferChar(void){
	char BufferChar; //Temporary character to return
	if(RingbufferHead == RingbufferTail){ //Check if the buffer is empty, return 0 if true
     a08:	90 91 b3 44 	lds	r25, 0x44B3	; 0x8044b3 <RingbufferHead>
     a0c:	80 91 b2 44 	lds	r24, 0x44B2	; 0x8044b2 <RingbufferTail>
     a10:	98 17       	cp	r25, r24
     a12:	91 f0       	breq	.+36     	; 0xa38 <UART_getRxBufferChar+0x30>
		return 0;
		} else {
		BufferChar = RxBuffer[RingbufferTail]; //Saves each char in buffer to return
     a14:	e0 91 b2 44 	lds	r30, 0x44B2	; 0x8044b2 <RingbufferTail>
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	e0 50       	subi	r30, 0x00	; 0
     a1c:	fb 4b       	sbci	r31, 0xBB	; 187
     a1e:	80 81       	ld	r24, Z
		RingbufferTail++;					   //Increment tail, since characters is extracted from buffer
     a20:	90 91 b2 44 	lds	r25, 0x44B2	; 0x8044b2 <RingbufferTail>
     a24:	9f 5f       	subi	r25, 0xFF	; 255
     a26:	90 93 b2 44 	sts	0x44B2, r25	; 0x8044b2 <RingbufferTail>
		if (RingbufferTail >= RxBufferLength){ //Is all characters sent, if so reset buffer
     a2a:	90 91 b2 44 	lds	r25, 0x44B2	; 0x8044b2 <RingbufferTail>
     a2e:	98 31       	cpi	r25, 0x18	; 24
     a30:	20 f0       	brcs	.+8      	; 0xa3a <UART_getRxBufferChar+0x32>
			RingbufferTail = 0;				   //Reset buffer
     a32:	10 92 b2 44 	sts	0x44B2, r1	; 0x8044b2 <RingbufferTail>
     a36:	08 95       	ret

//Function to extract character for character from the Rx-buffer
char UART_getRxBufferChar(void){
	char BufferChar; //Temporary character to return
	if(RingbufferHead == RingbufferTail){ //Check if the buffer is empty, return 0 if true
		return 0;
     a38:	80 e0       	ldi	r24, 0x00	; 0
		if (RingbufferTail >= RxBufferLength){ //Is all characters sent, if so reset buffer
			RingbufferTail = 0;				   //Reset buffer
		}
		return BufferChar; //Return buffer, one character at the time
	}
}
     a3a:	08 95       	ret

00000a3c <ProcessWord>:
	}
	TxBuffer_StringWrite("PWM fully on all fans, fans off");
}

//Function for processing the characters, so its easy to check for correct commands
char ProcessWord(void){
     a3c:	cf 93       	push	r28
	for(uint8_t LoopNo = 0; LoopNo < MaxWordLength; LoopNo++){ //Scroll through, to ensure that all characters in buffer is checked
     a3e:	c0 e0       	ldi	r28, 0x00	; 0
     a40:	16 c0       	rjmp	.+44     	; 0xa6e <ProcessWord+0x32>
		uint8_t RxChar; //Make a temporary Rx character to check each character in buffer
		RxChar = UART_getRxBufferChar(); //Gets characters from the rx buffer via UART_getRXBufferChar();
     a42:	0e 94 04 05 	call	0xa08	; 0xa08 <UART_getRxBufferChar>
		if(RxChar == 0 && LoopNo == 0){ //Check if no char is received
     a46:	81 11       	cpse	r24, r1
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <ProcessWord+0x12>
     a4a:	cc 23       	and	r28, r28
     a4c:	a1 f0       	breq	.+40     	; 0xa76 <ProcessWord+0x3a>
			return 0; //Ready for checking
		}
		if(RxChar > 32){
     a4e:	81 32       	cpi	r24, 0x21	; 33
     a50:	38 f0       	brcs	.+14     	; 0xa60 <ProcessWord+0x24>
			ProcessedBuffer[LoopNo] = RxChar; //Puts the characters in a buffer for the Processed Characters
     a52:	ec 2f       	mov	r30, r28
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	ef 50       	subi	r30, 0x0F	; 15
     a58:	fb 4b       	sbci	r31, 0xBB	; 187
     a5a:	80 83       	st	Z, r24
	TxBuffer_StringWrite("PWM fully on all fans, fans off");
}

//Function for processing the characters, so its easy to check for correct commands
char ProcessWord(void){
	for(uint8_t LoopNo = 0; LoopNo < MaxWordLength; LoopNo++){ //Scroll through, to ensure that all characters in buffer is checked
     a5c:	cf 5f       	subi	r28, 0xFF	; 255
     a5e:	07 c0       	rjmp	.+14     	; 0xa6e <ProcessWord+0x32>
			return 0; //Ready for checking
		}
		if(RxChar > 32){
			ProcessedBuffer[LoopNo] = RxChar; //Puts the characters in a buffer for the Processed Characters
			} else {
			ProcessedBuffer[LoopNo] = 0; //Tops up the buffer with a "Stop-bit" (Null-character)
     a60:	ec 2f       	mov	r30, r28
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	ef 50       	subi	r30, 0x0F	; 15
     a66:	fb 4b       	sbci	r31, 0xBB	; 187
     a68:	10 82       	st	Z, r1
			break; //exit loop
		}
	}
	
	return 1; //Process done
     a6a:	81 e0       	ldi	r24, 0x01	; 1
		}
		if(RxChar > 32){
			ProcessedBuffer[LoopNo] = RxChar; //Puts the characters in a buffer for the Processed Characters
			} else {
			ProcessedBuffer[LoopNo] = 0; //Tops up the buffer with a "Stop-bit" (Null-character)
			break; //exit loop
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <ProcessWord+0x3c>
	TxBuffer_StringWrite("PWM fully on all fans, fans off");
}

//Function for processing the characters, so its easy to check for correct commands
char ProcessWord(void){
	for(uint8_t LoopNo = 0; LoopNo < MaxWordLength; LoopNo++){ //Scroll through, to ensure that all characters in buffer is checked
     a6e:	cc 30       	cpi	r28, 0x0C	; 12
     a70:	40 f3       	brcs	.-48     	; 0xa42 <ProcessWord+0x6>
			ProcessedBuffer[LoopNo] = 0; //Tops up the buffer with a "Stop-bit" (Null-character)
			break; //exit loop
		}
	}
	
	return 1; //Process done
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <ProcessWord+0x3c>
char ProcessWord(void){
	for(uint8_t LoopNo = 0; LoopNo < MaxWordLength; LoopNo++){ //Scroll through, to ensure that all characters in buffer is checked
		uint8_t RxChar; //Make a temporary Rx character to check each character in buffer
		RxChar = UART_getRxBufferChar(); //Gets characters from the rx buffer via UART_getRXBufferChar();
		if(RxChar == 0 && LoopNo == 0){ //Check if no char is received
			return 0; //Ready for checking
     a76:	80 e0       	ldi	r24, 0x00	; 0
			break; //exit loop
		}
	}
	
	return 1; //Process done
}
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <Ringbuffer_Reset>:
	}
}

//Reset the buffer values
void Ringbuffer_Reset(void){
	RingbufferHead = 0;
     a7c:	10 92 b3 44 	sts	0x44B3, r1	; 0x8044b3 <RingbufferHead>
	RingbufferTail = 0;
     a80:	10 92 b2 44 	sts	0x44B2, r1	; 0x8044b2 <RingbufferTail>
	RingbufferFull = 0;
     a84:	10 92 b1 44 	sts	0x44B1, r1	; 0x8044b1 <RingbufferFull>
     a88:	08 95       	ret

00000a8a <UART_SendChar>:
	UART_SendChar(LF);
}

//Send one character at a time
void UART_SendChar(char CharToSend){
	while(!TxBufferFlag){ //Checking the Tx-Flag
     a8a:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
     a8e:	95 ff       	sbrs	r25, 5
     a90:	fc cf       	rjmp	.-8      	; 0xa8a <UART_SendChar>
		//Loop until buffer is empty
	}
	UART_TX_BUFFER = CharToSend; //When Tx-buffer is ready, send data to buffer
     a92:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     a96:	08 95       	ret

00000a98 <UART_NewLine>:
	RingbufferFull = 0;
}

//Function for new line, by sending both CR and LF | Next line, cursor position leftmost
void UART_NewLine(void){
	UART_SendChar(CR);
     a98:	8d e0       	ldi	r24, 0x0D	; 13
     a9a:	0e 94 45 05 	call	0xa8a	; 0xa8a <UART_SendChar>
	UART_SendChar(LF);
     a9e:	8a e0       	ldi	r24, 0x0A	; 10
     aa0:	0e 94 45 05 	call	0xa8a	; 0xa8a <UART_SendChar>
     aa4:	08 95       	ret

00000aa6 <UART_SendBuffer>:
	}
	UART_TX_BUFFER = CharToSend; //When Tx-buffer is ready, send data to buffer
}

//Function for sending the whole buffer (strings)
void UART_SendBuffer(void){
     aa6:	cf 93       	push	r28
	for(uint8_t SendLoop = 0; SendLoop < TxBufferLength; SendLoop++){ //Loops trough the whole tx-buffer, to ensure that all characters will be sent
     aa8:	c0 e0       	ldi	r28, 0x00	; 0
     aaa:	0a c0       	rjmp	.+20     	; 0xac0 <UART_SendBuffer+0x1a>
		char TxChar;				 //Saves each character in the buffer, in a temporary tx-buffer character
		TxChar = TxBuffer[SendLoop]; //Saves one character at the time
     aac:	ec 2f       	mov	r30, r28
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	e8 5e       	subi	r30, 0xE8	; 232
     ab2:	fa 4b       	sbci	r31, 0xBA	; 186
     ab4:	80 81       	ld	r24, Z
		if (TxChar!=0){				 //Checks for the "stop-bit" in the temporary character
     ab6:	88 23       	and	r24, r24
     ab8:	29 f0       	breq	.+10     	; 0xac4 <UART_SendBuffer+0x1e>
			UART_SendChar(TxChar);	 //Sends the data as long it has not reached the end
     aba:	0e 94 45 05 	call	0xa8a	; 0xa8a <UART_SendChar>
	UART_TX_BUFFER = CharToSend; //When Tx-buffer is ready, send data to buffer
}

//Function for sending the whole buffer (strings)
void UART_SendBuffer(void){
	for(uint8_t SendLoop = 0; SendLoop < TxBufferLength; SendLoop++){ //Loops trough the whole tx-buffer, to ensure that all characters will be sent
     abe:	cf 5f       	subi	r28, 0xFF	; 255
     ac0:	c0 33       	cpi	r28, 0x30	; 48
     ac2:	a0 f3       	brcs	.-24     	; 0xaac <UART_SendBuffer+0x6>
			UART_SendChar(TxChar);	 //Sends the data as long it has not reached the end
			}else{
			return;					 //Return out of loop, when the "stop-bit" comes
		}
	}
}
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <UART_DigitsCheck>:
	return speed;
}
int UART_DigitsCheck(void){
	int numofdigits = 0;
	
	for(int i = 0; ProcessedBuffer[i] != 0; i++){
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
		UART_SendBuffer();
	}
	return speed;
}
int UART_DigitsCheck(void){
	int numofdigits = 0;
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	50 e0       	ldi	r21, 0x00	; 0
	
	for(int i = 0; ProcessedBuffer[i] != 0; i++){
     ad0:	09 c0       	rjmp	.+18     	; 0xae4 <UART_DigitsCheck+0x1c>
		ProcessedBuffer[i] = ProcessedBuffer[i] - '0';
     ad2:	f9 01       	movw	r30, r18
     ad4:	ef 50       	subi	r30, 0x0F	; 15
     ad6:	fb 4b       	sbci	r31, 0xBB	; 187
     ad8:	90 53       	subi	r25, 0x30	; 48
     ada:	90 83       	st	Z, r25
		numofdigits++;
     adc:	4f 5f       	subi	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
	return speed;
}
int UART_DigitsCheck(void){
	int numofdigits = 0;
	
	for(int i = 0; ProcessedBuffer[i] != 0; i++){
     ae0:	2f 5f       	subi	r18, 0xFF	; 255
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	f9 01       	movw	r30, r18
     ae6:	ef 50       	subi	r30, 0x0F	; 15
     ae8:	fb 4b       	sbci	r31, 0xBB	; 187
     aea:	90 81       	ld	r25, Z
     aec:	91 11       	cpse	r25, r1
     aee:	f1 cf       	rjmp	.-30     	; 0xad2 <UART_DigitsCheck+0xa>
		ProcessedBuffer[i] = ProcessedBuffer[i] - '0';
		numofdigits++;
	}
	return numofdigits;
}
     af0:	ca 01       	movw	r24, r20
     af2:	08 95       	ret

00000af4 <UART_EchoCheck>:
		
	}
	return speed;
}
void UART_EchoCheck(void){
	if (EchoON){
     af4:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <EchoON>
     af8:	88 23       	and	r24, r24
     afa:	51 f0       	breq	.+20     	; 0xb10 <UART_EchoCheck+0x1c>
		strcpy(TxBuffer,"Echo is on");
     afc:	8b e0       	ldi	r24, 0x0B	; 11
     afe:	ed e3       	ldi	r30, 0x3D	; 61
     b00:	f0 e4       	ldi	r31, 0x40	; 64
     b02:	a8 e1       	ldi	r26, 0x18	; 24
     b04:	b5 e4       	ldi	r27, 0x45	; 69
     b06:	01 90       	ld	r0, Z+
     b08:	0d 92       	st	X+, r0
     b0a:	8a 95       	dec	r24
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <UART_EchoCheck+0x12>
     b0e:	08 95       	ret
		}else{
		strcpy(TxBuffer,"Echo is off");
     b10:	8c e0       	ldi	r24, 0x0C	; 12
     b12:	e8 e4       	ldi	r30, 0x48	; 72
     b14:	f0 e4       	ldi	r31, 0x40	; 64
     b16:	a8 e1       	ldi	r26, 0x18	; 24
     b18:	b5 e4       	ldi	r27, 0x45	; 69
     b1a:	01 90       	ld	r0, Z+
     b1c:	0d 92       	st	X+, r0
     b1e:	8a 95       	dec	r24
     b20:	e1 f7       	brne	.-8      	; 0xb1a <UART_EchoCheck+0x26>
     b22:	08 95       	ret

00000b24 <ResetSHell>:
	}
}
void ResetSHell(){
	UART_NewLine();
     b24:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	strcpy(TxBuffer,"Write an command: ");
     b28:	83 e1       	ldi	r24, 0x13	; 19
     b2a:	e4 e5       	ldi	r30, 0x54	; 84
     b2c:	f0 e4       	ldi	r31, 0x40	; 64
     b2e:	a8 e1       	ldi	r26, 0x18	; 24
     b30:	b5 e4       	ldi	r27, 0x45	; 69
     b32:	01 90       	ld	r0, Z+
     b34:	0d 92       	st	X+, r0
     b36:	8a 95       	dec	r24
     b38:	e1 f7       	brne	.-8      	; 0xb32 <ResetSHell+0xe>
	UART_SendBuffer();
     b3a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	Ringbuffer_Reset();
     b3e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <Ringbuffer_Reset>
	NoBackspace = 1;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <NoBackspace>
	RecvCommand = 0;
     b48:	10 92 b4 44 	sts	0x44B4, r1	; 0x8044b4 <RecvCommand>
     b4c:	08 95       	ret

00000b4e <NumCheck>:
}
int NumCheck(int num){
	int n = 0;
	
	if (!(ProcessedBuffer[num] <= 9 && ProcessedBuffer[num] >= 0)){
     b4e:	8f 50       	subi	r24, 0x0F	; 15
     b50:	9b 4b       	sbci	r25, 0xBB	; 187
     b52:	fc 01       	movw	r30, r24
     b54:	80 81       	ld	r24, Z
     b56:	8a 30       	cpi	r24, 0x0A	; 10
     b58:	80 f0       	brcs	.+32     	; 0xb7a <NumCheck+0x2c>
		strcpy(TxBuffer,"Please enter a number");
     b5a:	86 e1       	ldi	r24, 0x16	; 22
     b5c:	e7 e6       	ldi	r30, 0x67	; 103
     b5e:	f0 e4       	ldi	r31, 0x40	; 64
     b60:	a8 e1       	ldi	r26, 0x18	; 24
     b62:	b5 e4       	ldi	r27, 0x45	; 69
     b64:	01 90       	ld	r0, Z+
     b66:	0d 92       	st	X+, r0
     b68:	8a 95       	dec	r24
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <NumCheck+0x16>
		UART_SendBuffer();
     b6c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		UART_NewLine();
     b70:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		n = 404;
     b74:	84 e9       	ldi	r24, 0x94	; 148
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	08 95       	ret
		} else {
		n = ProcessedBuffer[num];
     b7a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return n;
}
     b7c:	08 95       	ret

00000b7e <UART_CheckFanInput>:
}

int UART_CheckFanInput(char digits){
	int tempspeed = 0;
	
	if(digits == 1){
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	49 f4       	brne	.+18     	; 0xb94 <UART_CheckFanInput+0x16>
		n1 = NumCheck(0);
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 a7 05 	call	0xb4e	; 0xb4e <NumCheck>
     b8a:	80 93 fe 44 	sts	0x44FE, r24	; 0x8044fe <n1>
     b8e:	90 93 ff 44 	sts	0x44FF, r25	; 0x8044ff <n1+0x1>
     b92:	6f c0       	rjmp	.+222    	; 0xc72 <UART_CheckFanInput+0xf4>
		
		tempspeed = n1;
		} else if (digits == 2) {
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	11 f5       	brne	.+68     	; 0xbdc <UART_CheckFanInput+0x5e>
		n1 = NumCheck(0);
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <NumCheck>
     ba0:	80 93 fe 44 	sts	0x44FE, r24	; 0x8044fe <n1>
     ba4:	90 93 ff 44 	sts	0x44FF, r25	; 0x8044ff <n1+0x1>
		n2 = NumCheck(1);
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 a7 05 	call	0xb4e	; 0xb4e <NumCheck>
     bb0:	80 93 ed 44 	sts	0x44ED, r24	; 0x8044ed <n2>
     bb4:	90 93 ee 44 	sts	0x44EE, r25	; 0x8044ee <n2+0x1>
		tempspeed = n1*10 + n2;
     bb8:	20 91 fe 44 	lds	r18, 0x44FE	; 0x8044fe <n1>
     bbc:	30 91 ff 44 	lds	r19, 0x44FF	; 0x8044ff <n1+0x1>
     bc0:	a9 01       	movw	r20, r18
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	22 0f       	add	r18, r18
     bc8:	33 1f       	adc	r19, r19
     bca:	22 0f       	add	r18, r18
     bcc:	33 1f       	adc	r19, r19
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	24 0f       	add	r18, r20
     bd4:	35 1f       	adc	r19, r21
     bd6:	82 0f       	add	r24, r18
     bd8:	93 1f       	adc	r25, r19
     bda:	4b c0       	rjmp	.+150    	; 0xc72 <UART_CheckFanInput+0xf4>
		} else if (digits == 3){
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	09 f0       	breq	.+2      	; 0xbe2 <UART_CheckFanInput+0x64>
     be0:	46 c0       	rjmp	.+140    	; 0xc6e <UART_CheckFanInput+0xf0>
		n1 = NumCheck(0);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <NumCheck>
     bea:	80 93 fe 44 	sts	0x44FE, r24	; 0x8044fe <n1>
     bee:	90 93 ff 44 	sts	0x44FF, r25	; 0x8044ff <n1+0x1>
		n2 = NumCheck(1);
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <NumCheck>
     bfa:	80 93 ed 44 	sts	0x44ED, r24	; 0x8044ed <n2>
     bfe:	90 93 ee 44 	sts	0x44EE, r25	; 0x8044ee <n2+0x1>
		if(n1 != 1 || n2 != 0){
     c02:	20 91 fe 44 	lds	r18, 0x44FE	; 0x8044fe <n1>
     c06:	30 91 ff 44 	lds	r19, 0x44FF	; 0x8044ff <n1+0x1>
     c0a:	21 30       	cpi	r18, 0x01	; 1
     c0c:	31 05       	cpc	r19, r1
     c0e:	11 f4       	brne	.+4      	; 0xc14 <UART_CheckFanInput+0x96>
     c10:	89 2b       	or	r24, r25
     c12:	e9 f0       	breq	.+58     	; 0xc4e <UART_CheckFanInput+0xd0>
			strcpy(TxBuffer,"Number is greater then 100 or not a number");
     c14:	8b e2       	ldi	r24, 0x2B	; 43
     c16:	ed e7       	ldi	r30, 0x7D	; 125
     c18:	f0 e4       	ldi	r31, 0x40	; 64
     c1a:	a8 e1       	ldi	r26, 0x18	; 24
     c1c:	b5 e4       	ldi	r27, 0x45	; 69
     c1e:	01 90       	ld	r0, Z+
     c20:	0d 92       	st	X+, r0
     c22:	8a 95       	dec	r24
     c24:	e1 f7       	brne	.-8      	; 0xc1e <UART_CheckFanInput+0xa0>
			UART_SendBuffer();
     c26:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
			UART_NewLine();
     c2a:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
			strcpy(TxBuffer,"Put in a number between 0 and 100");
     c2e:	82 e2       	ldi	r24, 0x22	; 34
     c30:	e8 ea       	ldi	r30, 0xA8	; 168
     c32:	f0 e4       	ldi	r31, 0x40	; 64
     c34:	a8 e1       	ldi	r26, 0x18	; 24
     c36:	b5 e4       	ldi	r27, 0x45	; 69
     c38:	01 90       	ld	r0, Z+
     c3a:	0d 92       	st	X+, r0
     c3c:	8a 95       	dec	r24
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <UART_CheckFanInput+0xba>
			UART_SendBuffer();
     c40:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
			UART_NewLine();
     c44:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
			tempspeed = 404;
     c48:	84 e9       	ldi	r24, 0x94	; 148
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	12 c0       	rjmp	.+36     	; 0xc72 <UART_CheckFanInput+0xf4>
			} else {
			tempspeed = 100;
			strcpy(TxBuffer,"Argument is 100, PWM is fully on");
     c4e:	81 e2       	ldi	r24, 0x21	; 33
     c50:	ea ec       	ldi	r30, 0xCA	; 202
     c52:	f0 e4       	ldi	r31, 0x40	; 64
     c54:	a8 e1       	ldi	r26, 0x18	; 24
     c56:	b5 e4       	ldi	r27, 0x45	; 69
     c58:	01 90       	ld	r0, Z+
     c5a:	0d 92       	st	X+, r0
     c5c:	8a 95       	dec	r24
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <UART_CheckFanInput+0xda>
			UART_SendBuffer();
     c60:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
			UART_NewLine();
     c64:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
			strcpy(TxBuffer,"Put in a number between 0 and 100");
			UART_SendBuffer();
			UART_NewLine();
			tempspeed = 404;
			} else {
			tempspeed = 100;
     c68:	84 e6       	ldi	r24, 0x64	; 100
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <UART_CheckFanInput+0xf4>
	}
	return numofdigits;
}

int UART_CheckFanInput(char digits){
	int tempspeed = 0;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
			strcpy(TxBuffer,"Argument is 100, PWM is fully on");
			UART_SendBuffer();
			UART_NewLine();
		}
	}
	if (tempspeed > 100){
     c72:	85 36       	cpi	r24, 0x65	; 101
     c74:	91 05       	cpc	r25, r1
     c76:	dc f0       	brlt	.+54     	; 0xcae <UART_CheckFanInput+0x130>
		strcpy(TxBuffer,"Wrong Input");
     c78:	8c e0       	ldi	r24, 0x0C	; 12
     c7a:	eb ee       	ldi	r30, 0xEB	; 235
     c7c:	f0 e4       	ldi	r31, 0x40	; 64
     c7e:	a8 e1       	ldi	r26, 0x18	; 24
     c80:	b5 e4       	ldi	r27, 0x45	; 69
     c82:	01 90       	ld	r0, Z+
     c84:	0d 92       	st	X+, r0
     c86:	8a 95       	dec	r24
     c88:	e1 f7       	brne	.-8      	; 0xc82 <UART_CheckFanInput+0x104>
		UART_SendBuffer();
     c8a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		UART_NewLine();
     c8e:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		strcpy(TxBuffer,"Try again");
     c92:	8a e0       	ldi	r24, 0x0A	; 10
     c94:	e7 ef       	ldi	r30, 0xF7	; 247
     c96:	f0 e4       	ldi	r31, 0x40	; 64
     c98:	a8 e1       	ldi	r26, 0x18	; 24
     c9a:	b5 e4       	ldi	r27, 0x45	; 69
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	8a 95       	dec	r24
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <UART_CheckFanInput+0x11e>
		UART_SendBuffer();
     ca4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		UART_NewLine();
     ca8:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <UART_CheckFanInput+0x138>
		} else {
		speed = tempspeed;
     cae:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <speed>
     cb2:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <speed+0x1>
		
	}
	return speed;
}
     cb6:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <speed>
     cba:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <speed+0x1>
     cbe:	08 95       	ret

00000cc0 <UART_FanSpeedSet>:
			return;					 //Return out of loop, when the "stop-bit" comes
		}
	}
}

int UART_FanSpeedSet(){
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
	int channel = 0;
	channel = ProcessedBuffer[0] - '0';
     cc8:	c0 91 f1 44 	lds	r28, 0x44F1	; 0x8044f1 <ProcessedBuffer>
     ccc:	d0 e0       	ldi	r29, 0x00	; 0
     cce:	e0 97       	sbiw	r28, 0x30	; 48
	if(ProcessWord() != 0){
     cd0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <ProcessWord>
     cd4:	88 23       	and	r24, r24
     cd6:	09 f4       	brne	.+2      	; 0xcda <UART_FanSpeedSet+0x1a>
     cd8:	63 c0       	rjmp	.+198    	; 0xda0 <UART_FanSpeedSet+0xe0>
		int numofdigits = 0;
		
		numofdigits = UART_DigitsCheck();
     cda:	0e 94 64 05 	call	0xac8	; 0xac8 <UART_DigitsCheck>
     cde:	8c 01       	movw	r16, r24

		
		if (numofdigits == 1){
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	c1 f4       	brne	.+48     	; 0xd14 <UART_FanSpeedSet+0x54>
			if(ProcessedBuffer[0] == 0){
     ce4:	80 91 f1 44 	lds	r24, 0x44F1	; 0x8044f1 <ProcessedBuffer>
     ce8:	81 11       	cpse	r24, r1
     cea:	0d c0       	rjmp	.+26     	; 0xd06 <UART_FanSpeedSet+0x46>
				strcpy(TxBuffer,"Argument is 0, PWM off, fan full power");
     cec:	87 e2       	ldi	r24, 0x27	; 39
     cee:	e1 e0       	ldi	r30, 0x01	; 1
     cf0:	f1 e4       	ldi	r31, 0x41	; 65
     cf2:	a8 e1       	ldi	r26, 0x18	; 24
     cf4:	b5 e4       	ldi	r27, 0x45	; 69
     cf6:	01 90       	ld	r0, Z+
     cf8:	0d 92       	st	X+, r0
     cfa:	8a 95       	dec	r24
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <UART_FanSpeedSet+0x36>
				UART_SendBuffer();
     cfe:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
				UART_NewLine();
     d02:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
			}
			speed = UART_CheckFanInput(1);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	0e 94 bf 05 	call	0xb7e	; 0xb7e <UART_CheckFanInput>
     d0c:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <speed>
     d10:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <speed+0x1>
		}
		if(numofdigits == 2){
     d14:	02 30       	cpi	r16, 0x02	; 2
     d16:	11 05       	cpc	r17, r1
     d18:	c9 f4       	brne	.+50     	; 0xd4c <UART_FanSpeedSet+0x8c>
			if(ProcessedBuffer[0] == 0){
     d1a:	80 91 f1 44 	lds	r24, 0x44F1	; 0x8044f1 <ProcessedBuffer>
     d1e:	81 11       	cpse	r24, r1
     d20:	0e c0       	rjmp	.+28     	; 0xd3e <UART_FanSpeedSet+0x7e>
				strcpy(TxBuffer,"Argument can't start with 0");
     d22:	8c e1       	ldi	r24, 0x1C	; 28
     d24:	e8 e2       	ldi	r30, 0x28	; 40
     d26:	f1 e4       	ldi	r31, 0x41	; 65
     d28:	a8 e1       	ldi	r26, 0x18	; 24
     d2a:	b5 e4       	ldi	r27, 0x45	; 69
     d2c:	01 90       	ld	r0, Z+
     d2e:	0d 92       	st	X+, r0
     d30:	8a 95       	dec	r24
     d32:	e1 f7       	brne	.-8      	; 0xd2c <UART_FanSpeedSet+0x6c>
				UART_SendBuffer();
     d34:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
				UART_NewLine();
     d38:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
     d3c:	07 c0       	rjmp	.+14     	; 0xd4c <UART_FanSpeedSet+0x8c>
				} else {
				
				speed = UART_CheckFanInput(2);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	0e 94 bf 05 	call	0xb7e	; 0xb7e <UART_CheckFanInput>
     d44:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <speed>
     d48:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <speed+0x1>
				
			}
		}
		if(numofdigits == 3){
     d4c:	03 30       	cpi	r16, 0x03	; 3
     d4e:	11 05       	cpc	r17, r1
     d50:	39 f4       	brne	.+14     	; 0xd60 <UART_FanSpeedSet+0xa0>
			speed = UART_CheckFanInput(3);
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	0e 94 bf 05 	call	0xb7e	; 0xb7e <UART_CheckFanInput>
     d58:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <speed>
     d5c:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <speed+0x1>
			
		}
		sprintf(TxBuffer,"Fan %u",channel);
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	84 e4       	ldi	r24, 0x44	; 68
     d66:	91 e4       	ldi	r25, 0x41	; 65
     d68:	9f 93       	push	r25
     d6a:	8f 93       	push	r24
     d6c:	88 e1       	ldi	r24, 0x18	; 24
     d6e:	95 e4       	ldi	r25, 0x45	; 69
     d70:	9f 93       	push	r25
     d72:	8f 93       	push	r24
     d74:	0e 94 b5 19 	call	0x336a	; 0x336a <sprintf>
		UART_SendBuffer();
     d78:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		strcpy(TxBuffer," written to: ");
     d7c:	8e e0       	ldi	r24, 0x0E	; 14
     d7e:	eb e4       	ldi	r30, 0x4B	; 75
     d80:	f1 e4       	ldi	r31, 0x41	; 65
     d82:	a8 e1       	ldi	r26, 0x18	; 24
     d84:	b5 e4       	ldi	r27, 0x45	; 69
     d86:	01 90       	ld	r0, Z+
     d88:	0d 92       	st	X+, r0
     d8a:	8a 95       	dec	r24
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <UART_FanSpeedSet+0xc6>
		UART_SendBuffer();
     d8e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0b c0       	rjmp	.+22     	; 0xdb6 <UART_FanSpeedSet+0xf6>

		} else {
		strcpy(TxBuffer,"No number argument");
     da0:	83 e1       	ldi	r24, 0x13	; 19
     da2:	e9 e5       	ldi	r30, 0x59	; 89
     da4:	f1 e4       	ldi	r31, 0x41	; 65
     da6:	a8 e1       	ldi	r26, 0x18	; 24
     da8:	b5 e4       	ldi	r27, 0x45	; 69
     daa:	01 90       	ld	r0, Z+
     dac:	0d 92       	st	X+, r0
     dae:	8a 95       	dec	r24
     db0:	e1 f7       	brne	.-8      	; 0xdaa <UART_FanSpeedSet+0xea>
		UART_SendBuffer();
     db2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	}
	return speed;
}
     db6:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <speed>
     dba:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <speed+0x1>
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <LengthofInt>:
	}
	
	
}

uint8_t LengthofInt(uint32_t tacho){
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
	//Function for finding the length of an integer
	int count = 0;
     dcc:	c0 e0       	ldi	r28, 0x00	; 0
     dce:	d0 e0       	ldi	r29, 0x00	; 0
	while(tacho!=0) //Run until tacho value is zero
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <LengthofInt+0x1c>
	{
		tacho=tacho/10; //divide until tacho is 0,....
     dd2:	2a e0       	ldi	r18, 0x0A	; 10
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodsi4>
     dde:	ca 01       	movw	r24, r20
     de0:	b9 01       	movw	r22, r18
		count++;		//Count for each round to get the length
     de2:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t LengthofInt(uint32_t tacho){
	//Function for finding the length of an integer
	int count = 0;
	while(tacho!=0) //Run until tacho value is zero
     de4:	61 15       	cp	r22, r1
     de6:	71 05       	cpc	r23, r1
     de8:	81 05       	cpc	r24, r1
     dea:	91 05       	cpc	r25, r1
     dec:	91 f7       	brne	.-28     	; 0xdd2 <LengthofInt+0xa>
	{
		tacho=tacho/10; //divide until tacho is 0,....
		count++;		//Count for each round to get the length
	}
	return count;
}
     dee:	8c 2f       	mov	r24, r28
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <UART_TitleAll>:
	//SECOND ROW
	UART_Row(1,5);
}

void UART_TitleAll(void){
	UART_NewLine();
     df6:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	strcpy(TxBuffer,"  TACHO - VALUES   |");
     dfa:	85 e1       	ldi	r24, 0x15	; 21
     dfc:	ec e6       	ldi	r30, 0x6C	; 108
     dfe:	f1 e4       	ldi	r31, 0x41	; 65
     e00:	a8 e1       	ldi	r26, 0x18	; 24
     e02:	b5 e4       	ldi	r27, 0x45	; 69
     e04:	01 90       	ld	r0, Z+
     e06:	0d 92       	st	X+, r0
     e08:	8a 95       	dec	r24
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <UART_TitleAll+0xe>
	UART_SendBuffer();
     e0c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	strcpy(TxBuffer,"      ALL FANS      |");
     e10:	86 e1       	ldi	r24, 0x16	; 22
     e12:	e1 e8       	ldi	r30, 0x81	; 129
     e14:	f1 e4       	ldi	r31, 0x41	; 65
     e16:	a8 e1       	ldi	r26, 0x18	; 24
     e18:	b5 e4       	ldi	r27, 0x45	; 69
     e1a:	01 90       	ld	r0, Z+
     e1c:	0d 92       	st	X+, r0
     e1e:	8a 95       	dec	r24
     e20:	e1 f7       	brne	.-8      	; 0xe1a <UART_TitleAll+0x24>
	UART_SendBuffer();
     e22:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	UART_NewLine();
     e26:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	UART_NewLine();
     e2a:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
     e2e:	08 95       	ret

00000e30 <Tacho_filter>:
		}
		UART_NewLine();
	}
	UART_NewLine();
}
int Tacho_filter(char ch){ //Need too "filter" out the first value since the first reading is always wrong
     e30:	cf 93       	push	r28
     e32:	c8 2f       	mov	r28, r24
	uint32_t filter_val = 0;
	filter_val = Read_Tacho(ch);
     e34:	0e 94 c8 01 	call	0x390	; 0x390 <Read_Tacho>
     e38:	2f ef       	ldi	r18, 0xFF	; 255
     e3a:	83 ef       	ldi	r24, 0xF3	; 243
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	80 40       	sbci	r24, 0x00	; 0
     e42:	90 40       	sbci	r25, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <Tacho_filter+0xe>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <Tacho_filter+0x18>
     e48:	00 00       	nop
	_delay_ms(40);
	filter_val = Read_Tacho(ch);
     e4a:	8c 2f       	mov	r24, r28
     e4c:	0e 94 c8 01 	call	0x390	; 0x390 <Read_Tacho>
	return filter_val;
}
     e50:	cb 01       	movw	r24, r22
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <UART_ReadChannel>:
		} else {
		n = ProcessedBuffer[num];
	}
	return n;
}
void UART_ReadChannel(char ch){
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	d8 2e       	mov	r13, r24
	uint32_t tacho = 0;
	uint8_t count = 0;
	int left_shift = 0;
	int right_shift = 0;
	
	tacho = Tacho_filter(ch);
     e66:	0e 94 18 07 	call	0xe30	; 0xe30 <Tacho_filter>
     e6a:	bc 01       	movw	r22, r24
     e6c:	99 0f       	add	r25, r25
     e6e:	88 0b       	sbc	r24, r24
     e70:	99 0b       	sbc	r25, r25

	count = LengthofInt(tacho);
     e72:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LengthofInt>
	
	//Title
	if(count == 0){
     e76:	81 11       	cpse	r24, r1
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <UART_ReadChannel+0x30>
		left_shift = count;
     e7a:	e8 2e       	mov	r14, r24
     e7c:	f1 2c       	mov	r15, r1
		right_shift = left_shift + 1;
     e7e:	87 01       	movw	r16, r14
     e80:	0f 5f       	subi	r16, 0xFF	; 255
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <UART_ReadChannel+0x40>
	}
	else {
		left_shift = (count-3);
     e86:	08 2f       	mov	r16, r24
     e88:	10 e0       	ldi	r17, 0x00	; 0
     e8a:	78 01       	movw	r14, r16
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	e8 1a       	sub	r14, r24
     e90:	f1 08       	sbc	r15, r1
		right_shift = left_shift + 2;
     e92:	01 50       	subi	r16, 0x01	; 1
     e94:	11 09       	sbc	r17, r1
	}
	UART_NewLine();
     e96:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	for(int k = 0; k <= (left_shift);k++ ){
     e9a:	c0 e0       	ldi	r28, 0x00	; 0
     e9c:	d0 e0       	ldi	r29, 0x00	; 0
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <UART_ReadChannel+0x5c>
		
		strcpy(TxBuffer," ");
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <TxBuffer>
     ea8:	90 93 19 45 	sts	0x4519, r25	; 0x804519 <TxBuffer+0x1>
		UART_SendBuffer();
     eac:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	else {
		left_shift = (count-3);
		right_shift = left_shift + 2;
	}
	UART_NewLine();
	for(int k = 0; k <= (left_shift);k++ ){
     eb0:	21 96       	adiw	r28, 0x01	; 1
     eb2:	ec 16       	cp	r14, r28
     eb4:	fd 06       	cpc	r15, r29
     eb6:	a4 f7       	brge	.-24     	; 0xea0 <UART_ReadChannel+0x4a>
		
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	strcpy(TxBuffer," TACHO - VALUES");
     eb8:	80 e1       	ldi	r24, 0x10	; 16
     eba:	e7 e9       	ldi	r30, 0x97	; 151
     ebc:	f1 e4       	ldi	r31, 0x41	; 65
     ebe:	a8 e1       	ldi	r26, 0x18	; 24
     ec0:	b5 e4       	ldi	r27, 0x45	; 69
     ec2:	01 90       	ld	r0, Z+
     ec4:	0d 92       	st	X+, r0
     ec6:	8a 95       	dec	r24
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <UART_ReadChannel+0x6c>
	UART_SendBuffer();
     eca:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	for(int k = 0; k <= right_shift;k++ ){
     ece:	c0 e0       	ldi	r28, 0x00	; 0
     ed0:	d0 e0       	ldi	r29, 0x00	; 0
     ed2:	09 c0       	rjmp	.+18     	; 0xee6 <UART_ReadChannel+0x90>
		
		strcpy(TxBuffer," ");
     ed4:	80 e2       	ldi	r24, 0x20	; 32
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <TxBuffer>
     edc:	90 93 19 45 	sts	0x4519, r25	; 0x804519 <TxBuffer+0x1>
		UART_SendBuffer();
     ee0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		UART_SendBuffer();
		
	}
	strcpy(TxBuffer," TACHO - VALUES");
	UART_SendBuffer();
	for(int k = 0; k <= right_shift;k++ ){
     ee4:	21 96       	adiw	r28, 0x01	; 1
     ee6:	0c 17       	cp	r16, r28
     ee8:	1d 07       	cpc	r17, r29
     eea:	a4 f7       	brge	.-24     	; 0xed4 <UART_ReadChannel+0x7e>
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	
	strcpy(TxBuffer,"|");
     eec:	8c e7       	ldi	r24, 0x7C	; 124
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <TxBuffer>
     ef4:	90 93 19 45 	sts	0x4519, r25	; 0x804519 <TxBuffer+0x1>
	UART_SendBuffer();
     ef8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	UART_NewLine();
     efc:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	for(int k = 0; k <= left_shift;k++ ){
     f00:	c0 e0       	ldi	r28, 0x00	; 0
     f02:	d0 e0       	ldi	r29, 0x00	; 0
     f04:	09 c0       	rjmp	.+18     	; 0xf18 <UART_ReadChannel+0xc2>
		
		strcpy(TxBuffer," ");
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <TxBuffer>
     f0e:	90 93 19 45 	sts	0x4519, r25	; 0x804519 <TxBuffer+0x1>
		UART_SendBuffer();
     f12:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	}
	
	strcpy(TxBuffer,"|");
	UART_SendBuffer();
	UART_NewLine();
	for(int k = 0; k <= left_shift;k++ ){
     f16:	21 96       	adiw	r28, 0x01	; 1
     f18:	ec 16       	cp	r14, r28
     f1a:	fd 06       	cpc	r15, r29
     f1c:	a4 f7       	brge	.-24     	; 0xf06 <UART_ReadChannel+0xb0>
		
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	strcpy(TxBuffer,"  FAN CHANNEL ");
     f1e:	c8 e1       	ldi	r28, 0x18	; 24
     f20:	d5 e4       	ldi	r29, 0x45	; 69
     f22:	8f e0       	ldi	r24, 0x0F	; 15
     f24:	e7 ea       	ldi	r30, 0xA7	; 167
     f26:	f1 e4       	ldi	r31, 0x41	; 65
     f28:	de 01       	movw	r26, r28
     f2a:	01 90       	ld	r0, Z+
     f2c:	0d 92       	st	X+, r0
     f2e:	8a 95       	dec	r24
     f30:	e1 f7       	brne	.-8      	; 0xf2a <UART_ReadChannel+0xd4>
	UART_SendBuffer();
     f32:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	sprintf(TxBuffer,"%u",ch);
     f36:	ed 2c       	mov	r14, r13
     f38:	f1 2c       	mov	r15, r1
     f3a:	1f 92       	push	r1
     f3c:	df 92       	push	r13
     f3e:	88 e4       	ldi	r24, 0x48	; 72
     f40:	91 e4       	ldi	r25, 0x41	; 65
     f42:	9f 93       	push	r25
     f44:	8f 93       	push	r24
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	0e 94 b5 19 	call	0x336a	; 0x336a <sprintf>
	UART_SendBuffer();
     f4e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	
	for(int k = 0; k <= right_shift;k++ ){
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	c0 e0       	ldi	r28, 0x00	; 0
     f60:	d0 e0       	ldi	r29, 0x00	; 0
     f62:	09 c0       	rjmp	.+18     	; 0xf76 <UART_ReadChannel+0x120>
		
		strcpy(TxBuffer," ");
     f64:	80 e2       	ldi	r24, 0x20	; 32
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <TxBuffer>
     f6c:	90 93 19 45 	sts	0x4519, r25	; 0x804519 <TxBuffer+0x1>
		UART_SendBuffer();
     f70:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	strcpy(TxBuffer,"  FAN CHANNEL ");
	UART_SendBuffer();
	sprintf(TxBuffer,"%u",ch);
	UART_SendBuffer();
	
	for(int k = 0; k <= right_shift;k++ ){
     f74:	21 96       	adiw	r28, 0x01	; 1
     f76:	0c 17       	cp	r16, r28
     f78:	1d 07       	cpc	r17, r29
     f7a:	a4 f7       	brge	.-24     	; 0xf64 <UART_ReadChannel+0x10e>
		strcpy(TxBuffer," ");
		UART_SendBuffer();
		
	}
	
	strcpy(TxBuffer,"|");
     f7c:	8c e7       	ldi	r24, 0x7C	; 124
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	80 93 18 45 	sts	0x4518, r24	; 0x804518 <TxBuffer>
     f84:	90 93 19 45 	sts	0x4519, r25	; 0x804519 <TxBuffer+0x1>
	UART_SendBuffer();
     f88:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	UART_NewLine();
     f8c:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	for(int loop = 0; loop < 11; loop++){
     f90:	00 e0       	ldi	r16, 0x00	; 0
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	42 c0       	rjmp	.+132    	; 0x101a <UART_ReadChannel+0x1c4>
		
		strcpy(TxBuffer,"Channel ");
     f96:	c8 e1       	ldi	r28, 0x18	; 24
     f98:	d5 e4       	ldi	r29, 0x45	; 69
     f9a:	89 e0       	ldi	r24, 0x09	; 9
     f9c:	e6 eb       	ldi	r30, 0xB6	; 182
     f9e:	f1 e4       	ldi	r31, 0x41	; 65
     fa0:	de 01       	movw	r26, r28
     fa2:	01 90       	ld	r0, Z+
     fa4:	0d 92       	st	X+, r0
     fa6:	8a 95       	dec	r24
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <UART_ReadChannel+0x14c>
		UART_SendBuffer();
     faa:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		sprintf(TxBuffer,"%u",ch);
     fae:	ff 92       	push	r15
     fb0:	ef 92       	push	r14
     fb2:	88 e4       	ldi	r24, 0x48	; 72
     fb4:	91 e4       	ldi	r25, 0x41	; 65
     fb6:	9f 93       	push	r25
     fb8:	8f 93       	push	r24
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0e 94 b5 19 	call	0x336a	; 0x336a <sprintf>
		UART_SendBuffer();
     fc2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		strcpy(TxBuffer," value: ");
     fc6:	89 e0       	ldi	r24, 0x09	; 9
     fc8:	ef eb       	ldi	r30, 0xBF	; 191
     fca:	f1 e4       	ldi	r31, 0x41	; 65
     fcc:	de 01       	movw	r26, r28
     fce:	01 90       	ld	r0, Z+
     fd0:	0d 92       	st	X+, r0
     fd2:	8a 95       	dec	r24
     fd4:	e1 f7       	brne	.-8      	; 0xfce <UART_ReadChannel+0x178>
		UART_SendBuffer();
     fd6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		tacho = Read_Tacho(ch);
     fda:	8d 2d       	mov	r24, r13
     fdc:	0e 94 c8 01 	call	0x390	; 0x390 <Read_Tacho>
		sprintf(TxBuffer,"%lu",tacho);
     fe0:	9f 93       	push	r25
     fe2:	8f 93       	push	r24
     fe4:	7f 93       	push	r23
     fe6:	6f 93       	push	r22
     fe8:	88 ec       	ldi	r24, 0xC8	; 200
     fea:	91 e4       	ldi	r25, 0x41	; 65
     fec:	9f 93       	push	r25
     fee:	8f 93       	push	r24
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	0e 94 b5 19 	call	0x336a	; 0x336a <sprintf>
		UART_SendBuffer();
     ff8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		strcpy(TxBuffer,"|");
     ffc:	8c e7       	ldi	r24, 0x7C	; 124
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	88 83       	st	Y, r24
    1002:	99 83       	std	Y+1, r25	; 0x01
		UART_SendBuffer();
    1004:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		UART_NewLine();
    1008:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	}
	
	strcpy(TxBuffer,"|");
	UART_SendBuffer();
	UART_NewLine();
	for(int loop = 0; loop < 11; loop++){
    100c:	0f 5f       	subi	r16, 0xFF	; 255
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	8d b7       	in	r24, 0x3d	; 61
    1012:	9e b7       	in	r25, 0x3e	; 62
    1014:	0e 96       	adiw	r24, 0x0e	; 14
    1016:	8d bf       	out	0x3d, r24	; 61
    1018:	9e bf       	out	0x3e, r25	; 62
    101a:	0b 30       	cpi	r16, 0x0B	; 11
    101c:	11 05       	cpc	r17, r1
    101e:	0c f4       	brge	.+2      	; 0x1022 <UART_ReadChannel+0x1cc>
    1020:	ba cf       	rjmp	.-140    	; 0xf96 <UART_ReadChannel+0x140>
		UART_NewLine();
		
	}
	
	
}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	08 95       	ret

00001032 <UART_Row>:
	UART_SendBuffer();
	UART_NewLine();
	UART_NewLine();
}

void UART_Row(char row, char numofsamples){
    1032:	5f 92       	push	r5
    1034:	6f 92       	push	r6
    1036:	7f 92       	push	r7
    1038:	8f 92       	push	r8
    103a:	9f 92       	push	r9
    103c:	af 92       	push	r10
    103e:	bf 92       	push	r11
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	68 2e       	mov	r6, r24
    1052:	56 2e       	mov	r5, r22
	uint32_t tacho = 0;
	for(int ch = 0; ch <= 3; ch++){
    1054:	c0 e0       	ldi	r28, 0x00	; 0
    1056:	d0 e0       	ldi	r29, 0x00	; 0
    1058:	0c c0       	rjmp	.+24     	; 0x1072 <UART_Row+0x40>
		strcpy(TxBuffer,"-------------------- ");
    105a:	86 e1       	ldi	r24, 0x16	; 22
    105c:	ec ec       	ldi	r30, 0xCC	; 204
    105e:	f1 e4       	ldi	r31, 0x41	; 65
    1060:	a8 e1       	ldi	r26, 0x18	; 24
    1062:	b5 e4       	ldi	r27, 0x45	; 69
    1064:	01 90       	ld	r0, Z+
    1066:	0d 92       	st	X+, r0
    1068:	8a 95       	dec	r24
    106a:	e1 f7       	brne	.-8      	; 0x1064 <UART_Row+0x32>
		UART_SendBuffer();
    106c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
	UART_NewLine();
}

void UART_Row(char row, char numofsamples){
	uint32_t tacho = 0;
	for(int ch = 0; ch <= 3; ch++){
    1070:	21 96       	adiw	r28, 0x01	; 1
    1072:	c4 30       	cpi	r28, 0x04	; 4
    1074:	d1 05       	cpc	r29, r1
    1076:	8c f3       	brlt	.-30     	; 0x105a <UART_Row+0x28>
		strcpy(TxBuffer,"-------------------- ");
		UART_SendBuffer();
	}
	UART_NewLine();
    1078:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	row = row*5-(row);
    107c:	66 0c       	add	r6, r6
    107e:	66 0c       	add	r6, r6
	for(int ch = 0+row; ch <= 3+row; ch++){
    1080:	71 2c       	mov	r7, r1
    1082:	e3 01       	movw	r28, r6
    1084:	29 c0       	rjmp	.+82     	; 0x10d8 <UART_Row+0xa6>
		
		strcpy(TxBuffer,"Channel ");
    1086:	08 e1       	ldi	r16, 0x18	; 24
    1088:	15 e4       	ldi	r17, 0x45	; 69
    108a:	89 e0       	ldi	r24, 0x09	; 9
    108c:	e6 eb       	ldi	r30, 0xB6	; 182
    108e:	f1 e4       	ldi	r31, 0x41	; 65
    1090:	d8 01       	movw	r26, r16
    1092:	01 90       	ld	r0, Z+
    1094:	0d 92       	st	X+, r0
    1096:	8a 95       	dec	r24
    1098:	e1 f7       	brne	.-8      	; 0x1092 <UART_Row+0x60>
		UART_SendBuffer();
    109a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		sprintf(TxBuffer,"%u",ch);
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	88 e4       	ldi	r24, 0x48	; 72
    10a4:	91 e4       	ldi	r25, 0x41	; 65
    10a6:	9f 93       	push	r25
    10a8:	8f 93       	push	r24
    10aa:	1f 93       	push	r17
    10ac:	0f 93       	push	r16
    10ae:	0e 94 b5 19 	call	0x336a	; 0x336a <sprintf>
		UART_SendBuffer();
    10b2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		strcpy(TxBuffer,"          | ");
    10b6:	8d e0       	ldi	r24, 0x0D	; 13
    10b8:	e2 ee       	ldi	r30, 0xE2	; 226
    10ba:	f1 e4       	ldi	r31, 0x41	; 65
    10bc:	d8 01       	movw	r26, r16
    10be:	01 90       	ld	r0, Z+
    10c0:	0d 92       	st	X+, r0
    10c2:	8a 95       	dec	r24
    10c4:	e1 f7       	brne	.-8      	; 0x10be <UART_Row+0x8c>
		UART_SendBuffer();
    10c6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		strcpy(TxBuffer,"-------------------- ");
		UART_SendBuffer();
	}
	UART_NewLine();
	row = row*5-(row);
	for(int ch = 0+row; ch <= 3+row; ch++){
    10ca:	21 96       	adiw	r28, 0x01	; 1
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	73 01       	movw	r14, r6
    10da:	83 e0       	ldi	r24, 0x03	; 3
    10dc:	e8 0e       	add	r14, r24
    10de:	f1 1c       	adc	r15, r1
    10e0:	ec 16       	cp	r14, r28
    10e2:	fd 06       	cpc	r15, r29
    10e4:	84 f6       	brge	.-96     	; 0x1086 <UART_Row+0x54>
		sprintf(TxBuffer,"%u",ch);
		UART_SendBuffer();
		strcpy(TxBuffer,"          | ");
		UART_SendBuffer();
	}
	UART_NewLine();
    10e6:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	for(int samples = 0; samples < numofsamples; samples++){
    10ea:	c1 2c       	mov	r12, r1
    10ec:	d1 2c       	mov	r13, r1
    10ee:	53 c0       	rjmp	.+166    	; 0x1196 <UART_Row+0x164>
		for(int ch = 0+row; ch <= 3+row;ch++){
			strcpy(TxBuffer,"Channel ");
    10f0:	c8 e1       	ldi	r28, 0x18	; 24
    10f2:	d5 e4       	ldi	r29, 0x45	; 69
    10f4:	89 e0       	ldi	r24, 0x09	; 9
    10f6:	e6 eb       	ldi	r30, 0xB6	; 182
    10f8:	f1 e4       	ldi	r31, 0x41	; 65
    10fa:	de 01       	movw	r26, r28
    10fc:	01 90       	ld	r0, Z+
    10fe:	0d 92       	st	X+, r0
    1100:	8a 95       	dec	r24
    1102:	e1 f7       	brne	.-8      	; 0x10fc <UART_Row+0xca>
			UART_SendBuffer();
    1104:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
			sprintf(TxBuffer,"%u",ch);
    1108:	1f 93       	push	r17
    110a:	0f 93       	push	r16
    110c:	88 e4       	ldi	r24, 0x48	; 72
    110e:	91 e4       	ldi	r25, 0x41	; 65
    1110:	9f 93       	push	r25
    1112:	8f 93       	push	r24
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	0e 94 b5 19 	call	0x336a	; 0x336a <sprintf>
			UART_SendBuffer();
    111c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
			tacho = Tacho_filter(ch);
    1120:	80 2f       	mov	r24, r16
    1122:	0e 94 18 07 	call	0xe30	; 0xe30 <Tacho_filter>
    1126:	4c 01       	movw	r8, r24
    1128:	99 0f       	add	r25, r25
    112a:	aa 08       	sbc	r10, r10
    112c:	bb 08       	sbc	r11, r11
			strcpy(TxBuffer," value: ");
    112e:	89 e0       	ldi	r24, 0x09	; 9
    1130:	ef eb       	ldi	r30, 0xBF	; 191
    1132:	f1 e4       	ldi	r31, 0x41	; 65
    1134:	de 01       	movw	r26, r28
    1136:	01 90       	ld	r0, Z+
    1138:	0d 92       	st	X+, r0
    113a:	8a 95       	dec	r24
    113c:	e1 f7       	brne	.-8      	; 0x1136 <UART_Row+0x104>
			UART_SendBuffer();
    113e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
			sprintf(TxBuffer,"%lu",tacho);
    1142:	bf 92       	push	r11
    1144:	af 92       	push	r10
    1146:	9f 92       	push	r9
    1148:	8f 92       	push	r8
    114a:	88 ec       	ldi	r24, 0xC8	; 200
    114c:	91 e4       	ldi	r25, 0x41	; 65
    114e:	9f 93       	push	r25
    1150:	8f 93       	push	r24
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	0e 94 b5 19 	call	0x336a	; 0x336a <sprintf>
			UART_SendBuffer();
    115a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
			strcpy(TxBuffer," | ");
    115e:	80 e2       	ldi	r24, 0x20	; 32
    1160:	9c e7       	ldi	r25, 0x7C	; 124
    1162:	88 83       	st	Y, r24
    1164:	99 83       	std	Y+1, r25	; 0x01
    1166:	80 e2       	ldi	r24, 0x20	; 32
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	8a 83       	std	Y+2, r24	; 0x02
    116c:	9b 83       	std	Y+3, r25	; 0x03
			UART_SendBuffer();
    116e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		strcpy(TxBuffer,"          | ");
		UART_SendBuffer();
	}
	UART_NewLine();
	for(int samples = 0; samples < numofsamples; samples++){
		for(int ch = 0+row; ch <= 3+row;ch++){
    1172:	0f 5f       	subi	r16, 0xFF	; 255
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
    1176:	8d b7       	in	r24, 0x3d	; 61
    1178:	9e b7       	in	r25, 0x3e	; 62
    117a:	0e 96       	adiw	r24, 0x0e	; 14
    117c:	8d bf       	out	0x3d, r24	; 61
    117e:	9e bf       	out	0x3e, r25	; 62
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <UART_Row+0x152>
    1182:	83 01       	movw	r16, r6
    1184:	e0 16       	cp	r14, r16
    1186:	f1 06       	cpc	r15, r17
    1188:	0c f0       	brlt	.+2      	; 0x118c <UART_Row+0x15a>
    118a:	b2 cf       	rjmp	.-156    	; 0x10f0 <UART_Row+0xbe>
			sprintf(TxBuffer,"%lu",tacho);
			UART_SendBuffer();
			strcpy(TxBuffer," | ");
			UART_SendBuffer();
		}
		UART_NewLine();
    118c:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		UART_SendBuffer();
		strcpy(TxBuffer,"          | ");
		UART_SendBuffer();
	}
	UART_NewLine();
	for(int samples = 0; samples < numofsamples; samples++){
    1190:	9f ef       	ldi	r25, 0xFF	; 255
    1192:	c9 1a       	sub	r12, r25
    1194:	d9 0a       	sbc	r13, r25
    1196:	85 2d       	mov	r24, r5
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	c8 16       	cp	r12, r24
    119c:	d9 06       	cpc	r13, r25
    119e:	8c f3       	brlt	.-30     	; 0x1182 <UART_Row+0x150>
			strcpy(TxBuffer," | ");
			UART_SendBuffer();
		}
		UART_NewLine();
	}
	UART_NewLine();
    11a0:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
}
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	bf 90       	pop	r11
    11b6:	af 90       	pop	r10
    11b8:	9f 90       	pop	r9
    11ba:	8f 90       	pop	r8
    11bc:	7f 90       	pop	r7
    11be:	6f 90       	pop	r6
    11c0:	5f 90       	pop	r5
    11c2:	08 95       	ret

000011c4 <UART_ReadAll>:
	}
	return count;
}
void UART_ReadAll(void){
	//Title
	UART_TitleAll();
    11c4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <UART_TitleAll>
	//FIRST ROW
	UART_Row(0,5);
    11c8:	65 e0       	ldi	r22, 0x05	; 5
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 19 08 	call	0x1032	; 0x1032 <UART_Row>
	//SECOND ROW
	UART_Row(1,5);
    11d0:	65 e0       	ldi	r22, 0x05	; 5
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	0e 94 19 08 	call	0x1032	; 0x1032 <UART_Row>
    11d8:	08 95       	ret

000011da <UART3_init>:
	/*Calculating the baudrate from the formula in datasheet.
	The register is 16 bit therfore uint16_t*/
	const uint16_t BAUD_rate = (uint16_t) (F_CPU*64/(16*UART_bps));
	
	//Set the baudrate to the UART3.BAUD register
	USART3.BAUD = BAUD_rate;
    11da:	e0 e6       	ldi	r30, 0x60	; 96
    11dc:	f8 e0       	ldi	r31, 0x08	; 8
    11de:	8a e0       	ldi	r24, 0x0A	; 10
    11e0:	9a e1       	ldi	r25, 0x1A	; 26
    11e2:	80 87       	std	Z+8, r24	; 0x08
    11e4:	91 87       	std	Z+9, r25	; 0x09
	
	//Setting up PB0(TxD)
	//Set PB0 to TxD, PB1 to RxD, PB2 to XCK and PB3 as XDIR
	PORTMUX.USARTROUTEA = PORTMUX_USART3_DEFAULT_gc;
    11e6:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7e05e2>
	//Set PB0 to output
	PORTB.DIR |= (1 << TxD);
    11ea:	a0 e2       	ldi	r26, 0x20	; 32
    11ec:	b4 e0       	ldi	r27, 0x04	; 4
    11ee:	8c 91       	ld	r24, X
    11f0:	81 60       	ori	r24, 0x01	; 1
    11f2:	8c 93       	st	X, r24

	//Enable RxD interrupt
	USART3.CTRLA = (1 << USART_RXCIE_bp);
    11f4:	80 e8       	ldi	r24, 0x80	; 128
    11f6:	85 83       	std	Z+5, r24	; 0x05
	
	//Enable RxD and TxD
	USART3.CTRLB = (1 << USART_RXEN_bp) | (1 << USART_TXEN_bp);
    11f8:	80 ec       	ldi	r24, 0xC0	; 192
    11fa:	86 83       	std	Z+6, r24	; 0x06
	
	//Setting frame format and modes | Asynchronus (UART) | Disable Parity bit | Set 1 stop bit | Rx/Tx-Data size 8-bit
	USART3.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
    11fc:	83 e0       	ldi	r24, 0x03	; 3
    11fe:	87 83       	std	Z+7, r24	; 0x07
	
	USART3.CTRLD = USART_ABW_WDW0_gc;
    1200:	12 86       	std	Z+10, r1	; 0x0a
    1202:	08 95       	ret

00001204 <UART_ISR>:
}

void UART_ISR(void){
    1204:	cf 93       	push	r28
	uint8_t recvbyte = UART_RX_BUFFER;
    1206:	c0 91 60 08 	lds	r28, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
	static uint8_t lastbyte = 0;			//Static does that the variable not initialize more then one time
	switch(recvbyte){						//Switch case for checking the incoming for bytes
    120a:	ca 30       	cpi	r28, 0x0A	; 10
    120c:	51 f0       	breq	.+20     	; 0x1222 <UART_ISR+0x1e>
    120e:	cd 30       	cpi	r28, 0x0D	; 13
    1210:	61 f0       	breq	.+24     	; 0x122a <UART_ISR+0x26>
    1212:	c1 11       	cpse	r28, r1
    1214:	0d c0       	rjmp	.+26     	; 0x1230 <UART_ISR+0x2c>
		case(0):
		EchoON = ~EchoON;					//If case is 0, toggle EchoON
    1216:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <EchoON>
    121a:	80 95       	com	r24
    121c:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <EchoON>
		break;								//Exit loop
    1220:	0a c0       	rjmp	.+20     	; 0x1236 <UART_ISR+0x32>
		case(LF):
		if (lastbyte == CR){				//ignore LF if last byte was CR
    1222:	80 91 b0 44 	lds	r24, 0x44B0	; 0x8044b0 <lastbyte.5184>
    1226:	8d 30       	cpi	r24, 0x0D	; 13
    1228:	31 f0       	breq	.+12     	; 0x1236 <UART_ISR+0x32>
			break;							//Exit loop, since we ignore it
		}
		case(CR):							//When CR(or keyboard <enter>) is reachieved, the command can be run
		RecvCommand = 1;					//The received command flag is raised, so the process with perform task is started
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 b4 44 	sts	0x44B4, r24	; 0x8044b4 <RecvCommand>
		default:							//If no cases are true, the defaults run | default case dont need any break to exit
		CharInBUF(recvbyte);				//Character is put in the buffer, through CharINBUF();
    1230:	8c 2f       	mov	r24, r28
    1232:	0e 94 a7 04 	call	0x94e	; 0x94e <CharInBUF>
	}
	if(EchoON && TxBufferFlag){				//Checks if echo is on and tx-buffer is ready to receive data
    1236:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <EchoON>
    123a:	88 23       	and	r24, r24
    123c:	39 f0       	breq	.+14     	; 0x124c <UART_ISR+0x48>
    123e:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    1242:	85 ff       	sbrs	r24, 5
    1244:	03 c0       	rjmp	.+6      	; 0x124c <UART_ISR+0x48>
		UART_Echo(recvbyte);				//Sends echo to the terminal via tx-buffer
    1246:	8c 2f       	mov	r24, r28
    1248:	0e 94 58 04 	call	0x8b0	; 0x8b0 <UART_Echo>
	}
	lastbyte = recvbyte;					//Saves the received byte to lastbyte for next round
    124c:	c0 93 b0 44 	sts	0x44B0, r28	; 0x8044b0 <lastbyte.5184>
}
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <TxBuffer_StringWrite>:



void TxBuffer_StringWrite(char* str){
	strcpy(TxBuffer,str);
    1254:	bc 01       	movw	r22, r24
    1256:	88 e1       	ldi	r24, 0x18	; 24
    1258:	95 e4       	ldi	r25, 0x45	; 69
    125a:	0e 94 29 19 	call	0x3252	; 0x3252 <strcpy>
	UART_SendBuffer();
    125e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
    1262:	08 95       	ret

00001264 <EEPROM_UpdateAll>:
	
	EEPROM_FaultDetect();
	
	EEPROM_UpdateAll();
}
void EEPROM_UpdateAll(void){
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
	//Updates values to EEPROM
	my_eeprom_update_char(fan_0_EEPROM_adr, SpeedToEEPROMch[0]);
    1268:	cd eb       	ldi	r28, 0xBD	; 189
    126a:	d4 e4       	ldi	r29, 0x44	; 68
    126c:	68 81       	ld	r22, Y
    126e:	79 81       	ldd	r23, Y+1	; 0x01
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_1_EEPROM_adr, SpeedToEEPROMch[1]);
    1276:	6a 81       	ldd	r22, Y+2	; 0x02
    1278:	7b 81       	ldd	r23, Y+3	; 0x03
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_2_EEPROM_adr, SpeedToEEPROMch[2]);
    1280:	6c 81       	ldd	r22, Y+4	; 0x04
    1282:	7d 81       	ldd	r23, Y+5	; 0x05
    1284:	84 e0       	ldi	r24, 0x04	; 4
    1286:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_3_EEPROM_adr, SpeedToEEPROMch[3]);
    128a:	6e 81       	ldd	r22, Y+6	; 0x06
    128c:	7f 81       	ldd	r23, Y+7	; 0x07
    128e:	86 e0       	ldi	r24, 0x06	; 6
    1290:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_4_EEPROM_adr, SpeedToEEPROMch[4]);
    1294:	68 85       	ldd	r22, Y+8	; 0x08
    1296:	79 85       	ldd	r23, Y+9	; 0x09
    1298:	88 e0       	ldi	r24, 0x08	; 8
    129a:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_5_EEPROM_adr, SpeedToEEPROMch[5]);
    129e:	6a 85       	ldd	r22, Y+10	; 0x0a
    12a0:	7b 85       	ldd	r23, Y+11	; 0x0b
    12a2:	8a e0       	ldi	r24, 0x0A	; 10
    12a4:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_6_EEPROM_adr, SpeedToEEPROMch[6]);
    12a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    12aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    12ac:	8c e0       	ldi	r24, 0x0C	; 12
    12ae:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_7_EEPROM_adr, SpeedToEEPROMch[7]);
    12b2:	6e 85       	ldd	r22, Y+14	; 0x0e
    12b4:	7f 85       	ldd	r23, Y+15	; 0x0f
    12b6:	8e e0       	ldi	r24, 0x0E	; 14
    12b8:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	TxBuffer_StringWrite("Saving done");
    12bc:	8f ee       	ldi	r24, 0xEF	; 239
    12be:	91 e4       	ldi	r25, 0x41	; 65
    12c0:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
}
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <ResetEEPROM>:
		}
	}
}
void ResetEEPROM(void){
	//Sets value to zero at every EEPROM adresse
	my_eeprom_update_char(fan_0_EEPROM_adr, 0);
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_1_EEPROM_adr, 0);
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_2_EEPROM_adr, 0);
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_3_EEPROM_adr, 0);
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	86 e0       	ldi	r24, 0x06	; 6
    12ee:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_4_EEPROM_adr, 0);
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	88 e0       	ldi	r24, 0x08	; 8
    12f8:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_5_EEPROM_adr, 0);
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	8a e0       	ldi	r24, 0x0A	; 10
    1302:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_6_EEPROM_adr, 0);
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	8c e0       	ldi	r24, 0x0C	; 12
    130c:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	my_eeprom_update_char(fan_7_EEPROM_adr, 0);
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	8e e0       	ldi	r24, 0x0E	; 14
    1316:	0e 94 01 04 	call	0x802	; 0x802 <my_eeprom_update_char>
	
	TxBuffer_StringWrite("EEPROM has been reset");
    131a:	8b ef       	ldi	r24, 0xFB	; 251
    131c:	91 e4       	ldi	r25, 0x41	; 65
    131e:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
    1322:	08 95       	ret

00001324 <UART_HelpMenu>:
	SpeedFromEEPROMch[5] = my_eeprom_read_char(fan_5_EEPROM_adr);
	SpeedFromEEPROMch[6] = my_eeprom_read_char(fan_6_EEPROM_adr);
	SpeedFromEEPROMch[7] = my_eeprom_read_char(fan_7_EEPROM_adr);
}
void UART_HelpMenu(void){
	if (ProcessWord() == 0){
    1324:	0e 94 1e 05 	call	0xa3c	; 0xa3c <ProcessWord>
    1328:	81 11       	cpse	r24, r1
    132a:	29 c0       	rjmp	.+82     	; 0x137e <UART_HelpMenu+0x5a>
		TxBuffer_StringWrite("Available commands:");
    132c:	81 e1       	ldi	r24, 0x11	; 17
    132e:	92 e4       	ldi	r25, 0x42	; 66
    1330:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
		UART_NewLine();
    1334:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		TxBuffer_StringWrite("all <on/off>");
    1338:	85 e2       	ldi	r24, 0x25	; 37
    133a:	92 e4       	ldi	r25, 0x42	; 66
    133c:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
		UART_NewLine();
    1340:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		TxBuffer_StringWrite("read <fan channel>");
    1344:	82 e3       	ldi	r24, 0x32	; 50
    1346:	92 e4       	ldi	r25, 0x42	; 66
    1348:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
		UART_NewLine();
    134c:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		TxBuffer_StringWrite("echo <on/off> no syntax = is echo on or off?");
    1350:	85 e4       	ldi	r24, 0x45	; 69
    1352:	92 e4       	ldi	r25, 0x42	; 66
    1354:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
		UART_NewLine();
    1358:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		TxBuffer_StringWrite("reseteeprom, no syntax");
    135c:	82 e7       	ldi	r24, 0x72	; 114
    135e:	92 e4       	ldi	r25, 0x42	; 66
    1360:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
		UART_NewLine();
    1364:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		TxBuffer_StringWrite("save, no syntax");
    1368:	89 e8       	ldi	r24, 0x89	; 137
    136a:	92 e4       	ldi	r25, 0x42	; 66
    136c:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
		UART_NewLine();
    1370:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
		TxBuffer_StringWrite("trenddata, no syntax");
    1374:	89 e9       	ldi	r24, 0x99	; 153
    1376:	92 e4       	ldi	r25, 0x42	; 66
    1378:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
    137c:	08 95       	ret
		} else {
		TxBuffer_StringWrite("help, wrong syntax");
    137e:	8e ea       	ldi	r24, 0xAE	; 174
    1380:	92 e4       	ldi	r25, 0x42	; 66
    1382:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
    1386:	08 95       	ret

00001388 <AllON>:
		}
	}
	return 0; //Process done
}

void AllON(void){
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
	for(int i = 0; i < 8; i++){
    138c:	c0 e0       	ldi	r28, 0x00	; 0
    138e:	d0 e0       	ldi	r29, 0x00	; 0
    1390:	05 c0       	rjmp	.+10     	; 0x139c <AllON+0x14>
		AnalogWrite(i,0);
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	8c 2f       	mov	r24, r28
    1396:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
	}
	return 0; //Process done
}

void AllON(void){
	for(int i = 0; i < 8; i++){
    139a:	21 96       	adiw	r28, 0x01	; 1
    139c:	c8 30       	cpi	r28, 0x08	; 8
    139e:	d1 05       	cpc	r29, r1
    13a0:	c4 f3       	brlt	.-16     	; 0x1392 <AllON+0xa>
		AnalogWrite(i,0);
	}
	TxBuffer_StringWrite("PWM off all fans, fans full power");
    13a2:	81 ec       	ldi	r24, 0xC1	; 193
    13a4:	92 e4       	ldi	r25, 0x42	; 66
    13a6:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <AllOFF>:
void AllOFF(void){
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
	for(int j = 0; j < 8; j++){
    13b4:	c0 e0       	ldi	r28, 0x00	; 0
    13b6:	d0 e0       	ldi	r29, 0x00	; 0
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <AllOFF+0x14>
		AnalogWrite(j,100);
    13ba:	64 e6       	ldi	r22, 0x64	; 100
    13bc:	8c 2f       	mov	r24, r28
    13be:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
		AnalogWrite(i,0);
	}
	TxBuffer_StringWrite("PWM off all fans, fans full power");
}
void AllOFF(void){
	for(int j = 0; j < 8; j++){
    13c2:	21 96       	adiw	r28, 0x01	; 1
    13c4:	c8 30       	cpi	r28, 0x08	; 8
    13c6:	d1 05       	cpc	r29, r1
    13c8:	c4 f3       	brlt	.-16     	; 0x13ba <AllOFF+0xa>
		AnalogWrite(j,100);
	}
	TxBuffer_StringWrite("PWM fully on all fans, fans off");
    13ca:	83 ee       	ldi	r24, 0xE3	; 227
    13cc:	92 e4       	ldi	r25, 0x42	; 66
    13ce:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
}
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <TxBuffer_IntWrite>:
	strcpy(TxBuffer,str);
	UART_SendBuffer();
}

void TxBuffer_IntWrite(char* buf, int data){
	sprintf(buf,"%u",data);
    13d8:	7f 93       	push	r23
    13da:	6f 93       	push	r22
    13dc:	28 e4       	ldi	r18, 0x48	; 72
    13de:	31 e4       	ldi	r19, 0x41	; 65
    13e0:	3f 93       	push	r19
    13e2:	2f 93       	push	r18
    13e4:	9f 93       	push	r25
    13e6:	8f 93       	push	r24
    13e8:	0e 94 b5 19 	call	0x336a	; 0x336a <sprintf>
	UART_SendBuffer();
    13ec:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	08 95       	ret

000013fe <EEPROM_FaultDetect>:
	my_eeprom_update_char(fan_5_EEPROM_adr, SpeedToEEPROMch[5]);
	my_eeprom_update_char(fan_6_EEPROM_adr, SpeedToEEPROMch[6]);
	my_eeprom_update_char(fan_7_EEPROM_adr, SpeedToEEPROMch[7]);
	TxBuffer_StringWrite("Saving done");
}
void EEPROM_FaultDetect(void){
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
	for (int i = 0; i<=7; i++)
    140e:	c0 e0       	ldi	r28, 0x00	; 0
    1410:	d0 e0       	ldi	r29, 0x00	; 0
    1412:	5e c0       	rjmp	.+188    	; 0x14d0 <EEPROM_FaultDetect+0xd2>
	{
		SpeedToEEPROMch[i] = Tacho_filter(i);	//Reading the rpm value for the tachometer
    1414:	8c 2f       	mov	r24, r28
    1416:	0e 94 18 07 	call	0xe30	; 0xe30 <Tacho_filter>
    141a:	fc 01       	movw	r30, r24
    141c:	ce 01       	movw	r24, r28
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	dc 01       	movw	r26, r24
    1424:	a3 54       	subi	r26, 0x43	; 67
    1426:	bb 4b       	sbci	r27, 0xBB	; 187
    1428:	ed 93       	st	X+, r30
    142a:	fc 93       	st	X, r31
		
		if (SpeedFromEEPROMch[i] != 0) //Check for 0 value
    142c:	dc 01       	movw	r26, r24
    142e:	a3 53       	subi	r26, 0x33	; 51
    1430:	bb 4b       	sbci	r27, 0xBB	; 187
    1432:	4d 91       	ld	r20, X+
    1434:	5c 91       	ld	r21, X
    1436:	41 15       	cp	r20, r1
    1438:	51 05       	cpc	r21, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <EEPROM_FaultDetect+0x40>
    143c:	48 c0       	rjmp	.+144    	; 0x14ce <EEPROM_FaultDetect+0xd0>
		{
			SpeedToEEPROMch[i] = ((19*SpeedFromEEPROMch[i]/20) + (SpeedToEEPROMch[i]/20));	//Calculating new value for EEPROM
    143e:	83 e1       	ldi	r24, 0x13	; 19
    1440:	84 9f       	mul	r24, r20
    1442:	90 01       	movw	r18, r0
    1444:	85 9f       	mul	r24, r21
    1446:	30 0d       	add	r19, r0
    1448:	11 24       	eor	r1, r1
    144a:	ad ec       	ldi	r26, 0xCD	; 205
    144c:	bc ec       	ldi	r27, 0xCC	; 204
    144e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__umulhisi3>
    1452:	8c 01       	movw	r16, r24
    1454:	12 95       	swap	r17
    1456:	02 95       	swap	r16
    1458:	0f 70       	andi	r16, 0x0F	; 15
    145a:	01 27       	eor	r16, r17
    145c:	1f 70       	andi	r17, 0x0F	; 15
    145e:	01 27       	eor	r16, r17
    1460:	9f 01       	movw	r18, r30
    1462:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__umulhisi3>
    1466:	92 95       	swap	r25
    1468:	82 95       	swap	r24
    146a:	8f 70       	andi	r24, 0x0F	; 15
    146c:	89 27       	eor	r24, r25
    146e:	9f 70       	andi	r25, 0x0F	; 15
    1470:	89 27       	eor	r24, r25
    1472:	08 0f       	add	r16, r24
    1474:	19 1f       	adc	r17, r25
    1476:	fe 01       	movw	r30, r28
    1478:	ee 0f       	add	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	e3 54       	subi	r30, 0x43	; 67
    147e:	fb 4b       	sbci	r31, 0xBB	; 187
    1480:	00 83       	st	Z, r16
    1482:	11 83       	std	Z+1, r17	; 0x01
			
			if ((SpeedFromEEPROMch[i]*0.99) > SpeedToEEPROMch[i])	//Value diffrence to big | fault detected
    1484:	ba 01       	movw	r22, r20
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
    148e:	24 ea       	ldi	r18, 0xA4	; 164
    1490:	30 e7       	ldi	r19, 0x70	; 112
    1492:	4d e7       	ldi	r20, 0x7D	; 125
    1494:	5f e3       	ldi	r21, 0x3F	; 63
    1496:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__mulsf3>
    149a:	6b 01       	movw	r12, r22
    149c:	7c 01       	movw	r14, r24
    149e:	b8 01       	movw	r22, r16
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
    14a8:	9b 01       	movw	r18, r22
    14aa:	ac 01       	movw	r20, r24
    14ac:	c7 01       	movw	r24, r14
    14ae:	b6 01       	movw	r22, r12
    14b0:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__gesf2>
    14b4:	18 16       	cp	r1, r24
    14b6:	5c f4       	brge	.+22     	; 0x14ce <EEPROM_FaultDetect+0xd0>
			{
				TxBuffer_StringWrite("Fault predicted in fan ");
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	93 e4       	ldi	r25, 0x43	; 67
    14bc:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
				TxBuffer_IntWrite(TxBuffer, i);
    14c0:	be 01       	movw	r22, r28
    14c2:	88 e1       	ldi	r24, 0x18	; 24
    14c4:	95 e4       	ldi	r25, 0x45	; 69
    14c6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
				UART_NewLine();
    14ca:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	my_eeprom_update_char(fan_6_EEPROM_adr, SpeedToEEPROMch[6]);
	my_eeprom_update_char(fan_7_EEPROM_adr, SpeedToEEPROMch[7]);
	TxBuffer_StringWrite("Saving done");
}
void EEPROM_FaultDetect(void){
	for (int i = 0; i<=7; i++)
    14ce:	21 96       	adiw	r28, 0x01	; 1
    14d0:	c8 30       	cpi	r28, 0x08	; 8
    14d2:	d1 05       	cpc	r29, r1
    14d4:	0c f4       	brge	.+2      	; 0x14d8 <EEPROM_FaultDetect+0xda>
    14d6:	9e cf       	rjmp	.-196    	; 0x1414 <EEPROM_FaultDetect+0x16>
				TxBuffer_IntWrite(TxBuffer, i);
				UART_NewLine();
			}
		}
	}
}
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	08 95       	ret

000014ea <EEPROM_SaveFanStatus>:
	}
	
}
void EEPROM_SaveFanStatus(void){
	//Turns the fans up to max speed before updating speed data
	AllON();
    14ea:	0e 94 c4 09 	call	0x1388	; 0x1388 <AllON>
	
	UART_NewLine();
    14ee:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	
	EEPROM_ReadAll();
    14f2:	0e 94 29 04 	call	0x852	; 0x852 <EEPROM_ReadAll>
	
	EEPROM_FaultDetect();
    14f6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <EEPROM_FaultDetect>
	
	EEPROM_UpdateAll();
    14fa:	0e 94 32 09 	call	0x1264	; 0x1264 <EEPROM_UpdateAll>
    14fe:	08 95       	ret

00001500 <UART_WriteTrendData>:
	my_eeprom_update_char(fan_6_EEPROM_adr, 0);
	my_eeprom_update_char(fan_7_EEPROM_adr, 0);
	
	TxBuffer_StringWrite("EEPROM has been reset");
}
void UART_WriteTrendData(void){
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
	EEPROM_ReadAll();
    1504:	0e 94 29 04 	call	0x852	; 0x852 <EEPROM_ReadAll>
	//Presenting the data in the UART menu
	UART_NewLine();
    1508:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	TxBuffer_StringWrite("TREND DATA:");
    150c:	8b e1       	ldi	r24, 0x1B	; 27
    150e:	93 e4       	ldi	r25, 0x43	; 67
    1510:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
	UART_NewLine();
    1514:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	UART_NewLine();
    1518:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	for (int i = 0; i<=7; i++)
    151c:	c0 e0       	ldi	r28, 0x00	; 0
    151e:	d0 e0       	ldi	r29, 0x00	; 0
    1520:	1b c0       	rjmp	.+54     	; 0x1558 <UART_WriteTrendData+0x58>
	{
		TxBuffer_StringWrite("Trend data for fan ");
    1522:	87 e2       	ldi	r24, 0x27	; 39
    1524:	93 e4       	ldi	r25, 0x43	; 67
    1526:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
		TxBuffer_IntWrite(TxBuffer, i);
    152a:	be 01       	movw	r22, r28
    152c:	88 e1       	ldi	r24, 0x18	; 24
    152e:	95 e4       	ldi	r25, 0x45	; 69
    1530:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
		TxBuffer_StringWrite(": ");
    1534:	84 e6       	ldi	r24, 0x64	; 100
    1536:	90 e4       	ldi	r25, 0x40	; 64
    1538:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
		TxBuffer_IntWrite(TxBuffer, SpeedFromEEPROMch[i]);
    153c:	fe 01       	movw	r30, r28
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	e3 53       	subi	r30, 0x33	; 51
    1544:	fb 4b       	sbci	r31, 0xBB	; 187
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	88 e1       	ldi	r24, 0x18	; 24
    154c:	95 e4       	ldi	r25, 0x45	; 69
    154e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
		UART_NewLine();
    1552:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
	//Presenting the data in the UART menu
	UART_NewLine();
	TxBuffer_StringWrite("TREND DATA:");
	UART_NewLine();
	UART_NewLine();
	for (int i = 0; i<=7; i++)
    1556:	21 96       	adiw	r28, 0x01	; 1
    1558:	c8 30       	cpi	r28, 0x08	; 8
    155a:	d1 05       	cpc	r29, r1
    155c:	14 f3       	brlt	.-60     	; 0x1522 <UART_WriteTrendData+0x22>
		TxBuffer_IntWrite(TxBuffer, i);
		TxBuffer_StringWrite(": ");
		TxBuffer_IntWrite(TxBuffer, SpeedFromEEPROMch[i]);
		UART_NewLine();
	}
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <EchoToggle>:
	sprintf(buf,"%u",data);
	UART_SendBuffer();
}

void EchoToggle(void){
	if (strcmp(ProcessedBuffer,"on")==0){
    1564:	60 e4       	ldi	r22, 0x40	; 64
    1566:	73 e4       	ldi	r23, 0x43	; 67
    1568:	81 ef       	ldi	r24, 0xF1	; 241
    156a:	94 e4       	ldi	r25, 0x44	; 68
    156c:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    1570:	89 2b       	or	r24, r25
    1572:	79 f4       	brne	.+30     	; 0x1592 <EchoToggle+0x2e>
		EchoON = ~0;
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <EchoON>
		strcpy(TxBuffer,"Echo on");
    157a:	88 e0       	ldi	r24, 0x08	; 8
    157c:	eb e3       	ldi	r30, 0x3B	; 59
    157e:	f3 e4       	ldi	r31, 0x43	; 67
    1580:	a8 e1       	ldi	r26, 0x18	; 24
    1582:	b5 e4       	ldi	r27, 0x45	; 69
    1584:	01 90       	ld	r0, Z+
    1586:	0d 92       	st	X+, r0
    1588:	8a 95       	dec	r24
    158a:	e1 f7       	brne	.-8      	; 0x1584 <EchoToggle+0x20>
		UART_SendBuffer();
    158c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
    1590:	08 95       	ret
		
	}
	else if (strcmp(ProcessedBuffer,"off")==0){
    1592:	68 e4       	ldi	r22, 0x48	; 72
    1594:	73 e4       	ldi	r23, 0x43	; 67
    1596:	81 ef       	ldi	r24, 0xF1	; 241
    1598:	94 e4       	ldi	r25, 0x44	; 68
    159a:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    159e:	89 2b       	or	r24, r25
    15a0:	71 f4       	brne	.+28     	; 0x15be <EchoToggle+0x5a>
		EchoON = 0;
    15a2:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <EchoON>
		strcpy(TxBuffer,"Echo off");
    15a6:	89 e0       	ldi	r24, 0x09	; 9
    15a8:	e3 e4       	ldi	r30, 0x43	; 67
    15aa:	f3 e4       	ldi	r31, 0x43	; 67
    15ac:	a8 e1       	ldi	r26, 0x18	; 24
    15ae:	b5 e4       	ldi	r27, 0x45	; 69
    15b0:	01 90       	ld	r0, Z+
    15b2:	0d 92       	st	X+, r0
    15b4:	8a 95       	dec	r24
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <EchoToggle+0x4c>
		UART_SendBuffer();
    15b8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
    15bc:	08 95       	ret
		
		} else {
		strcpy(TxBuffer,"echo with incorrect syntax ");
    15be:	8c e1       	ldi	r24, 0x1C	; 28
    15c0:	ec e4       	ldi	r30, 0x4C	; 76
    15c2:	f3 e4       	ldi	r31, 0x43	; 67
    15c4:	a8 e1       	ldi	r26, 0x18	; 24
    15c6:	b5 e4       	ldi	r27, 0x45	; 69
    15c8:	01 90       	ld	r0, Z+
    15ca:	0d 92       	st	X+, r0
    15cc:	8a 95       	dec	r24
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <EchoToggle+0x64>
		UART_SendBuffer();
    15d0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		strcpy(TxBuffer,ProcessedBuffer);
    15d4:	61 ef       	ldi	r22, 0xF1	; 241
    15d6:	74 e4       	ldi	r23, 0x44	; 68
    15d8:	88 e1       	ldi	r24, 0x18	; 24
    15da:	95 e4       	ldi	r25, 0x45	; 69
    15dc:	0e 94 29 19 	call	0x3252	; 0x3252 <strcpy>
		UART_SendBuffer();
    15e0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
		UART_NewLine();
    15e4:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
    15e8:	08 95       	ret

000015ea <UART_MENU>:
const char commandArray[NoOfCommands][MaxCommandLength] = {"all","echo","read","fan","help","save","reseteeprom","trenddata"};
enum commands{commandAll=1,commandEcho,commandRead,commandFanControll,commandHelp,commandSave,commandResetEEPROM,commandTrendData};
int mainmenu  = 1;
void UART_MENU(void){
	// If echo is on, and the ASCII character is higher than 31, or Bell, Carriage Return, Line Feed or backspace, then echo the character. Other are filtered as to not get strange behavior from Putty.
	if (RecvCommand) {
    15ea:	80 91 b4 44 	lds	r24, 0x44B4	; 0x8044b4 <RecvCommand>
    15ee:	88 23       	and	r24, r24
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <UART_MENU+0xa>
    15f2:	c6 c1       	rjmp	.+908    	; 0x1980 <UART_MENU+0x396>

		UART_NewLine();
    15f4:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>

		if (ProcessWord() != 0) {
    15f8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <ProcessWord>
    15fc:	88 23       	and	r24, r24
    15fe:	09 f4       	brne	.+2      	; 0x1602 <UART_MENU+0x18>
    1600:	bd c1       	rjmp	.+890    	; 0x197c <UART_MENU+0x392>
			switch (SearchForCommand()){
    1602:	0e 94 85 04 	call	0x90a	; 0x90a <SearchForCommand>
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	fc 01       	movw	r30, r24
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	e8 30       	cpi	r30, 0x08	; 8
    160e:	f1 05       	cpc	r31, r1
    1610:	08 f0       	brcs	.+2      	; 0x1614 <UART_MENU+0x2a>
    1612:	b0 c1       	rjmp	.+864    	; 0x1974 <UART_MENU+0x38a>
    1614:	e6 58       	subi	r30, 0x86	; 134
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__tablejump2__>
				case commandAll:
				if (ProcessWord() == 0){
    161c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <ProcessWord>
    1620:	81 11       	cpse	r24, r1
    1622:	0c c0       	rjmp	.+24     	; 0x163c <UART_MENU+0x52>
					strcpy(TxBuffer,"All command with no arguments");
    1624:	8e e1       	ldi	r24, 0x1E	; 30
    1626:	e8 e6       	ldi	r30, 0x68	; 104
    1628:	f3 e4       	ldi	r31, 0x43	; 67
    162a:	a8 e1       	ldi	r26, 0x18	; 24
    162c:	b5 e4       	ldi	r27, 0x45	; 69
    162e:	01 90       	ld	r0, Z+
    1630:	0d 92       	st	X+, r0
    1632:	8a 95       	dec	r24
    1634:	e1 f7       	brne	.-8      	; 0x162e <UART_MENU+0x44>
					UART_SendBuffer();
    1636:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
    163a:	a0 c1       	rjmp	.+832    	; 0x197c <UART_MENU+0x392>
					}else{
					if (strcmp(ProcessedBuffer,"on")==0){
    163c:	60 e4       	ldi	r22, 0x40	; 64
    163e:	73 e4       	ldi	r23, 0x43	; 67
    1640:	81 ef       	ldi	r24, 0xF1	; 241
    1642:	94 e4       	ldi	r25, 0x44	; 68
    1644:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    1648:	89 2b       	or	r24, r25
    164a:	19 f4       	brne	.+6      	; 0x1652 <UART_MENU+0x68>
						AllON();
    164c:	0e 94 c4 09 	call	0x1388	; 0x1388 <AllON>
						break;
    1650:	95 c1       	rjmp	.+810    	; 0x197c <UART_MENU+0x392>
					}
					if (strcmp(ProcessedBuffer,"off")==0){
    1652:	68 e4       	ldi	r22, 0x48	; 72
    1654:	73 e4       	ldi	r23, 0x43	; 67
    1656:	81 ef       	ldi	r24, 0xF1	; 241
    1658:	94 e4       	ldi	r25, 0x44	; 68
    165a:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    165e:	89 2b       	or	r24, r25
    1660:	19 f4       	brne	.+6      	; 0x1668 <UART_MENU+0x7e>
						AllOFF();
    1662:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <AllOFF>
						break;
    1666:	8a c1       	rjmp	.+788    	; 0x197c <UART_MENU+0x392>
					}
					TxBuffer_StringWrite("All command with incorrect syntax");
    1668:	86 e8       	ldi	r24, 0x86	; 134
    166a:	93 e4       	ldi	r25, 0x43	; 67
    166c:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
					UART_NewLine();
    1670:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
    1674:	83 c1       	rjmp	.+774    	; 0x197c <UART_MENU+0x392>
				}
				break;
				
				case commandEcho:
				if (ProcessWord() == 0){
    1676:	0e 94 1e 05 	call	0xa3c	; 0xa3c <ProcessWord>
    167a:	81 11       	cpse	r24, r1
    167c:	05 c0       	rjmp	.+10     	; 0x1688 <UART_MENU+0x9e>
					
					UART_EchoCheck();
    167e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <UART_EchoCheck>
					UART_SendBuffer();
    1682:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_SendBuffer>
    1686:	7a c1       	rjmp	.+756    	; 0x197c <UART_MENU+0x392>
					}else{
					EchoToggle();
    1688:	0e 94 b2 0a 	call	0x1564	; 0x1564 <EchoToggle>
    168c:	77 c1       	rjmp	.+750    	; 0x197c <UART_MENU+0x392>
				}
				break;

				case commandRead:
				if (ProcessWord() == 0){
    168e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <ProcessWord>
    1692:	81 11       	cpse	r24, r1
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <UART_MENU+0xb6>
					TxBuffer_StringWrite("Read command with no arguments");
    1696:	88 ea       	ldi	r24, 0xA8	; 168
    1698:	93 e4       	ldi	r25, 0x43	; 67
    169a:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
    169e:	6e c1       	rjmp	.+732    	; 0x197c <UART_MENU+0x392>
					}else{
					if(strcmp(ProcessedBuffer, "0") == 0){
    16a0:	62 e4       	ldi	r22, 0x42	; 66
    16a2:	71 e4       	ldi	r23, 0x41	; 65
    16a4:	81 ef       	ldi	r24, 0xF1	; 241
    16a6:	94 e4       	ldi	r25, 0x44	; 68
    16a8:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    16ac:	89 2b       	or	r24, r25
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <UART_MENU+0xce>
						UART_ReadChannel(0);
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_ReadChannel>
						break;
    16b6:	62 c1       	rjmp	.+708    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "1") == 0){
    16b8:	67 ec       	ldi	r22, 0xC7	; 199
    16ba:	73 e4       	ldi	r23, 0x43	; 67
    16bc:	81 ef       	ldi	r24, 0xF1	; 241
    16be:	94 e4       	ldi	r25, 0x44	; 68
    16c0:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    16c4:	89 2b       	or	r24, r25
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <UART_MENU+0xe6>
						UART_ReadChannel(1);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_ReadChannel>
						break;
    16ce:	56 c1       	rjmp	.+684    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "2") == 0){
    16d0:	69 ec       	ldi	r22, 0xC9	; 201
    16d2:	73 e4       	ldi	r23, 0x43	; 67
    16d4:	81 ef       	ldi	r24, 0xF1	; 241
    16d6:	94 e4       	ldi	r25, 0x44	; 68
    16d8:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    16dc:	89 2b       	or	r24, r25
    16de:	21 f4       	brne	.+8      	; 0x16e8 <UART_MENU+0xfe>
						UART_ReadChannel(2);
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_ReadChannel>
						break;
    16e6:	4a c1       	rjmp	.+660    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "3") == 0){
    16e8:	6b ec       	ldi	r22, 0xCB	; 203
    16ea:	73 e4       	ldi	r23, 0x43	; 67
    16ec:	81 ef       	ldi	r24, 0xF1	; 241
    16ee:	94 e4       	ldi	r25, 0x44	; 68
    16f0:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    16f4:	89 2b       	or	r24, r25
    16f6:	21 f4       	brne	.+8      	; 0x1700 <UART_MENU+0x116>
						UART_ReadChannel(3);
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_ReadChannel>
						break;
    16fe:	3e c1       	rjmp	.+636    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "4") == 0){
    1700:	6d ec       	ldi	r22, 0xCD	; 205
    1702:	73 e4       	ldi	r23, 0x43	; 67
    1704:	81 ef       	ldi	r24, 0xF1	; 241
    1706:	94 e4       	ldi	r25, 0x44	; 68
    1708:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    170c:	89 2b       	or	r24, r25
    170e:	21 f4       	brne	.+8      	; 0x1718 <UART_MENU+0x12e>
						UART_ReadChannel(4);
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_ReadChannel>
						break;
    1716:	32 c1       	rjmp	.+612    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "5") == 0){
    1718:	6f ec       	ldi	r22, 0xCF	; 207
    171a:	73 e4       	ldi	r23, 0x43	; 67
    171c:	81 ef       	ldi	r24, 0xF1	; 241
    171e:	94 e4       	ldi	r25, 0x44	; 68
    1720:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    1724:	89 2b       	or	r24, r25
    1726:	21 f4       	brne	.+8      	; 0x1730 <UART_MENU+0x146>
						UART_ReadChannel(5);
    1728:	85 e0       	ldi	r24, 0x05	; 5
    172a:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_ReadChannel>
						break;
    172e:	26 c1       	rjmp	.+588    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "6") == 0){
    1730:	61 ed       	ldi	r22, 0xD1	; 209
    1732:	73 e4       	ldi	r23, 0x43	; 67
    1734:	81 ef       	ldi	r24, 0xF1	; 241
    1736:	94 e4       	ldi	r25, 0x44	; 68
    1738:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    173c:	89 2b       	or	r24, r25
    173e:	21 f4       	brne	.+8      	; 0x1748 <UART_MENU+0x15e>
						UART_ReadChannel(6);
    1740:	86 e0       	ldi	r24, 0x06	; 6
    1742:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_ReadChannel>
						break;
    1746:	1a c1       	rjmp	.+564    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "7") == 0){
    1748:	63 ed       	ldi	r22, 0xD3	; 211
    174a:	73 e4       	ldi	r23, 0x43	; 67
    174c:	81 ef       	ldi	r24, 0xF1	; 241
    174e:	94 e4       	ldi	r25, 0x44	; 68
    1750:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    1754:	89 2b       	or	r24, r25
    1756:	21 f4       	brne	.+8      	; 0x1760 <UART_MENU+0x176>
						UART_ReadChannel(7);
    1758:	87 e0       	ldi	r24, 0x07	; 7
    175a:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_ReadChannel>
						break;
    175e:	0e c1       	rjmp	.+540    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "all") == 0){
    1760:	65 ed       	ldi	r22, 0xD5	; 213
    1762:	73 e4       	ldi	r23, 0x43	; 67
    1764:	81 ef       	ldi	r24, 0xF1	; 241
    1766:	94 e4       	ldi	r25, 0x44	; 68
    1768:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    176c:	89 2b       	or	r24, r25
    176e:	19 f4       	brne	.+6      	; 0x1776 <UART_MENU+0x18c>
						UART_ReadAll();
    1770:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <UART_ReadAll>
						break;
    1774:	03 c1       	rjmp	.+518    	; 0x197c <UART_MENU+0x392>
					}
					else{
						TxBuffer_StringWrite("Read with incorrect syntax");
    1776:	89 ed       	ldi	r24, 0xD9	; 217
    1778:	93 e4       	ldi	r25, 0x43	; 67
    177a:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
						UART_NewLine();
    177e:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
    1782:	fc c0       	rjmp	.+504    	; 0x197c <UART_MENU+0x392>
					}
				}
				break;
				
				case commandFanControll:
				if (ProcessWord() == 0){
    1784:	0e 94 1e 05 	call	0xa3c	; 0xa3c <ProcessWord>
    1788:	81 11       	cpse	r24, r1
    178a:	05 c0       	rjmp	.+10     	; 0x1796 <UART_MENU+0x1ac>
					TxBuffer_StringWrite("Fan command with no arguments");
    178c:	84 ef       	ldi	r24, 0xF4	; 244
    178e:	93 e4       	ldi	r25, 0x43	; 67
    1790:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
    1794:	f3 c0       	rjmp	.+486    	; 0x197c <UART_MENU+0x392>
					}else{
					
					if(strcmp(ProcessedBuffer, "0") == 0){
    1796:	62 e4       	ldi	r22, 0x42	; 66
    1798:	71 e4       	ldi	r23, 0x41	; 65
    179a:	81 ef       	ldi	r24, 0xF1	; 241
    179c:	94 e4       	ldi	r25, 0x44	; 68
    179e:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    17a2:	89 2b       	or	r24, r25
    17a4:	b9 f4       	brne	.+46     	; 0x17d4 <UART_MENU+0x1ea>
						speedch0 = UART_FanSpeedSet();
    17a6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_FanSpeedSet>
    17aa:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <speedch0>
    17ae:	90 93 ec 44 	sts	0x44EC, r25	; 0x8044ec <speedch0+0x1>
						AnalogWrite(0, speedch0);
    17b2:	68 2f       	mov	r22, r24
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch0);
    17ba:	60 91 eb 44 	lds	r22, 0x44EB	; 0x8044eb <speedch0>
    17be:	70 91 ec 44 	lds	r23, 0x44EC	; 0x8044ec <speedch0+0x1>
    17c2:	88 e1       	ldi	r24, 0x18	; 24
    17c4:	95 e4       	ldi	r25, 0x45	; 69
    17c6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
						SpeedArr[0] = speedch0;
    17ca:	80 91 eb 44 	lds	r24, 0x44EB	; 0x8044eb <speedch0>
    17ce:	80 93 b5 44 	sts	0x44B5, r24	; 0x8044b5 <SpeedArr>
						break;
    17d2:	d4 c0       	rjmp	.+424    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "1") == 0){
    17d4:	67 ec       	ldi	r22, 0xC7	; 199
    17d6:	73 e4       	ldi	r23, 0x43	; 67
    17d8:	81 ef       	ldi	r24, 0xF1	; 241
    17da:	94 e4       	ldi	r25, 0x44	; 68
    17dc:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    17e0:	89 2b       	or	r24, r25
    17e2:	99 f4       	brne	.+38     	; 0x180a <UART_MENU+0x220>
						speedch1 = UART_FanSpeedSet();
    17e4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_FanSpeedSet>
    17e8:	80 93 e9 44 	sts	0x44E9, r24	; 0x8044e9 <speedch1>
    17ec:	90 93 ea 44 	sts	0x44EA, r25	; 0x8044ea <speedch1+0x1>
						AnalogWrite(1, speedch1);
    17f0:	68 2f       	mov	r22, r24
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch1);
    17f8:	60 91 e9 44 	lds	r22, 0x44E9	; 0x8044e9 <speedch1>
    17fc:	70 91 ea 44 	lds	r23, 0x44EA	; 0x8044ea <speedch1+0x1>
    1800:	88 e1       	ldi	r24, 0x18	; 24
    1802:	95 e4       	ldi	r25, 0x45	; 69
    1804:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
						break;
    1808:	b9 c0       	rjmp	.+370    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "2") == 0){
    180a:	69 ec       	ldi	r22, 0xC9	; 201
    180c:	73 e4       	ldi	r23, 0x43	; 67
    180e:	81 ef       	ldi	r24, 0xF1	; 241
    1810:	94 e4       	ldi	r25, 0x44	; 68
    1812:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    1816:	89 2b       	or	r24, r25
    1818:	99 f4       	brne	.+38     	; 0x1840 <UART_MENU+0x256>
						speedch2 = UART_FanSpeedSet();
    181a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_FanSpeedSet>
    181e:	80 93 e7 44 	sts	0x44E7, r24	; 0x8044e7 <speedch2>
    1822:	90 93 e8 44 	sts	0x44E8, r25	; 0x8044e8 <speedch2+0x1>
						AnalogWrite(2, speedch2);
    1826:	68 2f       	mov	r22, r24
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch2);
    182e:	60 91 e7 44 	lds	r22, 0x44E7	; 0x8044e7 <speedch2>
    1832:	70 91 e8 44 	lds	r23, 0x44E8	; 0x8044e8 <speedch2+0x1>
    1836:	88 e1       	ldi	r24, 0x18	; 24
    1838:	95 e4       	ldi	r25, 0x45	; 69
    183a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
						break;
    183e:	9e c0       	rjmp	.+316    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "3") == 0){
    1840:	6b ec       	ldi	r22, 0xCB	; 203
    1842:	73 e4       	ldi	r23, 0x43	; 67
    1844:	81 ef       	ldi	r24, 0xF1	; 241
    1846:	94 e4       	ldi	r25, 0x44	; 68
    1848:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    184c:	89 2b       	or	r24, r25
    184e:	99 f4       	brne	.+38     	; 0x1876 <UART_MENU+0x28c>
						speedch3 = UART_FanSpeedSet();
    1850:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_FanSpeedSet>
    1854:	80 93 e5 44 	sts	0x44E5, r24	; 0x8044e5 <speedch3>
    1858:	90 93 e6 44 	sts	0x44E6, r25	; 0x8044e6 <speedch3+0x1>
						AnalogWrite(3, speedch3);
    185c:	68 2f       	mov	r22, r24
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch3);
    1864:	60 91 e5 44 	lds	r22, 0x44E5	; 0x8044e5 <speedch3>
    1868:	70 91 e6 44 	lds	r23, 0x44E6	; 0x8044e6 <speedch3+0x1>
    186c:	88 e1       	ldi	r24, 0x18	; 24
    186e:	95 e4       	ldi	r25, 0x45	; 69
    1870:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
						break;
    1874:	83 c0       	rjmp	.+262    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "4") == 0){
    1876:	6d ec       	ldi	r22, 0xCD	; 205
    1878:	73 e4       	ldi	r23, 0x43	; 67
    187a:	81 ef       	ldi	r24, 0xF1	; 241
    187c:	94 e4       	ldi	r25, 0x44	; 68
    187e:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    1882:	89 2b       	or	r24, r25
    1884:	99 f4       	brne	.+38     	; 0x18ac <UART_MENU+0x2c2>
						speedch4 = UART_FanSpeedSet();
    1886:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_FanSpeedSet>
    188a:	80 93 e3 44 	sts	0x44E3, r24	; 0x8044e3 <speedch4>
    188e:	90 93 e4 44 	sts	0x44E4, r25	; 0x8044e4 <speedch4+0x1>
						AnalogWrite(4, speedch4);
    1892:	68 2f       	mov	r22, r24
    1894:	84 e0       	ldi	r24, 0x04	; 4
    1896:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch4);
    189a:	60 91 e3 44 	lds	r22, 0x44E3	; 0x8044e3 <speedch4>
    189e:	70 91 e4 44 	lds	r23, 0x44E4	; 0x8044e4 <speedch4+0x1>
    18a2:	88 e1       	ldi	r24, 0x18	; 24
    18a4:	95 e4       	ldi	r25, 0x45	; 69
    18a6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
						break;
    18aa:	68 c0       	rjmp	.+208    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "5") == 0){
    18ac:	6f ec       	ldi	r22, 0xCF	; 207
    18ae:	73 e4       	ldi	r23, 0x43	; 67
    18b0:	81 ef       	ldi	r24, 0xF1	; 241
    18b2:	94 e4       	ldi	r25, 0x44	; 68
    18b4:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    18b8:	89 2b       	or	r24, r25
    18ba:	99 f4       	brne	.+38     	; 0x18e2 <UART_MENU+0x2f8>
						speedch5 = UART_FanSpeedSet();
    18bc:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_FanSpeedSet>
    18c0:	80 93 e1 44 	sts	0x44E1, r24	; 0x8044e1 <speedch5>
    18c4:	90 93 e2 44 	sts	0x44E2, r25	; 0x8044e2 <speedch5+0x1>
						AnalogWrite(5, speedch5);
    18c8:	68 2f       	mov	r22, r24
    18ca:	85 e0       	ldi	r24, 0x05	; 5
    18cc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch5);
    18d0:	60 91 e1 44 	lds	r22, 0x44E1	; 0x8044e1 <speedch5>
    18d4:	70 91 e2 44 	lds	r23, 0x44E2	; 0x8044e2 <speedch5+0x1>
    18d8:	88 e1       	ldi	r24, 0x18	; 24
    18da:	95 e4       	ldi	r25, 0x45	; 69
    18dc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
						break;
    18e0:	4d c0       	rjmp	.+154    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "6") == 0){
    18e2:	61 ed       	ldi	r22, 0xD1	; 209
    18e4:	73 e4       	ldi	r23, 0x43	; 67
    18e6:	81 ef       	ldi	r24, 0xF1	; 241
    18e8:	94 e4       	ldi	r25, 0x44	; 68
    18ea:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    18ee:	89 2b       	or	r24, r25
    18f0:	99 f4       	brne	.+38     	; 0x1918 <UART_MENU+0x32e>
						speedch6 = UART_FanSpeedSet();
    18f2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_FanSpeedSet>
    18f6:	80 93 df 44 	sts	0x44DF, r24	; 0x8044df <speedch6>
    18fa:	90 93 e0 44 	sts	0x44E0, r25	; 0x8044e0 <speedch6+0x1>
						AnalogWrite(6, speedch6);
    18fe:	68 2f       	mov	r22, r24
    1900:	86 e0       	ldi	r24, 0x06	; 6
    1902:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch6);
    1906:	60 91 df 44 	lds	r22, 0x44DF	; 0x8044df <speedch6>
    190a:	70 91 e0 44 	lds	r23, 0x44E0	; 0x8044e0 <speedch6+0x1>
    190e:	88 e1       	ldi	r24, 0x18	; 24
    1910:	95 e4       	ldi	r25, 0x45	; 69
    1912:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
						break;
    1916:	32 c0       	rjmp	.+100    	; 0x197c <UART_MENU+0x392>
					}
					else if(strcmp(ProcessedBuffer, "7") == 0){
    1918:	63 ed       	ldi	r22, 0xD3	; 211
    191a:	73 e4       	ldi	r23, 0x43	; 67
    191c:	81 ef       	ldi	r24, 0xF1	; 241
    191e:	94 e4       	ldi	r25, 0x44	; 68
    1920:	0e 94 20 19 	call	0x3240	; 0x3240 <strcmp>
    1924:	89 2b       	or	r24, r25
    1926:	99 f4       	brne	.+38     	; 0x194e <UART_MENU+0x364>
						speedch7 = UART_FanSpeedSet();
    1928:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_FanSpeedSet>
    192c:	80 93 dd 44 	sts	0x44DD, r24	; 0x8044dd <speedch7>
    1930:	90 93 de 44 	sts	0x44DE, r25	; 0x8044de <speedch7+0x1>
						AnalogWrite(7, speedch7);
    1934:	68 2f       	mov	r22, r24
    1936:	87 e0       	ldi	r24, 0x07	; 7
    1938:	0e 94 61 01 	call	0x2c2	; 0x2c2 <AnalogWrite>
						TxBuffer_IntWrite(TxBuffer, speedch7);
    193c:	60 91 dd 44 	lds	r22, 0x44DD	; 0x8044dd <speedch7>
    1940:	70 91 de 44 	lds	r23, 0x44DE	; 0x8044de <speedch7+0x1>
    1944:	88 e1       	ldi	r24, 0x18	; 24
    1946:	95 e4       	ldi	r25, 0x45	; 69
    1948:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TxBuffer_IntWrite>
						break;
    194c:	17 c0       	rjmp	.+46     	; 0x197c <UART_MENU+0x392>
						}else{
						
						TxBuffer_StringWrite("Fan with incorrect syntax");
    194e:	82 e1       	ldi	r24, 0x12	; 18
    1950:	94 e4       	ldi	r25, 0x44	; 68
    1952:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
						UART_NewLine();
    1956:	0e 94 4c 05 	call	0xa98	; 0xa98 <UART_NewLine>
    195a:	10 c0       	rjmp	.+32     	; 0x197c <UART_MENU+0x392>
					}
				}
				break;
				
				case commandHelp:
				UART_HelpMenu();
    195c:	0e 94 92 09 	call	0x1324	; 0x1324 <UART_HelpMenu>
				break;
    1960:	0d c0       	rjmp	.+26     	; 0x197c <UART_MENU+0x392>
				
				case commandSave:
				EEPROM_SaveFanStatus();
    1962:	0e 94 75 0a 	call	0x14ea	; 0x14ea <EEPROM_SaveFanStatus>
				break;
    1966:	0a c0       	rjmp	.+20     	; 0x197c <UART_MENU+0x392>
				
				case commandResetEEPROM:
				ResetEEPROM();
    1968:	0e 94 65 09 	call	0x12ca	; 0x12ca <ResetEEPROM>
				break;
    196c:	07 c0       	rjmp	.+14     	; 0x197c <UART_MENU+0x392>
				
				case commandTrendData:
				UART_WriteTrendData();
    196e:	0e 94 80 0a 	call	0x1500	; 0x1500 <UART_WriteTrendData>
				break;
    1972:	04 c0       	rjmp	.+8      	; 0x197c <UART_MENU+0x392>
				
				default:
				TxBuffer_StringWrite("Unknown command!");
    1974:	8c e2       	ldi	r24, 0x2C	; 44
    1976:	94 e4       	ldi	r25, 0x44	; 68
    1978:	0e 94 2a 09 	call	0x1254	; 0x1254 <TxBuffer_StringWrite>
			}
		}
		
		ResetSHell();
    197c:	0e 94 92 05 	call	0xb24	; 0xb24 <ResetSHell>
    1980:	08 95       	ret

00001982 <main>:

#include "SystemRTCandClk.h"

char TxBuffer[24];
int main(void){
	System_init();
    1982:	0e 94 79 02 	call	0x4f2	; 0x4f2 <System_init>
	while (1)
	{
		UART_MENU();
    1986:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <UART_MENU>
    198a:	fd cf       	rjmp	.-6      	; 0x1986 <main+0x4>

0000198c <__vector_5>:
		
	}
}

ISR(RTC_CNT_vect){
    198c:	1f 92       	push	r1
    198e:	0f 92       	push	r0
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	0f 92       	push	r0
    1994:	11 24       	eor	r1, r1
    1996:	0b b6       	in	r0, 0x3b	; 59
    1998:	0f 92       	push	r0
    199a:	2f 93       	push	r18
    199c:	3f 93       	push	r19
    199e:	4f 93       	push	r20
    19a0:	5f 93       	push	r21
    19a2:	6f 93       	push	r22
    19a4:	7f 93       	push	r23
    19a6:	8f 93       	push	r24
    19a8:	9f 93       	push	r25
    19aa:	af 93       	push	r26
    19ac:	bf 93       	push	r27
    19ae:	ef 93       	push	r30
    19b0:	ff 93       	push	r31
	RTC.INTFLAGS = RTC_OVF_bm;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
	ISR_TWI();
    19b8:	0e 94 b0 03 	call	0x760	; 0x760 <ISR_TWI>
}
    19bc:	ff 91       	pop	r31
    19be:	ef 91       	pop	r30
    19c0:	bf 91       	pop	r27
    19c2:	af 91       	pop	r26
    19c4:	9f 91       	pop	r25
    19c6:	8f 91       	pop	r24
    19c8:	7f 91       	pop	r23
    19ca:	6f 91       	pop	r22
    19cc:	5f 91       	pop	r21
    19ce:	4f 91       	pop	r20
    19d0:	3f 91       	pop	r19
    19d2:	2f 91       	pop	r18
    19d4:	0f 90       	pop	r0
    19d6:	0b be       	out	0x3b, r0	; 59
    19d8:	0f 90       	pop	r0
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	0f 90       	pop	r0
    19de:	1f 90       	pop	r1
    19e0:	18 95       	reti

000019e2 <__vector_53>:

ISR(USART3_RXC_vect){
    19e2:	1f 92       	push	r1
    19e4:	0f 92       	push	r0
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	0f 92       	push	r0
    19ea:	11 24       	eor	r1, r1
    19ec:	0b b6       	in	r0, 0x3b	; 59
    19ee:	0f 92       	push	r0
    19f0:	2f 93       	push	r18
    19f2:	3f 93       	push	r19
    19f4:	4f 93       	push	r20
    19f6:	5f 93       	push	r21
    19f8:	6f 93       	push	r22
    19fa:	7f 93       	push	r23
    19fc:	8f 93       	push	r24
    19fe:	9f 93       	push	r25
    1a00:	af 93       	push	r26
    1a02:	bf 93       	push	r27
    1a04:	ef 93       	push	r30
    1a06:	ff 93       	push	r31
	UART_ISR();
    1a08:	0e 94 02 09 	call	0x1204	; 0x1204 <UART_ISR>
}
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	7f 91       	pop	r23
    1a1a:	6f 91       	pop	r22
    1a1c:	5f 91       	pop	r21
    1a1e:	4f 91       	pop	r20
    1a20:	3f 91       	pop	r19
    1a22:	2f 91       	pop	r18
    1a24:	0f 90       	pop	r0
    1a26:	0b be       	out	0x3b, r0	; 59
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <__subsf3>:
    1a32:	50 58       	subi	r21, 0x80	; 128

00001a34 <__addsf3>:
    1a34:	bb 27       	eor	r27, r27
    1a36:	aa 27       	eor	r26, r26
    1a38:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__addsf3x>
    1a3c:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__fp_round>
    1a40:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__fp_pscA>
    1a44:	38 f0       	brcs	.+14     	; 0x1a54 <__addsf3+0x20>
    1a46:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fp_pscB>
    1a4a:	20 f0       	brcs	.+8      	; 0x1a54 <__addsf3+0x20>
    1a4c:	39 f4       	brne	.+14     	; 0x1a5c <__addsf3+0x28>
    1a4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a50:	19 f4       	brne	.+6      	; 0x1a58 <__addsf3+0x24>
    1a52:	26 f4       	brtc	.+8      	; 0x1a5c <__addsf3+0x28>
    1a54:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_nan>
    1a58:	0e f4       	brtc	.+2      	; 0x1a5c <__addsf3+0x28>
    1a5a:	e0 95       	com	r30
    1a5c:	e7 fb       	bst	r30, 7
    1a5e:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_inf>

00001a62 <__addsf3x>:
    1a62:	e9 2f       	mov	r30, r25
    1a64:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__fp_split3>
    1a68:	58 f3       	brcs	.-42     	; 0x1a40 <__addsf3+0xc>
    1a6a:	ba 17       	cp	r27, r26
    1a6c:	62 07       	cpc	r22, r18
    1a6e:	73 07       	cpc	r23, r19
    1a70:	84 07       	cpc	r24, r20
    1a72:	95 07       	cpc	r25, r21
    1a74:	20 f0       	brcs	.+8      	; 0x1a7e <__addsf3x+0x1c>
    1a76:	79 f4       	brne	.+30     	; 0x1a96 <__addsf3x+0x34>
    1a78:	a6 f5       	brtc	.+104    	; 0x1ae2 <__addsf3x+0x80>
    1a7a:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__fp_zero>
    1a7e:	0e f4       	brtc	.+2      	; 0x1a82 <__addsf3x+0x20>
    1a80:	e0 95       	com	r30
    1a82:	0b 2e       	mov	r0, r27
    1a84:	ba 2f       	mov	r27, r26
    1a86:	a0 2d       	mov	r26, r0
    1a88:	0b 01       	movw	r0, r22
    1a8a:	b9 01       	movw	r22, r18
    1a8c:	90 01       	movw	r18, r0
    1a8e:	0c 01       	movw	r0, r24
    1a90:	ca 01       	movw	r24, r20
    1a92:	a0 01       	movw	r20, r0
    1a94:	11 24       	eor	r1, r1
    1a96:	ff 27       	eor	r31, r31
    1a98:	59 1b       	sub	r21, r25
    1a9a:	99 f0       	breq	.+38     	; 0x1ac2 <__addsf3x+0x60>
    1a9c:	59 3f       	cpi	r21, 0xF9	; 249
    1a9e:	50 f4       	brcc	.+20     	; 0x1ab4 <__addsf3x+0x52>
    1aa0:	50 3e       	cpi	r21, 0xE0	; 224
    1aa2:	68 f1       	brcs	.+90     	; 0x1afe <__addsf3x+0x9c>
    1aa4:	1a 16       	cp	r1, r26
    1aa6:	f0 40       	sbci	r31, 0x00	; 0
    1aa8:	a2 2f       	mov	r26, r18
    1aaa:	23 2f       	mov	r18, r19
    1aac:	34 2f       	mov	r19, r20
    1aae:	44 27       	eor	r20, r20
    1ab0:	58 5f       	subi	r21, 0xF8	; 248
    1ab2:	f3 cf       	rjmp	.-26     	; 0x1a9a <__addsf3x+0x38>
    1ab4:	46 95       	lsr	r20
    1ab6:	37 95       	ror	r19
    1ab8:	27 95       	ror	r18
    1aba:	a7 95       	ror	r26
    1abc:	f0 40       	sbci	r31, 0x00	; 0
    1abe:	53 95       	inc	r21
    1ac0:	c9 f7       	brne	.-14     	; 0x1ab4 <__addsf3x+0x52>
    1ac2:	7e f4       	brtc	.+30     	; 0x1ae2 <__addsf3x+0x80>
    1ac4:	1f 16       	cp	r1, r31
    1ac6:	ba 0b       	sbc	r27, r26
    1ac8:	62 0b       	sbc	r22, r18
    1aca:	73 0b       	sbc	r23, r19
    1acc:	84 0b       	sbc	r24, r20
    1ace:	ba f0       	brmi	.+46     	; 0x1afe <__addsf3x+0x9c>
    1ad0:	91 50       	subi	r25, 0x01	; 1
    1ad2:	a1 f0       	breq	.+40     	; 0x1afc <__addsf3x+0x9a>
    1ad4:	ff 0f       	add	r31, r31
    1ad6:	bb 1f       	adc	r27, r27
    1ad8:	66 1f       	adc	r22, r22
    1ada:	77 1f       	adc	r23, r23
    1adc:	88 1f       	adc	r24, r24
    1ade:	c2 f7       	brpl	.-16     	; 0x1ad0 <__addsf3x+0x6e>
    1ae0:	0e c0       	rjmp	.+28     	; 0x1afe <__addsf3x+0x9c>
    1ae2:	ba 0f       	add	r27, r26
    1ae4:	62 1f       	adc	r22, r18
    1ae6:	73 1f       	adc	r23, r19
    1ae8:	84 1f       	adc	r24, r20
    1aea:	48 f4       	brcc	.+18     	; 0x1afe <__addsf3x+0x9c>
    1aec:	87 95       	ror	r24
    1aee:	77 95       	ror	r23
    1af0:	67 95       	ror	r22
    1af2:	b7 95       	ror	r27
    1af4:	f7 95       	ror	r31
    1af6:	9e 3f       	cpi	r25, 0xFE	; 254
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <__addsf3x+0x9a>
    1afa:	b0 cf       	rjmp	.-160    	; 0x1a5c <__addsf3+0x28>
    1afc:	93 95       	inc	r25
    1afe:	88 0f       	add	r24, r24
    1b00:	08 f0       	brcs	.+2      	; 0x1b04 <__addsf3x+0xa2>
    1b02:	99 27       	eor	r25, r25
    1b04:	ee 0f       	add	r30, r30
    1b06:	97 95       	ror	r25
    1b08:	87 95       	ror	r24
    1b0a:	08 95       	ret

00001b0c <__fixunssfsi>:
    1b0c:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__fp_splitA>
    1b10:	88 f0       	brcs	.+34     	; 0x1b34 <__fixunssfsi+0x28>
    1b12:	9f 57       	subi	r25, 0x7F	; 127
    1b14:	98 f0       	brcs	.+38     	; 0x1b3c <__fixunssfsi+0x30>
    1b16:	b9 2f       	mov	r27, r25
    1b18:	99 27       	eor	r25, r25
    1b1a:	b7 51       	subi	r27, 0x17	; 23
    1b1c:	b0 f0       	brcs	.+44     	; 0x1b4a <__fixunssfsi+0x3e>
    1b1e:	e1 f0       	breq	.+56     	; 0x1b58 <__fixunssfsi+0x4c>
    1b20:	66 0f       	add	r22, r22
    1b22:	77 1f       	adc	r23, r23
    1b24:	88 1f       	adc	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	1a f0       	brmi	.+6      	; 0x1b30 <__fixunssfsi+0x24>
    1b2a:	ba 95       	dec	r27
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__fixunssfsi+0x14>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <__fixunssfsi+0x4c>
    1b30:	b1 30       	cpi	r27, 0x01	; 1
    1b32:	91 f0       	breq	.+36     	; 0x1b58 <__fixunssfsi+0x4c>
    1b34:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__fp_zero>
    1b38:	b1 e0       	ldi	r27, 0x01	; 1
    1b3a:	08 95       	ret
    1b3c:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__fp_zero>
    1b40:	67 2f       	mov	r22, r23
    1b42:	78 2f       	mov	r23, r24
    1b44:	88 27       	eor	r24, r24
    1b46:	b8 5f       	subi	r27, 0xF8	; 248
    1b48:	39 f0       	breq	.+14     	; 0x1b58 <__fixunssfsi+0x4c>
    1b4a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b4c:	cc f3       	brlt	.-14     	; 0x1b40 <__fixunssfsi+0x34>
    1b4e:	86 95       	lsr	r24
    1b50:	77 95       	ror	r23
    1b52:	67 95       	ror	r22
    1b54:	b3 95       	inc	r27
    1b56:	d9 f7       	brne	.-10     	; 0x1b4e <__fixunssfsi+0x42>
    1b58:	3e f4       	brtc	.+14     	; 0x1b68 <__fixunssfsi+0x5c>
    1b5a:	90 95       	com	r25
    1b5c:	80 95       	com	r24
    1b5e:	70 95       	com	r23
    1b60:	61 95       	neg	r22
    1b62:	7f 4f       	sbci	r23, 0xFF	; 255
    1b64:	8f 4f       	sbci	r24, 0xFF	; 255
    1b66:	9f 4f       	sbci	r25, 0xFF	; 255
    1b68:	08 95       	ret

00001b6a <__floatunsisf>:
    1b6a:	e8 94       	clt
    1b6c:	09 c0       	rjmp	.+18     	; 0x1b80 <__floatsisf+0x12>

00001b6e <__floatsisf>:
    1b6e:	97 fb       	bst	r25, 7
    1b70:	3e f4       	brtc	.+14     	; 0x1b80 <__floatsisf+0x12>
    1b72:	90 95       	com	r25
    1b74:	80 95       	com	r24
    1b76:	70 95       	com	r23
    1b78:	61 95       	neg	r22
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	99 23       	and	r25, r25
    1b82:	a9 f0       	breq	.+42     	; 0x1bae <__floatsisf+0x40>
    1b84:	f9 2f       	mov	r31, r25
    1b86:	96 e9       	ldi	r25, 0x96	; 150
    1b88:	bb 27       	eor	r27, r27
    1b8a:	93 95       	inc	r25
    1b8c:	f6 95       	lsr	r31
    1b8e:	87 95       	ror	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	b7 95       	ror	r27
    1b96:	f1 11       	cpse	r31, r1
    1b98:	f8 cf       	rjmp	.-16     	; 0x1b8a <__floatsisf+0x1c>
    1b9a:	fa f4       	brpl	.+62     	; 0x1bda <__floatsisf+0x6c>
    1b9c:	bb 0f       	add	r27, r27
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__floatsisf+0x36>
    1ba0:	60 ff       	sbrs	r22, 0
    1ba2:	1b c0       	rjmp	.+54     	; 0x1bda <__floatsisf+0x6c>
    1ba4:	6f 5f       	subi	r22, 0xFF	; 255
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	16 c0       	rjmp	.+44     	; 0x1bda <__floatsisf+0x6c>
    1bae:	88 23       	and	r24, r24
    1bb0:	11 f0       	breq	.+4      	; 0x1bb6 <__floatsisf+0x48>
    1bb2:	96 e9       	ldi	r25, 0x96	; 150
    1bb4:	11 c0       	rjmp	.+34     	; 0x1bd8 <__floatsisf+0x6a>
    1bb6:	77 23       	and	r23, r23
    1bb8:	21 f0       	breq	.+8      	; 0x1bc2 <__floatsisf+0x54>
    1bba:	9e e8       	ldi	r25, 0x8E	; 142
    1bbc:	87 2f       	mov	r24, r23
    1bbe:	76 2f       	mov	r23, r22
    1bc0:	05 c0       	rjmp	.+10     	; 0x1bcc <__floatsisf+0x5e>
    1bc2:	66 23       	and	r22, r22
    1bc4:	71 f0       	breq	.+28     	; 0x1be2 <__floatsisf+0x74>
    1bc6:	96 e8       	ldi	r25, 0x86	; 134
    1bc8:	86 2f       	mov	r24, r22
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	2a f0       	brmi	.+10     	; 0x1bda <__floatsisf+0x6c>
    1bd0:	9a 95       	dec	r25
    1bd2:	66 0f       	add	r22, r22
    1bd4:	77 1f       	adc	r23, r23
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	da f7       	brpl	.-10     	; 0x1bd0 <__floatsisf+0x62>
    1bda:	88 0f       	add	r24, r24
    1bdc:	96 95       	lsr	r25
    1bde:	87 95       	ror	r24
    1be0:	97 f9       	bld	r25, 7
    1be2:	08 95       	ret

00001be4 <__fp_inf>:
    1be4:	97 f9       	bld	r25, 7
    1be6:	9f 67       	ori	r25, 0x7F	; 127
    1be8:	80 e8       	ldi	r24, 0x80	; 128
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	08 95       	ret

00001bf0 <__fp_nan>:
    1bf0:	9f ef       	ldi	r25, 0xFF	; 255
    1bf2:	80 ec       	ldi	r24, 0xC0	; 192
    1bf4:	08 95       	ret

00001bf6 <__fp_pscA>:
    1bf6:	00 24       	eor	r0, r0
    1bf8:	0a 94       	dec	r0
    1bfa:	16 16       	cp	r1, r22
    1bfc:	17 06       	cpc	r1, r23
    1bfe:	18 06       	cpc	r1, r24
    1c00:	09 06       	cpc	r0, r25
    1c02:	08 95       	ret

00001c04 <__fp_pscB>:
    1c04:	00 24       	eor	r0, r0
    1c06:	0a 94       	dec	r0
    1c08:	12 16       	cp	r1, r18
    1c0a:	13 06       	cpc	r1, r19
    1c0c:	14 06       	cpc	r1, r20
    1c0e:	05 06       	cpc	r0, r21
    1c10:	08 95       	ret

00001c12 <__fp_round>:
    1c12:	09 2e       	mov	r0, r25
    1c14:	03 94       	inc	r0
    1c16:	00 0c       	add	r0, r0
    1c18:	11 f4       	brne	.+4      	; 0x1c1e <__fp_round+0xc>
    1c1a:	88 23       	and	r24, r24
    1c1c:	52 f0       	brmi	.+20     	; 0x1c32 <__fp_round+0x20>
    1c1e:	bb 0f       	add	r27, r27
    1c20:	40 f4       	brcc	.+16     	; 0x1c32 <__fp_round+0x20>
    1c22:	bf 2b       	or	r27, r31
    1c24:	11 f4       	brne	.+4      	; 0x1c2a <__fp_round+0x18>
    1c26:	60 ff       	sbrs	r22, 0
    1c28:	04 c0       	rjmp	.+8      	; 0x1c32 <__fp_round+0x20>
    1c2a:	6f 5f       	subi	r22, 0xFF	; 255
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	08 95       	ret

00001c34 <__fp_split3>:
    1c34:	57 fd       	sbrc	r21, 7
    1c36:	90 58       	subi	r25, 0x80	; 128
    1c38:	44 0f       	add	r20, r20
    1c3a:	55 1f       	adc	r21, r21
    1c3c:	59 f0       	breq	.+22     	; 0x1c54 <__fp_splitA+0x10>
    1c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c40:	71 f0       	breq	.+28     	; 0x1c5e <__fp_splitA+0x1a>
    1c42:	47 95       	ror	r20

00001c44 <__fp_splitA>:
    1c44:	88 0f       	add	r24, r24
    1c46:	97 fb       	bst	r25, 7
    1c48:	99 1f       	adc	r25, r25
    1c4a:	61 f0       	breq	.+24     	; 0x1c64 <__fp_splitA+0x20>
    1c4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c4e:	79 f0       	breq	.+30     	; 0x1c6e <__fp_splitA+0x2a>
    1c50:	87 95       	ror	r24
    1c52:	08 95       	ret
    1c54:	12 16       	cp	r1, r18
    1c56:	13 06       	cpc	r1, r19
    1c58:	14 06       	cpc	r1, r20
    1c5a:	55 1f       	adc	r21, r21
    1c5c:	f2 cf       	rjmp	.-28     	; 0x1c42 <__fp_split3+0xe>
    1c5e:	46 95       	lsr	r20
    1c60:	f1 df       	rcall	.-30     	; 0x1c44 <__fp_splitA>
    1c62:	08 c0       	rjmp	.+16     	; 0x1c74 <__fp_splitA+0x30>
    1c64:	16 16       	cp	r1, r22
    1c66:	17 06       	cpc	r1, r23
    1c68:	18 06       	cpc	r1, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	f1 cf       	rjmp	.-30     	; 0x1c50 <__fp_splitA+0xc>
    1c6e:	86 95       	lsr	r24
    1c70:	71 05       	cpc	r23, r1
    1c72:	61 05       	cpc	r22, r1
    1c74:	08 94       	sec
    1c76:	08 95       	ret

00001c78 <__fp_zero>:
    1c78:	e8 94       	clt

00001c7a <__fp_szero>:
    1c7a:	bb 27       	eor	r27, r27
    1c7c:	66 27       	eor	r22, r22
    1c7e:	77 27       	eor	r23, r23
    1c80:	cb 01       	movw	r24, r22
    1c82:	97 f9       	bld	r25, 7
    1c84:	08 95       	ret

00001c86 <__gesf2>:
    1c86:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fp_cmp>
    1c8a:	08 f4       	brcc	.+2      	; 0x1c8e <__gesf2+0x8>
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	08 95       	ret

00001c90 <__mulsf3>:
    1c90:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__mulsf3x>
    1c94:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__fp_round>
    1c98:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__fp_pscA>
    1c9c:	38 f0       	brcs	.+14     	; 0x1cac <__mulsf3+0x1c>
    1c9e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fp_pscB>
    1ca2:	20 f0       	brcs	.+8      	; 0x1cac <__mulsf3+0x1c>
    1ca4:	95 23       	and	r25, r21
    1ca6:	11 f0       	breq	.+4      	; 0x1cac <__mulsf3+0x1c>
    1ca8:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_inf>
    1cac:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_nan>
    1cb0:	11 24       	eor	r1, r1
    1cb2:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_szero>

00001cb6 <__mulsf3x>:
    1cb6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__fp_split3>
    1cba:	70 f3       	brcs	.-36     	; 0x1c98 <__mulsf3+0x8>

00001cbc <__mulsf3_pse>:
    1cbc:	95 9f       	mul	r25, r21
    1cbe:	c1 f3       	breq	.-16     	; 0x1cb0 <__mulsf3+0x20>
    1cc0:	95 0f       	add	r25, r21
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	55 1f       	adc	r21, r21
    1cc6:	62 9f       	mul	r22, r18
    1cc8:	f0 01       	movw	r30, r0
    1cca:	72 9f       	mul	r23, r18
    1ccc:	bb 27       	eor	r27, r27
    1cce:	f0 0d       	add	r31, r0
    1cd0:	b1 1d       	adc	r27, r1
    1cd2:	63 9f       	mul	r22, r19
    1cd4:	aa 27       	eor	r26, r26
    1cd6:	f0 0d       	add	r31, r0
    1cd8:	b1 1d       	adc	r27, r1
    1cda:	aa 1f       	adc	r26, r26
    1cdc:	64 9f       	mul	r22, r20
    1cde:	66 27       	eor	r22, r22
    1ce0:	b0 0d       	add	r27, r0
    1ce2:	a1 1d       	adc	r26, r1
    1ce4:	66 1f       	adc	r22, r22
    1ce6:	82 9f       	mul	r24, r18
    1ce8:	22 27       	eor	r18, r18
    1cea:	b0 0d       	add	r27, r0
    1cec:	a1 1d       	adc	r26, r1
    1cee:	62 1f       	adc	r22, r18
    1cf0:	73 9f       	mul	r23, r19
    1cf2:	b0 0d       	add	r27, r0
    1cf4:	a1 1d       	adc	r26, r1
    1cf6:	62 1f       	adc	r22, r18
    1cf8:	83 9f       	mul	r24, r19
    1cfa:	a0 0d       	add	r26, r0
    1cfc:	61 1d       	adc	r22, r1
    1cfe:	22 1f       	adc	r18, r18
    1d00:	74 9f       	mul	r23, r20
    1d02:	33 27       	eor	r19, r19
    1d04:	a0 0d       	add	r26, r0
    1d06:	61 1d       	adc	r22, r1
    1d08:	23 1f       	adc	r18, r19
    1d0a:	84 9f       	mul	r24, r20
    1d0c:	60 0d       	add	r22, r0
    1d0e:	21 1d       	adc	r18, r1
    1d10:	82 2f       	mov	r24, r18
    1d12:	76 2f       	mov	r23, r22
    1d14:	6a 2f       	mov	r22, r26
    1d16:	11 24       	eor	r1, r1
    1d18:	9f 57       	subi	r25, 0x7F	; 127
    1d1a:	50 40       	sbci	r21, 0x00	; 0
    1d1c:	9a f0       	brmi	.+38     	; 0x1d44 <__mulsf3_pse+0x88>
    1d1e:	f1 f0       	breq	.+60     	; 0x1d5c <__mulsf3_pse+0xa0>
    1d20:	88 23       	and	r24, r24
    1d22:	4a f0       	brmi	.+18     	; 0x1d36 <__mulsf3_pse+0x7a>
    1d24:	ee 0f       	add	r30, r30
    1d26:	ff 1f       	adc	r31, r31
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	66 1f       	adc	r22, r22
    1d2c:	77 1f       	adc	r23, r23
    1d2e:	88 1f       	adc	r24, r24
    1d30:	91 50       	subi	r25, 0x01	; 1
    1d32:	50 40       	sbci	r21, 0x00	; 0
    1d34:	a9 f7       	brne	.-22     	; 0x1d20 <__mulsf3_pse+0x64>
    1d36:	9e 3f       	cpi	r25, 0xFE	; 254
    1d38:	51 05       	cpc	r21, r1
    1d3a:	80 f0       	brcs	.+32     	; 0x1d5c <__mulsf3_pse+0xa0>
    1d3c:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_inf>
    1d40:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_szero>
    1d44:	5f 3f       	cpi	r21, 0xFF	; 255
    1d46:	e4 f3       	brlt	.-8      	; 0x1d40 <__mulsf3_pse+0x84>
    1d48:	98 3e       	cpi	r25, 0xE8	; 232
    1d4a:	d4 f3       	brlt	.-12     	; 0x1d40 <__mulsf3_pse+0x84>
    1d4c:	86 95       	lsr	r24
    1d4e:	77 95       	ror	r23
    1d50:	67 95       	ror	r22
    1d52:	b7 95       	ror	r27
    1d54:	f7 95       	ror	r31
    1d56:	e7 95       	ror	r30
    1d58:	9f 5f       	subi	r25, 0xFF	; 255
    1d5a:	c1 f7       	brne	.-16     	; 0x1d4c <__mulsf3_pse+0x90>
    1d5c:	fe 2b       	or	r31, r30
    1d5e:	88 0f       	add	r24, r24
    1d60:	91 1d       	adc	r25, r1
    1d62:	96 95       	lsr	r25
    1d64:	87 95       	ror	r24
    1d66:	97 f9       	bld	r25, 7
    1d68:	08 95       	ret

00001d6a <__fp_cmp>:
    1d6a:	99 0f       	add	r25, r25
    1d6c:	00 08       	sbc	r0, r0
    1d6e:	55 0f       	add	r21, r21
    1d70:	aa 0b       	sbc	r26, r26
    1d72:	e0 e8       	ldi	r30, 0x80	; 128
    1d74:	fe ef       	ldi	r31, 0xFE	; 254
    1d76:	16 16       	cp	r1, r22
    1d78:	17 06       	cpc	r1, r23
    1d7a:	e8 07       	cpc	r30, r24
    1d7c:	f9 07       	cpc	r31, r25
    1d7e:	c0 f0       	brcs	.+48     	; 0x1db0 <__fp_cmp+0x46>
    1d80:	12 16       	cp	r1, r18
    1d82:	13 06       	cpc	r1, r19
    1d84:	e4 07       	cpc	r30, r20
    1d86:	f5 07       	cpc	r31, r21
    1d88:	98 f0       	brcs	.+38     	; 0x1db0 <__fp_cmp+0x46>
    1d8a:	62 1b       	sub	r22, r18
    1d8c:	73 0b       	sbc	r23, r19
    1d8e:	84 0b       	sbc	r24, r20
    1d90:	95 0b       	sbc	r25, r21
    1d92:	39 f4       	brne	.+14     	; 0x1da2 <__fp_cmp+0x38>
    1d94:	0a 26       	eor	r0, r26
    1d96:	61 f0       	breq	.+24     	; 0x1db0 <__fp_cmp+0x46>
    1d98:	23 2b       	or	r18, r19
    1d9a:	24 2b       	or	r18, r20
    1d9c:	25 2b       	or	r18, r21
    1d9e:	21 f4       	brne	.+8      	; 0x1da8 <__fp_cmp+0x3e>
    1da0:	08 95       	ret
    1da2:	0a 26       	eor	r0, r26
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <__fp_cmp+0x3e>
    1da6:	a1 40       	sbci	r26, 0x01	; 1
    1da8:	a6 95       	lsr	r26
    1daa:	8f ef       	ldi	r24, 0xFF	; 255
    1dac:	81 1d       	adc	r24, r1
    1dae:	81 1d       	adc	r24, r1
    1db0:	08 95       	ret

00001db2 <putval>:
    1db2:	20 fd       	sbrc	r18, 0
    1db4:	09 c0       	rjmp	.+18     	; 0x1dc8 <putval+0x16>
    1db6:	fc 01       	movw	r30, r24
    1db8:	23 fd       	sbrc	r18, 3
    1dba:	05 c0       	rjmp	.+10     	; 0x1dc6 <putval+0x14>
    1dbc:	22 ff       	sbrs	r18, 2
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <putval+0x12>
    1dc0:	73 83       	std	Z+3, r23	; 0x03
    1dc2:	62 83       	std	Z+2, r22	; 0x02
    1dc4:	51 83       	std	Z+1, r21	; 0x01
    1dc6:	40 83       	st	Z, r20
    1dc8:	08 95       	ret

00001dca <mulacc>:
    1dca:	44 fd       	sbrc	r20, 4
    1dcc:	17 c0       	rjmp	.+46     	; 0x1dfc <mulacc+0x32>
    1dce:	46 fd       	sbrc	r20, 6
    1dd0:	17 c0       	rjmp	.+46     	; 0x1e00 <mulacc+0x36>
    1dd2:	ab 01       	movw	r20, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	da 01       	movw	r26, r20
    1dd8:	fb 01       	movw	r30, r22
    1dda:	aa 0f       	add	r26, r26
    1ddc:	bb 1f       	adc	r27, r27
    1dde:	ee 1f       	adc	r30, r30
    1de0:	ff 1f       	adc	r31, r31
    1de2:	10 94       	com	r1
    1de4:	d1 f7       	brne	.-12     	; 0x1dda <mulacc+0x10>
    1de6:	4a 0f       	add	r20, r26
    1de8:	5b 1f       	adc	r21, r27
    1dea:	6e 1f       	adc	r22, r30
    1dec:	7f 1f       	adc	r23, r31
    1dee:	cb 01       	movw	r24, r22
    1df0:	ba 01       	movw	r22, r20
    1df2:	66 0f       	add	r22, r22
    1df4:	77 1f       	adc	r23, r23
    1df6:	88 1f       	adc	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	09 c0       	rjmp	.+18     	; 0x1e0e <mulacc+0x44>
    1dfc:	33 e0       	ldi	r19, 0x03	; 3
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <mulacc+0x38>
    1e00:	34 e0       	ldi	r19, 0x04	; 4
    1e02:	66 0f       	add	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	31 50       	subi	r19, 0x01	; 1
    1e0c:	d1 f7       	brne	.-12     	; 0x1e02 <mulacc+0x38>
    1e0e:	62 0f       	add	r22, r18
    1e10:	71 1d       	adc	r23, r1
    1e12:	81 1d       	adc	r24, r1
    1e14:	91 1d       	adc	r25, r1
    1e16:	08 95       	ret

00001e18 <skip_spaces>:
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	8c 01       	movw	r16, r24
    1e22:	c8 01       	movw	r24, r16
    1e24:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    1e28:	ec 01       	movw	r28, r24
    1e2a:	97 fd       	sbrc	r25, 7
    1e2c:	08 c0       	rjmp	.+16     	; 0x1e3e <skip_spaces+0x26>
    1e2e:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <isspace>
    1e32:	89 2b       	or	r24, r25
    1e34:	b1 f7       	brne	.-20     	; 0x1e22 <skip_spaces+0xa>
    1e36:	b8 01       	movw	r22, r16
    1e38:	ce 01       	movw	r24, r28
    1e3a:	0e 94 de 19 	call	0x33bc	; 0x33bc <ungetc>
    1e3e:	ce 01       	movw	r24, r28
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <conv_int>:
    1e4a:	8f 92       	push	r8
    1e4c:	9f 92       	push	r9
    1e4e:	af 92       	push	r10
    1e50:	bf 92       	push	r11
    1e52:	cf 92       	push	r12
    1e54:	df 92       	push	r13
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	7c 01       	movw	r14, r24
    1e64:	8b 01       	movw	r16, r22
    1e66:	6a 01       	movw	r12, r20
    1e68:	d2 2f       	mov	r29, r18
    1e6a:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    1e6e:	9c 01       	movw	r18, r24
    1e70:	33 27       	eor	r19, r19
    1e72:	2b 32       	cpi	r18, 0x2B	; 43
    1e74:	31 05       	cpc	r19, r1
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <conv_int+0x36>
    1e78:	2d 32       	cpi	r18, 0x2D	; 45
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	59 f4       	brne	.+22     	; 0x1e94 <conv_int+0x4a>
    1e7e:	d0 68       	ori	r29, 0x80	; 128
    1e80:	01 50       	subi	r16, 0x01	; 1
    1e82:	11 09       	sbc	r17, r1
    1e84:	11 f4       	brne	.+4      	; 0x1e8a <conv_int+0x40>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	6b c0       	rjmp	.+214    	; 0x1f60 <conv_int+0x116>
    1e8a:	c7 01       	movw	r24, r14
    1e8c:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    1e90:	97 fd       	sbrc	r25, 7
    1e92:	f9 cf       	rjmp	.-14     	; 0x1e86 <conv_int+0x3c>
    1e94:	cd 2f       	mov	r28, r29
    1e96:	cd 7f       	andi	r28, 0xFD	; 253
    1e98:	2d 2f       	mov	r18, r29
    1e9a:	20 73       	andi	r18, 0x30	; 48
    1e9c:	19 f5       	brne	.+70     	; 0x1ee4 <conv_int+0x9a>
    1e9e:	80 33       	cpi	r24, 0x30	; 48
    1ea0:	09 f5       	brne	.+66     	; 0x1ee4 <conv_int+0x9a>
    1ea2:	58 01       	movw	r10, r16
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	a8 1a       	sub	r10, r24
    1ea8:	b1 08       	sbc	r11, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <conv_int+0x64>
    1eac:	45 c0       	rjmp	.+138    	; 0x1f38 <conv_int+0xee>
    1eae:	c7 01       	movw	r24, r14
    1eb0:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    1eb4:	97 fd       	sbrc	r25, 7
    1eb6:	40 c0       	rjmp	.+128    	; 0x1f38 <conv_int+0xee>
    1eb8:	9c 01       	movw	r18, r24
    1eba:	2f 7d       	andi	r18, 0xDF	; 223
    1ebc:	33 27       	eor	r19, r19
    1ebe:	28 35       	cpi	r18, 0x58	; 88
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	51 f4       	brne	.+20     	; 0x1ed8 <conv_int+0x8e>
    1ec4:	c2 64       	ori	r28, 0x42	; 66
    1ec6:	02 50       	subi	r16, 0x02	; 2
    1ec8:	11 09       	sbc	r17, r1
    1eca:	b1 f1       	breq	.+108    	; 0x1f38 <conv_int+0xee>
    1ecc:	c7 01       	movw	r24, r14
    1ece:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    1ed2:	97 ff       	sbrs	r25, 7
    1ed4:	07 c0       	rjmp	.+14     	; 0x1ee4 <conv_int+0x9a>
    1ed6:	30 c0       	rjmp	.+96     	; 0x1f38 <conv_int+0xee>
    1ed8:	d6 ff       	sbrs	r29, 6
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <conv_int+0x96>
    1edc:	c2 60       	ori	r28, 0x02	; 2
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <conv_int+0x98>
    1ee0:	c2 61       	ori	r28, 0x12	; 18
    1ee2:	85 01       	movw	r16, r10
    1ee4:	81 2c       	mov	r8, r1
    1ee6:	91 2c       	mov	r9, r1
    1ee8:	54 01       	movw	r10, r8
    1eea:	20 ed       	ldi	r18, 0xD0	; 208
    1eec:	28 0f       	add	r18, r24
    1eee:	28 30       	cpi	r18, 0x08	; 8
    1ef0:	80 f0       	brcs	.+32     	; 0x1f12 <conv_int+0xc8>
    1ef2:	c4 ff       	sbrs	r28, 4
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <conv_int+0xb4>
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	0e 94 de 19 	call	0x33bc	; 0x33bc <ungetc>
    1efc:	1a c0       	rjmp	.+52     	; 0x1f32 <conv_int+0xe8>
    1efe:	2a 30       	cpi	r18, 0x0A	; 10
    1f00:	40 f0       	brcs	.+16     	; 0x1f12 <conv_int+0xc8>
    1f02:	c6 ff       	sbrs	r28, 6
    1f04:	f8 cf       	rjmp	.-16     	; 0x1ef6 <conv_int+0xac>
    1f06:	2f 7d       	andi	r18, 0xDF	; 223
    1f08:	3f ee       	ldi	r19, 0xEF	; 239
    1f0a:	32 0f       	add	r19, r18
    1f0c:	36 30       	cpi	r19, 0x06	; 6
    1f0e:	98 f7       	brcc	.-26     	; 0x1ef6 <conv_int+0xac>
    1f10:	27 50       	subi	r18, 0x07	; 7
    1f12:	4c 2f       	mov	r20, r28
    1f14:	c5 01       	movw	r24, r10
    1f16:	b4 01       	movw	r22, r8
    1f18:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <mulacc>
    1f1c:	4b 01       	movw	r8, r22
    1f1e:	5c 01       	movw	r10, r24
    1f20:	c2 60       	ori	r28, 0x02	; 2
    1f22:	01 50       	subi	r16, 0x01	; 1
    1f24:	11 09       	sbc	r17, r1
    1f26:	59 f0       	breq	.+22     	; 0x1f3e <conv_int+0xf4>
    1f28:	c7 01       	movw	r24, r14
    1f2a:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    1f2e:	97 ff       	sbrs	r25, 7
    1f30:	dc cf       	rjmp	.-72     	; 0x1eea <conv_int+0xa0>
    1f32:	c1 fd       	sbrc	r28, 1
    1f34:	04 c0       	rjmp	.+8      	; 0x1f3e <conv_int+0xf4>
    1f36:	a7 cf       	rjmp	.-178    	; 0x1e86 <conv_int+0x3c>
    1f38:	81 2c       	mov	r8, r1
    1f3a:	91 2c       	mov	r9, r1
    1f3c:	54 01       	movw	r10, r8
    1f3e:	c7 ff       	sbrs	r28, 7
    1f40:	08 c0       	rjmp	.+16     	; 0x1f52 <conv_int+0x108>
    1f42:	b0 94       	com	r11
    1f44:	a0 94       	com	r10
    1f46:	90 94       	com	r9
    1f48:	80 94       	com	r8
    1f4a:	81 1c       	adc	r8, r1
    1f4c:	91 1c       	adc	r9, r1
    1f4e:	a1 1c       	adc	r10, r1
    1f50:	b1 1c       	adc	r11, r1
    1f52:	2c 2f       	mov	r18, r28
    1f54:	b5 01       	movw	r22, r10
    1f56:	a4 01       	movw	r20, r8
    1f58:	c6 01       	movw	r24, r12
    1f5a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <putval>
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	df 90       	pop	r13
    1f6e:	cf 90       	pop	r12
    1f70:	bf 90       	pop	r11
    1f72:	af 90       	pop	r10
    1f74:	9f 90       	pop	r9
    1f76:	8f 90       	pop	r8
    1f78:	08 95       	ret

00001f7a <conv_brk>:
    1f7a:	4f 92       	push	r4
    1f7c:	5f 92       	push	r5
    1f7e:	6f 92       	push	r6
    1f80:	7f 92       	push	r7
    1f82:	8f 92       	push	r8
    1f84:	9f 92       	push	r9
    1f86:	af 92       	push	r10
    1f88:	bf 92       	push	r11
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	a0 97       	sbiw	r28, 0x20	; 32
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	5c 01       	movw	r10, r24
    1fa6:	4b 01       	movw	r8, r22
    1fa8:	7a 01       	movw	r14, r20
    1faa:	8e 01       	movw	r16, r28
    1fac:	0f 5f       	subi	r16, 0xFF	; 255
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	68 01       	movw	r12, r16
    1fb2:	80 e2       	ldi	r24, 0x20	; 32
    1fb4:	f8 01       	movw	r30, r16
    1fb6:	11 92       	st	Z+, r1
    1fb8:	8a 95       	dec	r24
    1fba:	e9 f7       	brne	.-6      	; 0x1fb6 <conv_brk+0x3c>
    1fbc:	f5 01       	movw	r30, r10
    1fbe:	53 80       	ldd	r5, Z+3	; 0x03
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	61 2c       	mov	r6, r1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	71 2c       	mov	r7, r1
    1fca:	a1 e0       	ldi	r26, 0x01	; 1
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	f9 01       	movw	r30, r18
    1fd0:	53 fc       	sbrc	r5, 3
    1fd2:	85 91       	lpm	r24, Z+
    1fd4:	53 fe       	sbrs	r5, 3
    1fd6:	81 91       	ld	r24, Z+
    1fd8:	8f 01       	movw	r16, r30
    1fda:	48 2e       	mov	r4, r24
    1fdc:	9f 01       	movw	r18, r30
    1fde:	81 11       	cpse	r24, r1
    1fe0:	03 c0       	rjmp	.+6      	; 0x1fe8 <conv_brk+0x6e>
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	96 c0       	rjmp	.+300    	; 0x2114 <conv_brk+0x19a>
    1fe8:	8e 35       	cpi	r24, 0x5E	; 94
    1fea:	19 f4       	brne	.+6      	; 0x1ff2 <conv_brk+0x78>
    1fec:	41 15       	cp	r20, r1
    1fee:	51 05       	cpc	r21, r1
    1ff0:	51 f1       	breq	.+84     	; 0x2046 <conv_brk+0xcc>
    1ff2:	67 2d       	mov	r22, r7
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	64 17       	cp	r22, r20
    1ff8:	75 07       	cpc	r23, r21
    1ffa:	3c f4       	brge	.+14     	; 0x200a <conv_brk+0x90>
    1ffc:	8d 35       	cpi	r24, 0x5D	; 93
    1ffe:	61 f1       	breq	.+88     	; 0x2058 <conv_brk+0xde>
    2000:	8d 32       	cpi	r24, 0x2D	; 45
    2002:	19 f4       	brne	.+6      	; 0x200a <conv_brk+0x90>
    2004:	99 23       	and	r25, r25
    2006:	11 f1       	breq	.+68     	; 0x204c <conv_brk+0xd2>
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <conv_brk+0x96>
    200a:	99 23       	and	r25, r25
    200c:	09 f4       	brne	.+2      	; 0x2010 <conv_brk+0x96>
    200e:	6d c0       	rjmp	.+218    	; 0x20ea <conv_brk+0x170>
    2010:	84 2d       	mov	r24, r4
    2012:	86 95       	lsr	r24
    2014:	86 95       	lsr	r24
    2016:	86 95       	lsr	r24
    2018:	f6 01       	movw	r30, r12
    201a:	e8 0f       	add	r30, r24
    201c:	f1 1d       	adc	r31, r1
    201e:	84 2d       	mov	r24, r4
    2020:	87 70       	andi	r24, 0x07	; 7
    2022:	8d 01       	movw	r16, r26
    2024:	02 c0       	rjmp	.+4      	; 0x202a <conv_brk+0xb0>
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	8a 95       	dec	r24
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <conv_brk+0xac>
    202e:	c8 01       	movw	r24, r16
    2030:	90 81       	ld	r25, Z
    2032:	89 2b       	or	r24, r25
    2034:	80 83       	st	Z, r24
    2036:	64 14       	cp	r6, r4
    2038:	59 f0       	breq	.+22     	; 0x2050 <conv_brk+0xd6>
    203a:	46 14       	cp	r4, r6
    203c:	10 f4       	brcc	.+4      	; 0x2042 <conv_brk+0xc8>
    203e:	43 94       	inc	r4
    2040:	e7 cf       	rjmp	.-50     	; 0x2010 <conv_brk+0x96>
    2042:	4a 94       	dec	r4
    2044:	e5 cf       	rjmp	.-54     	; 0x2010 <conv_brk+0x96>
    2046:	77 24       	eor	r7, r7
    2048:	73 94       	inc	r7
    204a:	03 c0       	rjmp	.+6      	; 0x2052 <conv_brk+0xd8>
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	01 c0       	rjmp	.+2      	; 0x2052 <conv_brk+0xd8>
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	4f 5f       	subi	r20, 0xFF	; 255
    2054:	5f 4f       	sbci	r21, 0xFF	; 255
    2056:	bb cf       	rjmp	.-138    	; 0x1fce <conv_brk+0x54>
    2058:	99 23       	and	r25, r25
    205a:	19 f0       	breq	.+6      	; 0x2062 <conv_brk+0xe8>
    205c:	8e 81       	ldd	r24, Y+6	; 0x06
    205e:	80 62       	ori	r24, 0x20	; 32
    2060:	8e 83       	std	Y+6, r24	; 0x06
    2062:	71 10       	cpse	r7, r1
    2064:	03 c0       	rjmp	.+6      	; 0x206c <conv_brk+0xf2>
    2066:	77 24       	eor	r7, r7
    2068:	73 94       	inc	r7
    206a:	19 c0       	rjmp	.+50     	; 0x209e <conv_brk+0x124>
    206c:	f6 01       	movw	r30, r12
    206e:	9e 01       	movw	r18, r28
    2070:	2f 5d       	subi	r18, 0xDF	; 223
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	80 95       	com	r24
    2078:	81 93       	st	Z+, r24
    207a:	2e 17       	cp	r18, r30
    207c:	3f 07       	cpc	r19, r31
    207e:	d1 f7       	brne	.-12     	; 0x2074 <conv_brk+0xfa>
    2080:	f2 cf       	rjmp	.-28     	; 0x2066 <conv_brk+0xec>
    2082:	e1 14       	cp	r14, r1
    2084:	f1 04       	cpc	r15, r1
    2086:	31 f0       	breq	.+12     	; 0x2094 <conv_brk+0x11a>
    2088:	f7 01       	movw	r30, r14
    208a:	80 83       	st	Z, r24
    208c:	b7 01       	movw	r22, r14
    208e:	6f 5f       	subi	r22, 0xFF	; 255
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	7b 01       	movw	r14, r22
    2094:	71 e0       	ldi	r23, 0x01	; 1
    2096:	87 1a       	sub	r8, r23
    2098:	91 08       	sbc	r9, r1
    209a:	71 2c       	mov	r7, r1
    209c:	f9 f0       	breq	.+62     	; 0x20dc <conv_brk+0x162>
    209e:	c5 01       	movw	r24, r10
    20a0:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    20a4:	97 fd       	sbrc	r25, 7
    20a6:	18 c0       	rjmp	.+48     	; 0x20d8 <conv_brk+0x15e>
    20a8:	fc 01       	movw	r30, r24
    20aa:	ff 27       	eor	r31, r31
    20ac:	23 e0       	ldi	r18, 0x03	; 3
    20ae:	f5 95       	asr	r31
    20b0:	e7 95       	ror	r30
    20b2:	2a 95       	dec	r18
    20b4:	e1 f7       	brne	.-8      	; 0x20ae <conv_brk+0x134>
    20b6:	ec 0d       	add	r30, r12
    20b8:	fd 1d       	adc	r31, r13
    20ba:	20 81       	ld	r18, Z
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	ac 01       	movw	r20, r24
    20c0:	47 70       	andi	r20, 0x07	; 7
    20c2:	55 27       	eor	r21, r21
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <conv_brk+0x150>
    20c6:	35 95       	asr	r19
    20c8:	27 95       	ror	r18
    20ca:	4a 95       	dec	r20
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <conv_brk+0x14c>
    20ce:	20 fd       	sbrc	r18, 0
    20d0:	d8 cf       	rjmp	.-80     	; 0x2082 <conv_brk+0x108>
    20d2:	b5 01       	movw	r22, r10
    20d4:	0e 94 de 19 	call	0x33bc	; 0x33bc <ungetc>
    20d8:	71 10       	cpse	r7, r1
    20da:	83 cf       	rjmp	.-250    	; 0x1fe2 <conv_brk+0x68>
    20dc:	e1 14       	cp	r14, r1
    20de:	f1 04       	cpc	r15, r1
    20e0:	11 f0       	breq	.+4      	; 0x20e6 <conv_brk+0x16c>
    20e2:	f7 01       	movw	r30, r14
    20e4:	10 82       	st	Z, r1
    20e6:	c8 01       	movw	r24, r16
    20e8:	15 c0       	rjmp	.+42     	; 0x2114 <conv_brk+0x19a>
    20ea:	68 2f       	mov	r22, r24
    20ec:	66 95       	lsr	r22
    20ee:	66 95       	lsr	r22
    20f0:	66 95       	lsr	r22
    20f2:	f6 01       	movw	r30, r12
    20f4:	e6 0f       	add	r30, r22
    20f6:	f1 1d       	adc	r31, r1
    20f8:	68 2f       	mov	r22, r24
    20fa:	67 70       	andi	r22, 0x07	; 7
    20fc:	8d 01       	movw	r16, r26
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <conv_brk+0x18a>
    2100:	00 0f       	add	r16, r16
    2102:	11 1f       	adc	r17, r17
    2104:	6a 95       	dec	r22
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <conv_brk+0x186>
    2108:	b8 01       	movw	r22, r16
    210a:	70 81       	ld	r23, Z
    210c:	67 2b       	or	r22, r23
    210e:	60 83       	st	Z, r22
    2110:	68 2e       	mov	r6, r24
    2112:	9f cf       	rjmp	.-194    	; 0x2052 <conv_brk+0xd8>
    2114:	a0 96       	adiw	r28, 0x20	; 32
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	ef 90       	pop	r14
    2126:	df 90       	pop	r13
    2128:	cf 90       	pop	r12
    212a:	bf 90       	pop	r11
    212c:	af 90       	pop	r10
    212e:	9f 90       	pop	r9
    2130:	8f 90       	pop	r8
    2132:	7f 90       	pop	r7
    2134:	6f 90       	pop	r6
    2136:	5f 90       	pop	r5
    2138:	4f 90       	pop	r4
    213a:	08 95       	ret

0000213c <conv_flt>:
    213c:	2f 92       	push	r2
    213e:	3f 92       	push	r3
    2140:	4f 92       	push	r4
    2142:	5f 92       	push	r5
    2144:	6f 92       	push	r6
    2146:	7f 92       	push	r7
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	cf 92       	push	r12
    2150:	df 92       	push	r13
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	6c 01       	movw	r12, r24
    2160:	8b 01       	movw	r16, r22
    2162:	1a 01       	movw	r2, r20
    2164:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    2168:	ec 01       	movw	r28, r24
    216a:	99 27       	eor	r25, r25
    216c:	8b 32       	cpi	r24, 0x2B	; 43
    216e:	91 05       	cpc	r25, r1
    2170:	29 f0       	breq	.+10     	; 0x217c <conv_flt+0x40>
    2172:	8d 97       	sbiw	r24, 0x2d	; 45
    2174:	81 f4       	brne	.+32     	; 0x2196 <conv_flt+0x5a>
    2176:	30 e8       	ldi	r19, 0x80	; 128
    2178:	93 2e       	mov	r9, r19
    217a:	01 c0       	rjmp	.+2      	; 0x217e <conv_flt+0x42>
    217c:	91 2c       	mov	r9, r1
    217e:	01 50       	subi	r16, 0x01	; 1
    2180:	11 09       	sbc	r17, r1
    2182:	11 f4       	brne	.+4      	; 0x2188 <conv_flt+0x4c>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	0c c1       	rjmp	.+536    	; 0x23a0 <conv_flt+0x264>
    2188:	c6 01       	movw	r24, r12
    218a:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    218e:	ec 01       	movw	r28, r24
    2190:	97 ff       	sbrs	r25, 7
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <conv_flt+0x5c>
    2194:	f7 cf       	rjmp	.-18     	; 0x2184 <conv_flt+0x48>
    2196:	91 2c       	mov	r9, r1
    2198:	ce 01       	movw	r24, r28
    219a:	0e 94 02 19 	call	0x3204	; 0x3204 <tolower>
    219e:	89 36       	cpi	r24, 0x69	; 105
    21a0:	91 05       	cpc	r25, r1
    21a2:	31 f0       	breq	.+12     	; 0x21b0 <conv_flt+0x74>
    21a4:	8e 36       	cpi	r24, 0x6E	; 110
    21a6:	91 05       	cpc	r25, r1
    21a8:	99 f5       	brne	.+102    	; 0x2210 <conv_flt+0xd4>
    21aa:	c8 e1       	ldi	r28, 0x18	; 24
    21ac:	d2 e0       	ldi	r29, 0x02	; 2
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <conv_flt+0x78>
    21b0:	cb e1       	ldi	r28, 0x1B	; 27
    21b2:	d2 e0       	ldi	r29, 0x02	; 2
    21b4:	21 96       	adiw	r28, 0x01	; 1
    21b6:	fe 01       	movw	r30, r28
    21b8:	31 97       	sbiw	r30, 0x01	; 1
    21ba:	b4 90       	lpm	r11, Z
    21bc:	bb 20       	and	r11, r11
    21be:	c9 f0       	breq	.+50     	; 0x21f2 <conv_flt+0xb6>
    21c0:	01 50       	subi	r16, 0x01	; 1
    21c2:	11 09       	sbc	r17, r1
    21c4:	91 f0       	breq	.+36     	; 0x21ea <conv_flt+0xae>
    21c6:	c6 01       	movw	r24, r12
    21c8:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    21cc:	7c 01       	movw	r14, r24
    21ce:	97 fd       	sbrc	r25, 7
    21d0:	0c c0       	rjmp	.+24     	; 0x21ea <conv_flt+0xae>
    21d2:	0e 94 02 19 	call	0x3204	; 0x3204 <tolower>
    21d6:	99 27       	eor	r25, r25
    21d8:	eb 2d       	mov	r30, r11
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	8e 17       	cp	r24, r30
    21de:	9f 07       	cpc	r25, r31
    21e0:	49 f3       	breq	.-46     	; 0x21b4 <conv_flt+0x78>
    21e2:	b6 01       	movw	r22, r12
    21e4:	c7 01       	movw	r24, r14
    21e6:	0e 94 de 19 	call	0x33bc	; 0x33bc <ungetc>
    21ea:	ce 51       	subi	r28, 0x1E	; 30
    21ec:	d2 40       	sbci	r29, 0x02	; 2
    21ee:	51 f6       	brne	.-108    	; 0x2184 <conv_flt+0x48>
    21f0:	03 c0       	rjmp	.+6      	; 0x21f8 <conv_flt+0xbc>
    21f2:	cb 51       	subi	r28, 0x1B	; 27
    21f4:	d2 40       	sbci	r29, 0x02	; 2
    21f6:	29 f0       	breq	.+10     	; 0x2202 <conv_flt+0xc6>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 e8       	ldi	r26, 0x80	; 128
    21fe:	bf e7       	ldi	r27, 0x7F	; 127
    2200:	04 c0       	rjmp	.+8      	; 0x220a <conv_flt+0xce>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	a0 ec       	ldi	r26, 0xC0	; 192
    2208:	bf e7       	ldi	r27, 0x7F	; 127
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	b8 c0       	rjmp	.+368    	; 0x2380 <conv_flt+0x244>
    2210:	41 2c       	mov	r4, r1
    2212:	51 2c       	mov	r5, r1
    2214:	32 01       	movw	r6, r4
    2216:	e1 2c       	mov	r14, r1
    2218:	f1 2c       	mov	r15, r1
    221a:	2c 2f       	mov	r18, r28
    221c:	20 53       	subi	r18, 0x30	; 48
    221e:	2a 30       	cpi	r18, 0x0A	; 10
    2220:	10 f5       	brcc	.+68     	; 0x2266 <conv_flt+0x12a>
    2222:	e9 2d       	mov	r30, r9
    2224:	e2 60       	ori	r30, 0x02	; 2
    2226:	be 2e       	mov	r11, r30
    2228:	89 2d       	mov	r24, r9
    222a:	88 70       	andi	r24, 0x08	; 8
    222c:	92 fe       	sbrs	r9, 2
    222e:	06 c0       	rjmp	.+12     	; 0x223c <conv_flt+0x100>
    2230:	81 11       	cpse	r24, r1
    2232:	20 c0       	rjmp	.+64     	; 0x2274 <conv_flt+0x138>
    2234:	ff ef       	ldi	r31, 0xFF	; 255
    2236:	ef 1a       	sub	r14, r31
    2238:	ff 0a       	sbc	r15, r31
    223a:	1c c0       	rjmp	.+56     	; 0x2274 <conv_flt+0x138>
    223c:	88 23       	and	r24, r24
    223e:	19 f0       	breq	.+6      	; 0x2246 <conv_flt+0x10a>
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	e8 1a       	sub	r14, r24
    2244:	f1 08       	sbc	r15, r1
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	c3 01       	movw	r24, r6
    224a:	b2 01       	movw	r22, r4
    224c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <mulacc>
    2250:	2b 01       	movw	r4, r22
    2252:	3c 01       	movw	r6, r24
    2254:	68 39       	cpi	r22, 0x98	; 152
    2256:	79 49       	sbci	r23, 0x99	; 153
    2258:	89 49       	sbci	r24, 0x99	; 153
    225a:	99 41       	sbci	r25, 0x19	; 25
    225c:	58 f0       	brcs	.+22     	; 0x2274 <conv_flt+0x138>
    225e:	f9 2d       	mov	r31, r9
    2260:	f6 60       	ori	r31, 0x06	; 6
    2262:	bf 2e       	mov	r11, r31
    2264:	07 c0       	rjmp	.+14     	; 0x2274 <conv_flt+0x138>
    2266:	2e 3f       	cpi	r18, 0xFE	; 254
    2268:	89 f4       	brne	.+34     	; 0x228c <conv_flt+0x150>
    226a:	93 fc       	sbrc	r9, 3
    226c:	0f c0       	rjmp	.+30     	; 0x228c <conv_flt+0x150>
    226e:	29 2d       	mov	r18, r9
    2270:	28 60       	ori	r18, 0x08	; 8
    2272:	b2 2e       	mov	r11, r18
    2274:	01 50       	subi	r16, 0x01	; 1
    2276:	11 09       	sbc	r17, r1
    2278:	41 f0       	breq	.+16     	; 0x228a <conv_flt+0x14e>
    227a:	c6 01       	movw	r24, r12
    227c:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    2280:	ec 01       	movw	r28, r24
    2282:	9b 2c       	mov	r9, r11
    2284:	97 ff       	sbrs	r25, 7
    2286:	c9 cf       	rjmp	.-110    	; 0x221a <conv_flt+0xde>
    2288:	01 c0       	rjmp	.+2      	; 0x228c <conv_flt+0x150>
    228a:	9b 2c       	mov	r9, r11
    228c:	91 fe       	sbrs	r9, 1
    228e:	7a cf       	rjmp	.-268    	; 0x2184 <conv_flt+0x48>
    2290:	ce 01       	movw	r24, r28
    2292:	8f 7d       	andi	r24, 0xDF	; 223
    2294:	99 27       	eor	r25, r25
    2296:	85 34       	cpi	r24, 0x45	; 69
    2298:	91 05       	cpc	r25, r1
    229a:	09 f0       	breq	.+2      	; 0x229e <conv_flt+0x162>
    229c:	42 c0       	rjmp	.+132    	; 0x2322 <conv_flt+0x1e6>
    229e:	58 01       	movw	r10, r16
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	a8 1a       	sub	r10, r24
    22a4:	b1 08       	sbc	r11, r1
    22a6:	09 f4       	brne	.+2      	; 0x22aa <conv_flt+0x16e>
    22a8:	6d cf       	rjmp	.-294    	; 0x2184 <conv_flt+0x48>
    22aa:	c6 01       	movw	r24, r12
    22ac:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    22b0:	ec 01       	movw	r28, r24
    22b2:	97 fd       	sbrc	r25, 7
    22b4:	67 cf       	rjmp	.-306    	; 0x2184 <conv_flt+0x48>
    22b6:	99 27       	eor	r25, r25
    22b8:	8b 32       	cpi	r24, 0x2B	; 43
    22ba:	91 05       	cpc	r25, r1
    22bc:	29 f0       	breq	.+10     	; 0x22c8 <conv_flt+0x18c>
    22be:	8d 97       	sbiw	r24, 0x2d	; 45
    22c0:	69 f4       	brne	.+26     	; 0x22dc <conv_flt+0x1a0>
    22c2:	e9 2d       	mov	r30, r9
    22c4:	e0 61       	ori	r30, 0x10	; 16
    22c6:	9e 2e       	mov	r9, r30
    22c8:	58 01       	movw	r10, r16
    22ca:	f2 e0       	ldi	r31, 0x02	; 2
    22cc:	af 1a       	sub	r10, r31
    22ce:	b1 08       	sbc	r11, r1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <conv_flt+0x198>
    22d2:	58 cf       	rjmp	.-336    	; 0x2184 <conv_flt+0x48>
    22d4:	c6 01       	movw	r24, r12
    22d6:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    22da:	ec 01       	movw	r28, r24
    22dc:	ce 01       	movw	r24, r28
    22de:	c0 97       	sbiw	r24, 0x30	; 48
    22e0:	0a 97       	sbiw	r24, 0x0a	; 10
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <conv_flt+0x1aa>
    22e4:	4f cf       	rjmp	.-354    	; 0x2184 <conv_flt+0x48>
    22e6:	85 01       	movw	r16, r10
    22e8:	a1 2c       	mov	r10, r1
    22ea:	b1 2c       	mov	r11, r1
    22ec:	b5 01       	movw	r22, r10
    22ee:	bb 0c       	add	r11, r11
    22f0:	88 0b       	sbc	r24, r24
    22f2:	99 0b       	sbc	r25, r25
    22f4:	2c 2f       	mov	r18, r28
    22f6:	20 53       	subi	r18, 0x30	; 48
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <mulacc>
    22fe:	5b 01       	movw	r10, r22
    2300:	01 50       	subi	r16, 0x01	; 1
    2302:	11 09       	sbc	r17, r1
    2304:	39 f0       	breq	.+14     	; 0x2314 <conv_flt+0x1d8>
    2306:	c6 01       	movw	r24, r12
    2308:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    230c:	ec 01       	movw	r28, r24
    230e:	c0 97       	sbiw	r24, 0x30	; 48
    2310:	0a 97       	sbiw	r24, 0x0a	; 10
    2312:	60 f3       	brcs	.-40     	; 0x22ec <conv_flt+0x1b0>
    2314:	94 fe       	sbrs	r9, 4
    2316:	03 c0       	rjmp	.+6      	; 0x231e <conv_flt+0x1e2>
    2318:	b1 94       	neg	r11
    231a:	a1 94       	neg	r10
    231c:	b1 08       	sbc	r11, r1
    231e:	ea 0c       	add	r14, r10
    2320:	fb 1c       	adc	r15, r11
    2322:	01 2b       	or	r16, r17
    2324:	31 f0       	breq	.+12     	; 0x2332 <conv_flt+0x1f6>
    2326:	d7 fd       	sbrc	r29, 7
    2328:	04 c0       	rjmp	.+8      	; 0x2332 <conv_flt+0x1f6>
    232a:	b6 01       	movw	r22, r12
    232c:	ce 01       	movw	r24, r28
    232e:	0e 94 de 19 	call	0x33bc	; 0x33bc <ungetc>
    2332:	c3 01       	movw	r24, r6
    2334:	b2 01       	movw	r22, r4
    2336:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
    233a:	f7 fe       	sbrs	r15, 7
    233c:	06 c0       	rjmp	.+12     	; 0x234a <conv_flt+0x20e>
    233e:	f1 94       	neg	r15
    2340:	e1 94       	neg	r14
    2342:	f1 08       	sbc	r15, r1
    2344:	c7 e3       	ldi	r28, 0x37	; 55
    2346:	d2 e0       	ldi	r29, 0x02	; 2
    2348:	02 c0       	rjmp	.+4      	; 0x234e <conv_flt+0x212>
    234a:	cf e4       	ldi	r28, 0x4F	; 79
    234c:	d2 e0       	ldi	r29, 0x02	; 2
    234e:	6e 01       	movw	r12, r28
    2350:	28 e1       	ldi	r18, 0x18	; 24
    2352:	c2 1a       	sub	r12, r18
    2354:	d1 08       	sbc	r13, r1
    2356:	00 e2       	ldi	r16, 0x20	; 32
    2358:	10 e0       	ldi	r17, 0x00	; 0
    235a:	e0 16       	cp	r14, r16
    235c:	f1 06       	cpc	r15, r17
    235e:	50 f0       	brcs	.+20     	; 0x2374 <conv_flt+0x238>
    2360:	fe 01       	movw	r30, r28
    2362:	25 91       	lpm	r18, Z+
    2364:	35 91       	lpm	r19, Z+
    2366:	45 91       	lpm	r20, Z+
    2368:	54 91       	lpm	r21, Z
    236a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__mulsf3>
    236e:	e0 1a       	sub	r14, r16
    2370:	f1 0a       	sbc	r15, r17
    2372:	f3 cf       	rjmp	.-26     	; 0x235a <conv_flt+0x21e>
    2374:	24 97       	sbiw	r28, 0x04	; 4
    2376:	16 95       	lsr	r17
    2378:	07 95       	ror	r16
    237a:	cc 16       	cp	r12, r28
    237c:	dd 06       	cpc	r13, r29
    237e:	69 f7       	brne	.-38     	; 0x235a <conv_flt+0x21e>
    2380:	97 fe       	sbrs	r9, 7
    2382:	05 c0       	rjmp	.+10     	; 0x238e <conv_flt+0x252>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	b0 58       	subi	r27, 0x80	; 128
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	21 14       	cp	r2, r1
    2390:	31 04       	cpc	r3, r1
    2392:	29 f0       	breq	.+10     	; 0x239e <conv_flt+0x262>
    2394:	f1 01       	movw	r30, r2
    2396:	60 83       	st	Z, r22
    2398:	71 83       	std	Z+1, r23	; 0x01
    239a:	82 83       	std	Z+2, r24	; 0x02
    239c:	93 83       	std	Z+3, r25	; 0x03
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	cf 90       	pop	r12
    23b0:	bf 90       	pop	r11
    23b2:	af 90       	pop	r10
    23b4:	9f 90       	pop	r9
    23b6:	7f 90       	pop	r7
    23b8:	6f 90       	pop	r6
    23ba:	5f 90       	pop	r5
    23bc:	4f 90       	pop	r4
    23be:	3f 90       	pop	r3
    23c0:	2f 90       	pop	r2
    23c2:	08 95       	ret

000023c4 <vfscanf>:
    23c4:	6f 92       	push	r6
    23c6:	7f 92       	push	r7
    23c8:	8f 92       	push	r8
    23ca:	9f 92       	push	r9
    23cc:	af 92       	push	r10
    23ce:	bf 92       	push	r11
    23d0:	cf 92       	push	r12
    23d2:	df 92       	push	r13
    23d4:	ef 92       	push	r14
    23d6:	ff 92       	push	r15
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	5c 01       	movw	r10, r24
    23e2:	eb 01       	movw	r28, r22
    23e4:	4a 01       	movw	r8, r20
    23e6:	fc 01       	movw	r30, r24
    23e8:	16 82       	std	Z+6, r1	; 0x06
    23ea:	17 82       	std	Z+7, r1	; 0x07
    23ec:	61 2c       	mov	r6, r1
    23ee:	f5 01       	movw	r30, r10
    23f0:	03 81       	ldd	r16, Z+3	; 0x03
    23f2:	fe 01       	movw	r30, r28
    23f4:	03 fd       	sbrc	r16, 3
    23f6:	85 91       	lpm	r24, Z+
    23f8:	03 ff       	sbrs	r16, 3
    23fa:	81 91       	ld	r24, Z+
    23fc:	18 2f       	mov	r17, r24
    23fe:	ef 01       	movw	r28, r30
    2400:	88 23       	and	r24, r24
    2402:	09 f4       	brne	.+2      	; 0x2406 <vfscanf+0x42>
    2404:	0f c1       	rjmp	.+542    	; 0x2624 <vfscanf+0x260>
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <isspace>
    240c:	89 2b       	or	r24, r25
    240e:	21 f0       	breq	.+8      	; 0x2418 <vfscanf+0x54>
    2410:	c5 01       	movw	r24, r10
    2412:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <skip_spaces>
    2416:	eb cf       	rjmp	.-42     	; 0x23ee <vfscanf+0x2a>
    2418:	15 32       	cpi	r17, 0x25	; 37
    241a:	41 f4       	brne	.+16     	; 0x242c <vfscanf+0x68>
    241c:	fe 01       	movw	r30, r28
    241e:	03 fd       	sbrc	r16, 3
    2420:	15 91       	lpm	r17, Z+
    2422:	03 ff       	sbrs	r16, 3
    2424:	11 91       	ld	r17, Z+
    2426:	ef 01       	movw	r28, r30
    2428:	15 32       	cpi	r17, 0x25	; 37
    242a:	81 f4       	brne	.+32     	; 0x244c <vfscanf+0x88>
    242c:	c5 01       	movw	r24, r10
    242e:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    2432:	97 fd       	sbrc	r25, 7
    2434:	f5 c0       	rjmp	.+490    	; 0x2620 <vfscanf+0x25c>
    2436:	41 2f       	mov	r20, r17
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	9c 01       	movw	r18, r24
    243c:	33 27       	eor	r19, r19
    243e:	24 17       	cp	r18, r20
    2440:	35 07       	cpc	r19, r21
    2442:	a9 f2       	breq	.-86     	; 0x23ee <vfscanf+0x2a>
    2444:	b5 01       	movw	r22, r10
    2446:	0e 94 de 19 	call	0x33bc	; 0x33bc <ungetc>
    244a:	ec c0       	rjmp	.+472    	; 0x2624 <vfscanf+0x260>
    244c:	1a 32       	cpi	r17, 0x2A	; 42
    244e:	41 f4       	brne	.+16     	; 0x2460 <vfscanf+0x9c>
    2450:	03 fd       	sbrc	r16, 3
    2452:	15 91       	lpm	r17, Z+
    2454:	03 ff       	sbrs	r16, 3
    2456:	11 91       	ld	r17, Z+
    2458:	ef 01       	movw	r28, r30
    245a:	77 24       	eor	r7, r7
    245c:	73 94       	inc	r7
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <vfscanf+0x9e>
    2460:	71 2c       	mov	r7, r1
    2462:	e1 2c       	mov	r14, r1
    2464:	f1 2c       	mov	r15, r1
    2466:	20 ed       	ldi	r18, 0xD0	; 208
    2468:	21 0f       	add	r18, r17
    246a:	2a 30       	cpi	r18, 0x0A	; 10
    246c:	88 f4       	brcc	.+34     	; 0x2490 <vfscanf+0xcc>
    246e:	f7 2d       	mov	r31, r7
    2470:	f2 60       	ori	r31, 0x02	; 2
    2472:	7f 2e       	mov	r7, r31
    2474:	b7 01       	movw	r22, r14
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	40 e2       	ldi	r20, 0x20	; 32
    247c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <mulacc>
    2480:	7b 01       	movw	r14, r22
    2482:	fe 01       	movw	r30, r28
    2484:	03 fd       	sbrc	r16, 3
    2486:	15 91       	lpm	r17, Z+
    2488:	03 ff       	sbrs	r16, 3
    248a:	11 91       	ld	r17, Z+
    248c:	ef 01       	movw	r28, r30
    248e:	eb cf       	rjmp	.-42     	; 0x2466 <vfscanf+0xa2>
    2490:	71 fe       	sbrs	r7, 1
    2492:	04 c0       	rjmp	.+8      	; 0x249c <vfscanf+0xd8>
    2494:	e1 14       	cp	r14, r1
    2496:	f1 04       	cpc	r15, r1
    2498:	21 f4       	brne	.+8      	; 0x24a2 <vfscanf+0xde>
    249a:	c4 c0       	rjmp	.+392    	; 0x2624 <vfscanf+0x260>
    249c:	ee 24       	eor	r14, r14
    249e:	ea 94       	dec	r14
    24a0:	fe 2c       	mov	r15, r14
    24a2:	18 36       	cpi	r17, 0x68	; 104
    24a4:	19 f0       	breq	.+6      	; 0x24ac <vfscanf+0xe8>
    24a6:	1c 36       	cpi	r17, 0x6C	; 108
    24a8:	61 f0       	breq	.+24     	; 0x24c2 <vfscanf+0xfe>
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <vfscanf+0x110>
    24ac:	fe 01       	movw	r30, r28
    24ae:	03 fd       	sbrc	r16, 3
    24b0:	15 91       	lpm	r17, Z+
    24b2:	03 ff       	sbrs	r16, 3
    24b4:	11 91       	ld	r17, Z+
    24b6:	ef 01       	movw	r28, r30
    24b8:	18 36       	cpi	r17, 0x68	; 104
    24ba:	61 f4       	brne	.+24     	; 0x24d4 <vfscanf+0x110>
    24bc:	87 2d       	mov	r24, r7
    24be:	88 60       	ori	r24, 0x08	; 8
    24c0:	78 2e       	mov	r7, r24
    24c2:	97 2d       	mov	r25, r7
    24c4:	94 60       	ori	r25, 0x04	; 4
    24c6:	79 2e       	mov	r7, r25
    24c8:	fe 01       	movw	r30, r28
    24ca:	03 fd       	sbrc	r16, 3
    24cc:	15 91       	lpm	r17, Z+
    24ce:	03 ff       	sbrs	r16, 3
    24d0:	11 91       	ld	r17, Z+
    24d2:	ef 01       	movw	r28, r30
    24d4:	11 23       	and	r17, r17
    24d6:	09 f4       	brne	.+2      	; 0x24da <vfscanf+0x116>
    24d8:	a5 c0       	rjmp	.+330    	; 0x2624 <vfscanf+0x260>
    24da:	61 2f       	mov	r22, r17
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	86 e0       	ldi	r24, 0x06	; 6
    24e0:	92 e0       	ldi	r25, 0x02	; 2
    24e2:	0e 94 0a 19 	call	0x3214	; 0x3214 <strchr_P>
    24e6:	89 2b       	or	r24, r25
    24e8:	09 f4       	brne	.+2      	; 0x24ec <vfscanf+0x128>
    24ea:	9c c0       	rjmp	.+312    	; 0x2624 <vfscanf+0x260>
    24ec:	70 fc       	sbrc	r7, 0
    24ee:	07 c0       	rjmp	.+14     	; 0x24fe <vfscanf+0x13a>
    24f0:	f4 01       	movw	r30, r8
    24f2:	c0 80       	ld	r12, Z
    24f4:	d1 80       	ldd	r13, Z+1	; 0x01
    24f6:	c4 01       	movw	r24, r8
    24f8:	02 96       	adiw	r24, 0x02	; 2
    24fa:	4c 01       	movw	r8, r24
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <vfscanf+0x13e>
    24fe:	c1 2c       	mov	r12, r1
    2500:	d1 2c       	mov	r13, r1
    2502:	1e 36       	cpi	r17, 0x6E	; 110
    2504:	51 f4       	brne	.+20     	; 0x251a <vfscanf+0x156>
    2506:	f5 01       	movw	r30, r10
    2508:	46 81       	ldd	r20, Z+6	; 0x06
    250a:	57 81       	ldd	r21, Z+7	; 0x07
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	27 2d       	mov	r18, r7
    2512:	c6 01       	movw	r24, r12
    2514:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <putval>
    2518:	6a cf       	rjmp	.-300    	; 0x23ee <vfscanf+0x2a>
    251a:	13 36       	cpi	r17, 0x63	; 99
    251c:	b9 f4       	brne	.+46     	; 0x254c <vfscanf+0x188>
    251e:	71 fc       	sbrc	r7, 1
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <vfscanf+0x164>
    2522:	ee 24       	eor	r14, r14
    2524:	e3 94       	inc	r14
    2526:	f1 2c       	mov	r15, r1
    2528:	c5 01       	movw	r24, r10
    252a:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    252e:	97 fd       	sbrc	r25, 7
    2530:	77 c0       	rjmp	.+238    	; 0x2620 <vfscanf+0x25c>
    2532:	c1 14       	cp	r12, r1
    2534:	d1 04       	cpc	r13, r1
    2536:	29 f0       	breq	.+10     	; 0x2542 <vfscanf+0x17e>
    2538:	f6 01       	movw	r30, r12
    253a:	80 83       	st	Z, r24
    253c:	c6 01       	movw	r24, r12
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	6c 01       	movw	r12, r24
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	e9 1a       	sub	r14, r25
    2546:	f1 08       	sbc	r15, r1
    2548:	79 f7       	brne	.-34     	; 0x2528 <vfscanf+0x164>
    254a:	66 c0       	rjmp	.+204    	; 0x2618 <vfscanf+0x254>
    254c:	1b 35       	cpi	r17, 0x5B	; 91
    254e:	59 f4       	brne	.+22     	; 0x2566 <vfscanf+0x1a2>
    2550:	9e 01       	movw	r18, r28
    2552:	a6 01       	movw	r20, r12
    2554:	b7 01       	movw	r22, r14
    2556:	c5 01       	movw	r24, r10
    2558:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <conv_brk>
    255c:	ec 01       	movw	r28, r24
    255e:	89 2b       	or	r24, r25
    2560:	09 f0       	breq	.+2      	; 0x2564 <vfscanf+0x1a0>
    2562:	5a c0       	rjmp	.+180    	; 0x2618 <vfscanf+0x254>
    2564:	54 c0       	rjmp	.+168    	; 0x260e <vfscanf+0x24a>
    2566:	c5 01       	movw	r24, r10
    2568:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <skip_spaces>
    256c:	97 fd       	sbrc	r25, 7
    256e:	58 c0       	rjmp	.+176    	; 0x2620 <vfscanf+0x25c>
    2570:	1f 36       	cpi	r17, 0x6F	; 111
    2572:	e1 f1       	breq	.+120    	; 0x25ec <vfscanf+0x228>
    2574:	40 f4       	brcc	.+16     	; 0x2586 <vfscanf+0x1c2>
    2576:	14 36       	cpi	r17, 0x64	; 100
    2578:	a9 f1       	breq	.+106    	; 0x25e4 <vfscanf+0x220>
    257a:	19 36       	cpi	r17, 0x69	; 105
    257c:	d1 f1       	breq	.+116    	; 0x25f2 <vfscanf+0x22e>
    257e:	18 35       	cpi	r17, 0x58	; 88
    2580:	09 f0       	breq	.+2      	; 0x2584 <vfscanf+0x1c0>
    2582:	3e c0       	rjmp	.+124    	; 0x2600 <vfscanf+0x23c>
    2584:	2b c0       	rjmp	.+86     	; 0x25dc <vfscanf+0x218>
    2586:	13 37       	cpi	r17, 0x73	; 115
    2588:	a9 f0       	breq	.+42     	; 0x25b4 <vfscanf+0x1f0>
    258a:	18 f4       	brcc	.+6      	; 0x2592 <vfscanf+0x1ce>
    258c:	10 37       	cpi	r17, 0x70	; 112
    258e:	31 f1       	breq	.+76     	; 0x25dc <vfscanf+0x218>
    2590:	37 c0       	rjmp	.+110    	; 0x2600 <vfscanf+0x23c>
    2592:	15 37       	cpi	r17, 0x75	; 117
    2594:	39 f1       	breq	.+78     	; 0x25e4 <vfscanf+0x220>
    2596:	18 37       	cpi	r17, 0x78	; 120
    2598:	09 f1       	breq	.+66     	; 0x25dc <vfscanf+0x218>
    259a:	32 c0       	rjmp	.+100    	; 0x2600 <vfscanf+0x23c>
    259c:	c1 14       	cp	r12, r1
    259e:	d1 04       	cpc	r13, r1
    25a0:	29 f0       	breq	.+10     	; 0x25ac <vfscanf+0x1e8>
    25a2:	f6 01       	movw	r30, r12
    25a4:	00 83       	st	Z, r16
    25a6:	c6 01       	movw	r24, r12
    25a8:	01 96       	adiw	r24, 0x01	; 1
    25aa:	6c 01       	movw	r12, r24
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	e9 1a       	sub	r14, r25
    25b0:	f1 08       	sbc	r15, r1
    25b2:	71 f0       	breq	.+28     	; 0x25d0 <vfscanf+0x20c>
    25b4:	c5 01       	movw	r24, r10
    25b6:	0e 94 3b 19 	call	0x3276	; 0x3276 <fgetc>
    25ba:	8c 01       	movw	r16, r24
    25bc:	97 fd       	sbrc	r25, 7
    25be:	08 c0       	rjmp	.+16     	; 0x25d0 <vfscanf+0x20c>
    25c0:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <isspace>
    25c4:	89 2b       	or	r24, r25
    25c6:	51 f3       	breq	.-44     	; 0x259c <vfscanf+0x1d8>
    25c8:	b5 01       	movw	r22, r10
    25ca:	c8 01       	movw	r24, r16
    25cc:	0e 94 de 19 	call	0x33bc	; 0x33bc <ungetc>
    25d0:	c1 14       	cp	r12, r1
    25d2:	d1 04       	cpc	r13, r1
    25d4:	09 f1       	breq	.+66     	; 0x2618 <vfscanf+0x254>
    25d6:	f6 01       	movw	r30, r12
    25d8:	10 82       	st	Z, r1
    25da:	1e c0       	rjmp	.+60     	; 0x2618 <vfscanf+0x254>
    25dc:	f7 2d       	mov	r31, r7
    25de:	f0 64       	ori	r31, 0x40	; 64
    25e0:	7f 2e       	mov	r7, r31
    25e2:	07 c0       	rjmp	.+14     	; 0x25f2 <vfscanf+0x22e>
    25e4:	87 2d       	mov	r24, r7
    25e6:	80 62       	ori	r24, 0x20	; 32
    25e8:	78 2e       	mov	r7, r24
    25ea:	03 c0       	rjmp	.+6      	; 0x25f2 <vfscanf+0x22e>
    25ec:	97 2d       	mov	r25, r7
    25ee:	90 61       	ori	r25, 0x10	; 16
    25f0:	79 2e       	mov	r7, r25
    25f2:	27 2d       	mov	r18, r7
    25f4:	a6 01       	movw	r20, r12
    25f6:	b7 01       	movw	r22, r14
    25f8:	c5 01       	movw	r24, r10
    25fa:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <conv_int>
    25fe:	05 c0       	rjmp	.+10     	; 0x260a <vfscanf+0x246>
    2600:	a6 01       	movw	r20, r12
    2602:	b7 01       	movw	r22, r14
    2604:	c5 01       	movw	r24, r10
    2606:	0e 94 9e 10 	call	0x213c	; 0x213c <conv_flt>
    260a:	81 11       	cpse	r24, r1
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <vfscanf+0x254>
    260e:	f5 01       	movw	r30, r10
    2610:	83 81       	ldd	r24, Z+3	; 0x03
    2612:	80 73       	andi	r24, 0x30	; 48
    2614:	29 f4       	brne	.+10     	; 0x2620 <vfscanf+0x25c>
    2616:	06 c0       	rjmp	.+12     	; 0x2624 <vfscanf+0x260>
    2618:	70 fc       	sbrc	r7, 0
    261a:	e9 ce       	rjmp	.-558    	; 0x23ee <vfscanf+0x2a>
    261c:	63 94       	inc	r6
    261e:	e7 ce       	rjmp	.-562    	; 0x23ee <vfscanf+0x2a>
    2620:	66 20       	and	r6, r6
    2622:	19 f0       	breq	.+6      	; 0x262a <vfscanf+0x266>
    2624:	86 2d       	mov	r24, r6
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	02 c0       	rjmp	.+4      	; 0x262e <vfscanf+0x26a>
    262a:	8f ef       	ldi	r24, 0xFF	; 255
    262c:	9f ef       	ldi	r25, 0xFF	; 255
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	df 90       	pop	r13
    263c:	cf 90       	pop	r12
    263e:	bf 90       	pop	r11
    2640:	af 90       	pop	r10
    2642:	9f 90       	pop	r9
    2644:	8f 90       	pop	r8
    2646:	7f 90       	pop	r7
    2648:	6f 90       	pop	r6
    264a:	08 95       	ret

0000264c <vfprintf>:
    264c:	2f 92       	push	r2
    264e:	3f 92       	push	r3
    2650:	4f 92       	push	r4
    2652:	5f 92       	push	r5
    2654:	6f 92       	push	r6
    2656:	7f 92       	push	r7
    2658:	8f 92       	push	r8
    265a:	9f 92       	push	r9
    265c:	af 92       	push	r10
    265e:	bf 92       	push	r11
    2660:	cf 92       	push	r12
    2662:	df 92       	push	r13
    2664:	ef 92       	push	r14
    2666:	ff 92       	push	r15
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	60 97       	sbiw	r28, 0x10	; 16
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	7c 01       	movw	r14, r24
    267c:	1b 01       	movw	r2, r22
    267e:	6a 01       	movw	r12, r20
    2680:	fc 01       	movw	r30, r24
    2682:	16 82       	std	Z+6, r1	; 0x06
    2684:	17 82       	std	Z+7, r1	; 0x07
    2686:	83 81       	ldd	r24, Z+3	; 0x03
    2688:	81 ff       	sbrs	r24, 1
    268a:	44 c3       	rjmp	.+1672   	; 0x2d14 <vfprintf+0x6c8>
    268c:	9e 01       	movw	r18, r28
    268e:	2f 5f       	subi	r18, 0xFF	; 255
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	39 01       	movw	r6, r18
    2694:	f7 01       	movw	r30, r14
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	f1 01       	movw	r30, r2
    269a:	93 fd       	sbrc	r25, 3
    269c:	85 91       	lpm	r24, Z+
    269e:	93 ff       	sbrs	r25, 3
    26a0:	81 91       	ld	r24, Z+
    26a2:	1f 01       	movw	r2, r30
    26a4:	88 23       	and	r24, r24
    26a6:	09 f4       	brne	.+2      	; 0x26aa <vfprintf+0x5e>
    26a8:	31 c3       	rjmp	.+1634   	; 0x2d0c <vfprintf+0x6c0>
    26aa:	85 32       	cpi	r24, 0x25	; 37
    26ac:	39 f4       	brne	.+14     	; 0x26bc <vfprintf+0x70>
    26ae:	93 fd       	sbrc	r25, 3
    26b0:	85 91       	lpm	r24, Z+
    26b2:	93 ff       	sbrs	r25, 3
    26b4:	81 91       	ld	r24, Z+
    26b6:	1f 01       	movw	r2, r30
    26b8:	85 32       	cpi	r24, 0x25	; 37
    26ba:	39 f4       	brne	.+14     	; 0x26ca <vfprintf+0x7e>
    26bc:	b7 01       	movw	r22, r14
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    26c4:	56 01       	movw	r10, r12
    26c6:	65 01       	movw	r12, r10
    26c8:	e5 cf       	rjmp	.-54     	; 0x2694 <vfprintf+0x48>
    26ca:	10 e0       	ldi	r17, 0x00	; 0
    26cc:	51 2c       	mov	r5, r1
    26ce:	91 2c       	mov	r9, r1
    26d0:	ff e1       	ldi	r31, 0x1F	; 31
    26d2:	f9 15       	cp	r31, r9
    26d4:	d8 f0       	brcs	.+54     	; 0x270c <vfprintf+0xc0>
    26d6:	8b 32       	cpi	r24, 0x2B	; 43
    26d8:	79 f0       	breq	.+30     	; 0x26f8 <vfprintf+0xac>
    26da:	38 f4       	brcc	.+14     	; 0x26ea <vfprintf+0x9e>
    26dc:	80 32       	cpi	r24, 0x20	; 32
    26de:	79 f0       	breq	.+30     	; 0x26fe <vfprintf+0xb2>
    26e0:	83 32       	cpi	r24, 0x23	; 35
    26e2:	a1 f4       	brne	.+40     	; 0x270c <vfprintf+0xc0>
    26e4:	f9 2d       	mov	r31, r9
    26e6:	f0 61       	ori	r31, 0x10	; 16
    26e8:	2e c0       	rjmp	.+92     	; 0x2746 <vfprintf+0xfa>
    26ea:	8d 32       	cpi	r24, 0x2D	; 45
    26ec:	61 f0       	breq	.+24     	; 0x2706 <vfprintf+0xba>
    26ee:	80 33       	cpi	r24, 0x30	; 48
    26f0:	69 f4       	brne	.+26     	; 0x270c <vfprintf+0xc0>
    26f2:	29 2d       	mov	r18, r9
    26f4:	21 60       	ori	r18, 0x01	; 1
    26f6:	2d c0       	rjmp	.+90     	; 0x2752 <vfprintf+0x106>
    26f8:	39 2d       	mov	r19, r9
    26fa:	32 60       	ori	r19, 0x02	; 2
    26fc:	93 2e       	mov	r9, r19
    26fe:	89 2d       	mov	r24, r9
    2700:	84 60       	ori	r24, 0x04	; 4
    2702:	98 2e       	mov	r9, r24
    2704:	2a c0       	rjmp	.+84     	; 0x275a <vfprintf+0x10e>
    2706:	e9 2d       	mov	r30, r9
    2708:	e8 60       	ori	r30, 0x08	; 8
    270a:	15 c0       	rjmp	.+42     	; 0x2736 <vfprintf+0xea>
    270c:	97 fc       	sbrc	r9, 7
    270e:	2d c0       	rjmp	.+90     	; 0x276a <vfprintf+0x11e>
    2710:	20 ed       	ldi	r18, 0xD0	; 208
    2712:	28 0f       	add	r18, r24
    2714:	2a 30       	cpi	r18, 0x0A	; 10
    2716:	88 f4       	brcc	.+34     	; 0x273a <vfprintf+0xee>
    2718:	96 fe       	sbrs	r9, 6
    271a:	06 c0       	rjmp	.+12     	; 0x2728 <vfprintf+0xdc>
    271c:	3a e0       	ldi	r19, 0x0A	; 10
    271e:	13 9f       	mul	r17, r19
    2720:	20 0d       	add	r18, r0
    2722:	11 24       	eor	r1, r1
    2724:	12 2f       	mov	r17, r18
    2726:	19 c0       	rjmp	.+50     	; 0x275a <vfprintf+0x10e>
    2728:	8a e0       	ldi	r24, 0x0A	; 10
    272a:	58 9e       	mul	r5, r24
    272c:	20 0d       	add	r18, r0
    272e:	11 24       	eor	r1, r1
    2730:	52 2e       	mov	r5, r18
    2732:	e9 2d       	mov	r30, r9
    2734:	e0 62       	ori	r30, 0x20	; 32
    2736:	9e 2e       	mov	r9, r30
    2738:	10 c0       	rjmp	.+32     	; 0x275a <vfprintf+0x10e>
    273a:	8e 32       	cpi	r24, 0x2E	; 46
    273c:	31 f4       	brne	.+12     	; 0x274a <vfprintf+0xfe>
    273e:	96 fc       	sbrc	r9, 6
    2740:	e5 c2       	rjmp	.+1482   	; 0x2d0c <vfprintf+0x6c0>
    2742:	f9 2d       	mov	r31, r9
    2744:	f0 64       	ori	r31, 0x40	; 64
    2746:	9f 2e       	mov	r9, r31
    2748:	08 c0       	rjmp	.+16     	; 0x275a <vfprintf+0x10e>
    274a:	8c 36       	cpi	r24, 0x6C	; 108
    274c:	21 f4       	brne	.+8      	; 0x2756 <vfprintf+0x10a>
    274e:	29 2d       	mov	r18, r9
    2750:	20 68       	ori	r18, 0x80	; 128
    2752:	92 2e       	mov	r9, r18
    2754:	02 c0       	rjmp	.+4      	; 0x275a <vfprintf+0x10e>
    2756:	88 36       	cpi	r24, 0x68	; 104
    2758:	41 f4       	brne	.+16     	; 0x276a <vfprintf+0x11e>
    275a:	f1 01       	movw	r30, r2
    275c:	93 fd       	sbrc	r25, 3
    275e:	85 91       	lpm	r24, Z+
    2760:	93 ff       	sbrs	r25, 3
    2762:	81 91       	ld	r24, Z+
    2764:	1f 01       	movw	r2, r30
    2766:	81 11       	cpse	r24, r1
    2768:	b3 cf       	rjmp	.-154    	; 0x26d0 <vfprintf+0x84>
    276a:	9b eb       	ldi	r25, 0xBB	; 187
    276c:	98 0f       	add	r25, r24
    276e:	93 30       	cpi	r25, 0x03	; 3
    2770:	20 f4       	brcc	.+8      	; 0x277a <vfprintf+0x12e>
    2772:	99 2d       	mov	r25, r9
    2774:	90 61       	ori	r25, 0x10	; 16
    2776:	80 5e       	subi	r24, 0xE0	; 224
    2778:	07 c0       	rjmp	.+14     	; 0x2788 <vfprintf+0x13c>
    277a:	9b e9       	ldi	r25, 0x9B	; 155
    277c:	98 0f       	add	r25, r24
    277e:	93 30       	cpi	r25, 0x03	; 3
    2780:	08 f0       	brcs	.+2      	; 0x2784 <vfprintf+0x138>
    2782:	66 c1       	rjmp	.+716    	; 0x2a50 <vfprintf+0x404>
    2784:	99 2d       	mov	r25, r9
    2786:	9f 7e       	andi	r25, 0xEF	; 239
    2788:	96 ff       	sbrs	r25, 6
    278a:	16 e0       	ldi	r17, 0x06	; 6
    278c:	9f 73       	andi	r25, 0x3F	; 63
    278e:	99 2e       	mov	r9, r25
    2790:	85 36       	cpi	r24, 0x65	; 101
    2792:	19 f4       	brne	.+6      	; 0x279a <vfprintf+0x14e>
    2794:	90 64       	ori	r25, 0x40	; 64
    2796:	99 2e       	mov	r9, r25
    2798:	08 c0       	rjmp	.+16     	; 0x27aa <vfprintf+0x15e>
    279a:	86 36       	cpi	r24, 0x66	; 102
    279c:	21 f4       	brne	.+8      	; 0x27a6 <vfprintf+0x15a>
    279e:	39 2f       	mov	r19, r25
    27a0:	30 68       	ori	r19, 0x80	; 128
    27a2:	93 2e       	mov	r9, r19
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <vfprintf+0x15e>
    27a6:	11 11       	cpse	r17, r1
    27a8:	11 50       	subi	r17, 0x01	; 1
    27aa:	97 fe       	sbrs	r9, 7
    27ac:	07 c0       	rjmp	.+14     	; 0x27bc <vfprintf+0x170>
    27ae:	1c 33       	cpi	r17, 0x3C	; 60
    27b0:	50 f4       	brcc	.+20     	; 0x27c6 <vfprintf+0x17a>
    27b2:	44 24       	eor	r4, r4
    27b4:	43 94       	inc	r4
    27b6:	41 0e       	add	r4, r17
    27b8:	27 e0       	ldi	r18, 0x07	; 7
    27ba:	0b c0       	rjmp	.+22     	; 0x27d2 <vfprintf+0x186>
    27bc:	18 30       	cpi	r17, 0x08	; 8
    27be:	38 f0       	brcs	.+14     	; 0x27ce <vfprintf+0x182>
    27c0:	27 e0       	ldi	r18, 0x07	; 7
    27c2:	17 e0       	ldi	r17, 0x07	; 7
    27c4:	05 c0       	rjmp	.+10     	; 0x27d0 <vfprintf+0x184>
    27c6:	27 e0       	ldi	r18, 0x07	; 7
    27c8:	9c e3       	ldi	r25, 0x3C	; 60
    27ca:	49 2e       	mov	r4, r25
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <vfprintf+0x186>
    27ce:	21 2f       	mov	r18, r17
    27d0:	41 2c       	mov	r4, r1
    27d2:	56 01       	movw	r10, r12
    27d4:	84 e0       	ldi	r24, 0x04	; 4
    27d6:	a8 0e       	add	r10, r24
    27d8:	b1 1c       	adc	r11, r1
    27da:	f6 01       	movw	r30, r12
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	04 2d       	mov	r16, r4
    27e6:	a3 01       	movw	r20, r6
    27e8:	0e 94 21 18 	call	0x3042	; 0x3042 <__ftoa_engine>
    27ec:	6c 01       	movw	r12, r24
    27ee:	f9 81       	ldd	r31, Y+1	; 0x01
    27f0:	fc 87       	std	Y+12, r31	; 0x0c
    27f2:	f0 ff       	sbrs	r31, 0
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <vfprintf+0x1ae>
    27f6:	f3 ff       	sbrs	r31, 3
    27f8:	06 c0       	rjmp	.+12     	; 0x2806 <vfprintf+0x1ba>
    27fa:	91 fc       	sbrc	r9, 1
    27fc:	06 c0       	rjmp	.+12     	; 0x280a <vfprintf+0x1be>
    27fe:	92 fe       	sbrs	r9, 2
    2800:	06 c0       	rjmp	.+12     	; 0x280e <vfprintf+0x1c2>
    2802:	00 e2       	ldi	r16, 0x20	; 32
    2804:	05 c0       	rjmp	.+10     	; 0x2810 <vfprintf+0x1c4>
    2806:	0d e2       	ldi	r16, 0x2D	; 45
    2808:	03 c0       	rjmp	.+6      	; 0x2810 <vfprintf+0x1c4>
    280a:	0b e2       	ldi	r16, 0x2B	; 43
    280c:	01 c0       	rjmp	.+2      	; 0x2810 <vfprintf+0x1c4>
    280e:	00 e0       	ldi	r16, 0x00	; 0
    2810:	8c 85       	ldd	r24, Y+12	; 0x0c
    2812:	8c 70       	andi	r24, 0x0C	; 12
    2814:	19 f0       	breq	.+6      	; 0x281c <vfprintf+0x1d0>
    2816:	01 11       	cpse	r16, r1
    2818:	5a c2       	rjmp	.+1204   	; 0x2cce <vfprintf+0x682>
    281a:	9b c2       	rjmp	.+1334   	; 0x2d52 <vfprintf+0x706>
    281c:	97 fe       	sbrs	r9, 7
    281e:	10 c0       	rjmp	.+32     	; 0x2840 <vfprintf+0x1f4>
    2820:	4c 0c       	add	r4, r12
    2822:	fc 85       	ldd	r31, Y+12	; 0x0c
    2824:	f4 ff       	sbrs	r31, 4
    2826:	04 c0       	rjmp	.+8      	; 0x2830 <vfprintf+0x1e4>
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	81 33       	cpi	r24, 0x31	; 49
    282c:	09 f4       	brne	.+2      	; 0x2830 <vfprintf+0x1e4>
    282e:	4a 94       	dec	r4
    2830:	14 14       	cp	r1, r4
    2832:	74 f5       	brge	.+92     	; 0x2890 <vfprintf+0x244>
    2834:	28 e0       	ldi	r18, 0x08	; 8
    2836:	24 15       	cp	r18, r4
    2838:	78 f5       	brcc	.+94     	; 0x2898 <vfprintf+0x24c>
    283a:	88 e0       	ldi	r24, 0x08	; 8
    283c:	48 2e       	mov	r4, r24
    283e:	2c c0       	rjmp	.+88     	; 0x2898 <vfprintf+0x24c>
    2840:	96 fc       	sbrc	r9, 6
    2842:	2a c0       	rjmp	.+84     	; 0x2898 <vfprintf+0x24c>
    2844:	81 2f       	mov	r24, r17
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	8c 15       	cp	r24, r12
    284a:	9d 05       	cpc	r25, r13
    284c:	9c f0       	brlt	.+38     	; 0x2874 <vfprintf+0x228>
    284e:	3c ef       	ldi	r19, 0xFC	; 252
    2850:	c3 16       	cp	r12, r19
    2852:	3f ef       	ldi	r19, 0xFF	; 255
    2854:	d3 06       	cpc	r13, r19
    2856:	74 f0       	brlt	.+28     	; 0x2874 <vfprintf+0x228>
    2858:	89 2d       	mov	r24, r9
    285a:	80 68       	ori	r24, 0x80	; 128
    285c:	98 2e       	mov	r9, r24
    285e:	0a c0       	rjmp	.+20     	; 0x2874 <vfprintf+0x228>
    2860:	e2 e0       	ldi	r30, 0x02	; 2
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	ec 0f       	add	r30, r28
    2866:	fd 1f       	adc	r31, r29
    2868:	e1 0f       	add	r30, r17
    286a:	f1 1d       	adc	r31, r1
    286c:	80 81       	ld	r24, Z
    286e:	80 33       	cpi	r24, 0x30	; 48
    2870:	19 f4       	brne	.+6      	; 0x2878 <vfprintf+0x22c>
    2872:	11 50       	subi	r17, 0x01	; 1
    2874:	11 11       	cpse	r17, r1
    2876:	f4 cf       	rjmp	.-24     	; 0x2860 <vfprintf+0x214>
    2878:	97 fe       	sbrs	r9, 7
    287a:	0e c0       	rjmp	.+28     	; 0x2898 <vfprintf+0x24c>
    287c:	44 24       	eor	r4, r4
    287e:	43 94       	inc	r4
    2880:	41 0e       	add	r4, r17
    2882:	81 2f       	mov	r24, r17
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	c8 16       	cp	r12, r24
    2888:	d9 06       	cpc	r13, r25
    288a:	2c f4       	brge	.+10     	; 0x2896 <vfprintf+0x24a>
    288c:	1c 19       	sub	r17, r12
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <vfprintf+0x24c>
    2890:	44 24       	eor	r4, r4
    2892:	43 94       	inc	r4
    2894:	01 c0       	rjmp	.+2      	; 0x2898 <vfprintf+0x24c>
    2896:	10 e0       	ldi	r17, 0x00	; 0
    2898:	97 fe       	sbrs	r9, 7
    289a:	06 c0       	rjmp	.+12     	; 0x28a8 <vfprintf+0x25c>
    289c:	1c 14       	cp	r1, r12
    289e:	1d 04       	cpc	r1, r13
    28a0:	34 f4       	brge	.+12     	; 0x28ae <vfprintf+0x262>
    28a2:	c6 01       	movw	r24, r12
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	05 c0       	rjmp	.+10     	; 0x28b2 <vfprintf+0x266>
    28a8:	85 e0       	ldi	r24, 0x05	; 5
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	02 c0       	rjmp	.+4      	; 0x28b2 <vfprintf+0x266>
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	01 11       	cpse	r16, r1
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	11 23       	and	r17, r17
    28b8:	31 f0       	breq	.+12     	; 0x28c6 <vfprintf+0x27a>
    28ba:	21 2f       	mov	r18, r17
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	2f 5f       	subi	r18, 0xFF	; 255
    28c0:	3f 4f       	sbci	r19, 0xFF	; 255
    28c2:	82 0f       	add	r24, r18
    28c4:	93 1f       	adc	r25, r19
    28c6:	25 2d       	mov	r18, r5
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	82 17       	cp	r24, r18
    28cc:	93 07       	cpc	r25, r19
    28ce:	14 f4       	brge	.+4      	; 0x28d4 <vfprintf+0x288>
    28d0:	58 1a       	sub	r5, r24
    28d2:	01 c0       	rjmp	.+2      	; 0x28d6 <vfprintf+0x28a>
    28d4:	51 2c       	mov	r5, r1
    28d6:	89 2d       	mov	r24, r9
    28d8:	89 70       	andi	r24, 0x09	; 9
    28da:	49 f4       	brne	.+18     	; 0x28ee <vfprintf+0x2a2>
    28dc:	55 20       	and	r5, r5
    28de:	39 f0       	breq	.+14     	; 0x28ee <vfprintf+0x2a2>
    28e0:	b7 01       	movw	r22, r14
    28e2:	80 e2       	ldi	r24, 0x20	; 32
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    28ea:	5a 94       	dec	r5
    28ec:	f7 cf       	rjmp	.-18     	; 0x28dc <vfprintf+0x290>
    28ee:	00 23       	and	r16, r16
    28f0:	29 f0       	breq	.+10     	; 0x28fc <vfprintf+0x2b0>
    28f2:	b7 01       	movw	r22, r14
    28f4:	80 2f       	mov	r24, r16
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    28fc:	93 fc       	sbrc	r9, 3
    28fe:	09 c0       	rjmp	.+18     	; 0x2912 <vfprintf+0x2c6>
    2900:	55 20       	and	r5, r5
    2902:	39 f0       	breq	.+14     	; 0x2912 <vfprintf+0x2c6>
    2904:	b7 01       	movw	r22, r14
    2906:	80 e3       	ldi	r24, 0x30	; 48
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    290e:	5a 94       	dec	r5
    2910:	f7 cf       	rjmp	.-18     	; 0x2900 <vfprintf+0x2b4>
    2912:	97 fe       	sbrs	r9, 7
    2914:	4c c0       	rjmp	.+152    	; 0x29ae <vfprintf+0x362>
    2916:	46 01       	movw	r8, r12
    2918:	d7 fe       	sbrs	r13, 7
    291a:	02 c0       	rjmp	.+4      	; 0x2920 <vfprintf+0x2d4>
    291c:	81 2c       	mov	r8, r1
    291e:	91 2c       	mov	r9, r1
    2920:	c6 01       	movw	r24, r12
    2922:	88 19       	sub	r24, r8
    2924:	99 09       	sbc	r25, r9
    2926:	f3 01       	movw	r30, r6
    2928:	e8 0f       	add	r30, r24
    292a:	f9 1f       	adc	r31, r25
    292c:	ed 87       	std	Y+13, r30	; 0x0d
    292e:	fe 87       	std	Y+14, r31	; 0x0e
    2930:	96 01       	movw	r18, r12
    2932:	24 19       	sub	r18, r4
    2934:	31 09       	sbc	r19, r1
    2936:	2f 87       	std	Y+15, r18	; 0x0f
    2938:	38 8b       	std	Y+16, r19	; 0x10
    293a:	01 2f       	mov	r16, r17
    293c:	10 e0       	ldi	r17, 0x00	; 0
    293e:	11 95       	neg	r17
    2940:	01 95       	neg	r16
    2942:	11 09       	sbc	r17, r1
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	83 16       	cp	r8, r19
    2948:	93 06       	cpc	r9, r19
    294a:	29 f4       	brne	.+10     	; 0x2956 <vfprintf+0x30a>
    294c:	b7 01       	movw	r22, r14
    294e:	8e e2       	ldi	r24, 0x2E	; 46
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2956:	c8 14       	cp	r12, r8
    2958:	d9 04       	cpc	r13, r9
    295a:	4c f0       	brlt	.+18     	; 0x296e <vfprintf+0x322>
    295c:	8f 85       	ldd	r24, Y+15	; 0x0f
    295e:	98 89       	ldd	r25, Y+16	; 0x10
    2960:	88 15       	cp	r24, r8
    2962:	99 05       	cpc	r25, r9
    2964:	24 f4       	brge	.+8      	; 0x296e <vfprintf+0x322>
    2966:	ed 85       	ldd	r30, Y+13	; 0x0d
    2968:	fe 85       	ldd	r31, Y+14	; 0x0e
    296a:	81 81       	ldd	r24, Z+1	; 0x01
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <vfprintf+0x324>
    296e:	80 e3       	ldi	r24, 0x30	; 48
    2970:	f1 e0       	ldi	r31, 0x01	; 1
    2972:	8f 1a       	sub	r8, r31
    2974:	91 08       	sbc	r9, r1
    2976:	2d 85       	ldd	r18, Y+13	; 0x0d
    2978:	3e 85       	ldd	r19, Y+14	; 0x0e
    297a:	2f 5f       	subi	r18, 0xFF	; 255
    297c:	3f 4f       	sbci	r19, 0xFF	; 255
    297e:	2d 87       	std	Y+13, r18	; 0x0d
    2980:	3e 87       	std	Y+14, r19	; 0x0e
    2982:	80 16       	cp	r8, r16
    2984:	91 06       	cpc	r9, r17
    2986:	2c f0       	brlt	.+10     	; 0x2992 <vfprintf+0x346>
    2988:	b7 01       	movw	r22, r14
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2990:	d9 cf       	rjmp	.-78     	; 0x2944 <vfprintf+0x2f8>
    2992:	c8 14       	cp	r12, r8
    2994:	d9 04       	cpc	r13, r9
    2996:	41 f4       	brne	.+16     	; 0x29a8 <vfprintf+0x35c>
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	96 33       	cpi	r25, 0x36	; 54
    299c:	20 f4       	brcc	.+8      	; 0x29a6 <vfprintf+0x35a>
    299e:	95 33       	cpi	r25, 0x35	; 53
    29a0:	19 f4       	brne	.+6      	; 0x29a8 <vfprintf+0x35c>
    29a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    29a4:	34 ff       	sbrs	r19, 4
    29a6:	81 e3       	ldi	r24, 0x31	; 49
    29a8:	b7 01       	movw	r22, r14
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	4e c0       	rjmp	.+156    	; 0x2a4a <vfprintf+0x3fe>
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	81 33       	cpi	r24, 0x31	; 49
    29b2:	19 f0       	breq	.+6      	; 0x29ba <vfprintf+0x36e>
    29b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    29b6:	9f 7e       	andi	r25, 0xEF	; 239
    29b8:	9c 87       	std	Y+12, r25	; 0x0c
    29ba:	b7 01       	movw	r22, r14
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    29c2:	11 11       	cpse	r17, r1
    29c4:	05 c0       	rjmp	.+10     	; 0x29d0 <vfprintf+0x384>
    29c6:	94 fc       	sbrc	r9, 4
    29c8:	18 c0       	rjmp	.+48     	; 0x29fa <vfprintf+0x3ae>
    29ca:	85 e6       	ldi	r24, 0x65	; 101
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	17 c0       	rjmp	.+46     	; 0x29fe <vfprintf+0x3b2>
    29d0:	b7 01       	movw	r22, r14
    29d2:	8e e2       	ldi	r24, 0x2E	; 46
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    29da:	1e 5f       	subi	r17, 0xFE	; 254
    29dc:	82 e0       	ldi	r24, 0x02	; 2
    29de:	01 e0       	ldi	r16, 0x01	; 1
    29e0:	08 0f       	add	r16, r24
    29e2:	f3 01       	movw	r30, r6
    29e4:	e8 0f       	add	r30, r24
    29e6:	f1 1d       	adc	r31, r1
    29e8:	80 81       	ld	r24, Z
    29ea:	b7 01       	movw	r22, r14
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    29f2:	80 2f       	mov	r24, r16
    29f4:	01 13       	cpse	r16, r17
    29f6:	f3 cf       	rjmp	.-26     	; 0x29de <vfprintf+0x392>
    29f8:	e6 cf       	rjmp	.-52     	; 0x29c6 <vfprintf+0x37a>
    29fa:	85 e4       	ldi	r24, 0x45	; 69
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	b7 01       	movw	r22, r14
    2a00:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2a04:	d7 fc       	sbrc	r13, 7
    2a06:	06 c0       	rjmp	.+12     	; 0x2a14 <vfprintf+0x3c8>
    2a08:	c1 14       	cp	r12, r1
    2a0a:	d1 04       	cpc	r13, r1
    2a0c:	41 f4       	brne	.+16     	; 0x2a1e <vfprintf+0x3d2>
    2a0e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a10:	e4 ff       	sbrs	r30, 4
    2a12:	05 c0       	rjmp	.+10     	; 0x2a1e <vfprintf+0x3d2>
    2a14:	d1 94       	neg	r13
    2a16:	c1 94       	neg	r12
    2a18:	d1 08       	sbc	r13, r1
    2a1a:	8d e2       	ldi	r24, 0x2D	; 45
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <vfprintf+0x3d4>
    2a1e:	8b e2       	ldi	r24, 0x2B	; 43
    2a20:	b7 01       	movw	r22, r14
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2a28:	80 e3       	ldi	r24, 0x30	; 48
    2a2a:	2a e0       	ldi	r18, 0x0A	; 10
    2a2c:	c2 16       	cp	r12, r18
    2a2e:	d1 04       	cpc	r13, r1
    2a30:	2c f0       	brlt	.+10     	; 0x2a3c <vfprintf+0x3f0>
    2a32:	8f 5f       	subi	r24, 0xFF	; 255
    2a34:	fa e0       	ldi	r31, 0x0A	; 10
    2a36:	cf 1a       	sub	r12, r31
    2a38:	d1 08       	sbc	r13, r1
    2a3a:	f7 cf       	rjmp	.-18     	; 0x2a2a <vfprintf+0x3de>
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2a44:	b7 01       	movw	r22, r14
    2a46:	c6 01       	movw	r24, r12
    2a48:	c0 96       	adiw	r24, 0x30	; 48
    2a4a:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2a4e:	54 c1       	rjmp	.+680    	; 0x2cf8 <vfprintf+0x6ac>
    2a50:	83 36       	cpi	r24, 0x63	; 99
    2a52:	31 f0       	breq	.+12     	; 0x2a60 <vfprintf+0x414>
    2a54:	83 37       	cpi	r24, 0x73	; 115
    2a56:	79 f0       	breq	.+30     	; 0x2a76 <vfprintf+0x42a>
    2a58:	83 35       	cpi	r24, 0x53	; 83
    2a5a:	09 f0       	breq	.+2      	; 0x2a5e <vfprintf+0x412>
    2a5c:	56 c0       	rjmp	.+172    	; 0x2b0a <vfprintf+0x4be>
    2a5e:	20 c0       	rjmp	.+64     	; 0x2aa0 <vfprintf+0x454>
    2a60:	56 01       	movw	r10, r12
    2a62:	32 e0       	ldi	r19, 0x02	; 2
    2a64:	a3 0e       	add	r10, r19
    2a66:	b1 1c       	adc	r11, r1
    2a68:	f6 01       	movw	r30, r12
    2a6a:	80 81       	ld	r24, Z
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	01 e0       	ldi	r16, 0x01	; 1
    2a70:	10 e0       	ldi	r17, 0x00	; 0
    2a72:	63 01       	movw	r12, r6
    2a74:	12 c0       	rjmp	.+36     	; 0x2a9a <vfprintf+0x44e>
    2a76:	56 01       	movw	r10, r12
    2a78:	f2 e0       	ldi	r31, 0x02	; 2
    2a7a:	af 0e       	add	r10, r31
    2a7c:	b1 1c       	adc	r11, r1
    2a7e:	f6 01       	movw	r30, r12
    2a80:	c0 80       	ld	r12, Z
    2a82:	d1 80       	ldd	r13, Z+1	; 0x01
    2a84:	96 fe       	sbrs	r9, 6
    2a86:	03 c0       	rjmp	.+6      	; 0x2a8e <vfprintf+0x442>
    2a88:	61 2f       	mov	r22, r17
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <vfprintf+0x446>
    2a8e:	6f ef       	ldi	r22, 0xFF	; 255
    2a90:	7f ef       	ldi	r23, 0xFF	; 255
    2a92:	c6 01       	movw	r24, r12
    2a94:	0e 94 30 19 	call	0x3260	; 0x3260 <strnlen>
    2a98:	8c 01       	movw	r16, r24
    2a9a:	f9 2d       	mov	r31, r9
    2a9c:	ff 77       	andi	r31, 0x7F	; 127
    2a9e:	14 c0       	rjmp	.+40     	; 0x2ac8 <vfprintf+0x47c>
    2aa0:	56 01       	movw	r10, r12
    2aa2:	22 e0       	ldi	r18, 0x02	; 2
    2aa4:	a2 0e       	add	r10, r18
    2aa6:	b1 1c       	adc	r11, r1
    2aa8:	f6 01       	movw	r30, r12
    2aaa:	c0 80       	ld	r12, Z
    2aac:	d1 80       	ldd	r13, Z+1	; 0x01
    2aae:	96 fe       	sbrs	r9, 6
    2ab0:	03 c0       	rjmp	.+6      	; 0x2ab8 <vfprintf+0x46c>
    2ab2:	61 2f       	mov	r22, r17
    2ab4:	70 e0       	ldi	r23, 0x00	; 0
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <vfprintf+0x470>
    2ab8:	6f ef       	ldi	r22, 0xFF	; 255
    2aba:	7f ef       	ldi	r23, 0xFF	; 255
    2abc:	c6 01       	movw	r24, r12
    2abe:	0e 94 15 19 	call	0x322a	; 0x322a <strnlen_P>
    2ac2:	8c 01       	movw	r16, r24
    2ac4:	f9 2d       	mov	r31, r9
    2ac6:	f0 68       	ori	r31, 0x80	; 128
    2ac8:	9f 2e       	mov	r9, r31
    2aca:	f3 fd       	sbrc	r31, 3
    2acc:	1a c0       	rjmp	.+52     	; 0x2b02 <vfprintf+0x4b6>
    2ace:	85 2d       	mov	r24, r5
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	08 17       	cp	r16, r24
    2ad4:	19 07       	cpc	r17, r25
    2ad6:	a8 f4       	brcc	.+42     	; 0x2b02 <vfprintf+0x4b6>
    2ad8:	b7 01       	movw	r22, r14
    2ada:	80 e2       	ldi	r24, 0x20	; 32
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2ae2:	5a 94       	dec	r5
    2ae4:	f4 cf       	rjmp	.-24     	; 0x2ace <vfprintf+0x482>
    2ae6:	f6 01       	movw	r30, r12
    2ae8:	97 fc       	sbrc	r9, 7
    2aea:	85 91       	lpm	r24, Z+
    2aec:	97 fe       	sbrs	r9, 7
    2aee:	81 91       	ld	r24, Z+
    2af0:	6f 01       	movw	r12, r30
    2af2:	b7 01       	movw	r22, r14
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2afa:	51 10       	cpse	r5, r1
    2afc:	5a 94       	dec	r5
    2afe:	01 50       	subi	r16, 0x01	; 1
    2b00:	11 09       	sbc	r17, r1
    2b02:	01 15       	cp	r16, r1
    2b04:	11 05       	cpc	r17, r1
    2b06:	79 f7       	brne	.-34     	; 0x2ae6 <vfprintf+0x49a>
    2b08:	f7 c0       	rjmp	.+494    	; 0x2cf8 <vfprintf+0x6ac>
    2b0a:	84 36       	cpi	r24, 0x64	; 100
    2b0c:	11 f0       	breq	.+4      	; 0x2b12 <vfprintf+0x4c6>
    2b0e:	89 36       	cpi	r24, 0x69	; 105
    2b10:	61 f5       	brne	.+88     	; 0x2b6a <vfprintf+0x51e>
    2b12:	56 01       	movw	r10, r12
    2b14:	97 fe       	sbrs	r9, 7
    2b16:	09 c0       	rjmp	.+18     	; 0x2b2a <vfprintf+0x4de>
    2b18:	24 e0       	ldi	r18, 0x04	; 4
    2b1a:	a2 0e       	add	r10, r18
    2b1c:	b1 1c       	adc	r11, r1
    2b1e:	f6 01       	movw	r30, r12
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	0a c0       	rjmp	.+20     	; 0x2b3e <vfprintf+0x4f2>
    2b2a:	f2 e0       	ldi	r31, 0x02	; 2
    2b2c:	af 0e       	add	r10, r31
    2b2e:	b1 1c       	adc	r11, r1
    2b30:	f6 01       	movw	r30, r12
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	07 2e       	mov	r0, r23
    2b38:	00 0c       	add	r0, r0
    2b3a:	88 0b       	sbc	r24, r24
    2b3c:	99 0b       	sbc	r25, r25
    2b3e:	f9 2d       	mov	r31, r9
    2b40:	ff 76       	andi	r31, 0x6F	; 111
    2b42:	9f 2e       	mov	r9, r31
    2b44:	97 ff       	sbrs	r25, 7
    2b46:	09 c0       	rjmp	.+18     	; 0x2b5a <vfprintf+0x50e>
    2b48:	90 95       	com	r25
    2b4a:	80 95       	com	r24
    2b4c:	70 95       	com	r23
    2b4e:	61 95       	neg	r22
    2b50:	7f 4f       	sbci	r23, 0xFF	; 255
    2b52:	8f 4f       	sbci	r24, 0xFF	; 255
    2b54:	9f 4f       	sbci	r25, 0xFF	; 255
    2b56:	f0 68       	ori	r31, 0x80	; 128
    2b58:	9f 2e       	mov	r9, r31
    2b5a:	2a e0       	ldi	r18, 0x0A	; 10
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	a3 01       	movw	r20, r6
    2b60:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__ultoa_invert>
    2b64:	c8 2e       	mov	r12, r24
    2b66:	c6 18       	sub	r12, r6
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <vfprintf+0x59c>
    2b6a:	09 2d       	mov	r16, r9
    2b6c:	85 37       	cpi	r24, 0x75	; 117
    2b6e:	21 f4       	brne	.+8      	; 0x2b78 <vfprintf+0x52c>
    2b70:	0f 7e       	andi	r16, 0xEF	; 239
    2b72:	2a e0       	ldi	r18, 0x0A	; 10
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	1d c0       	rjmp	.+58     	; 0x2bb2 <vfprintf+0x566>
    2b78:	09 7f       	andi	r16, 0xF9	; 249
    2b7a:	8f 36       	cpi	r24, 0x6F	; 111
    2b7c:	91 f0       	breq	.+36     	; 0x2ba2 <vfprintf+0x556>
    2b7e:	18 f4       	brcc	.+6      	; 0x2b86 <vfprintf+0x53a>
    2b80:	88 35       	cpi	r24, 0x58	; 88
    2b82:	59 f0       	breq	.+22     	; 0x2b9a <vfprintf+0x54e>
    2b84:	c3 c0       	rjmp	.+390    	; 0x2d0c <vfprintf+0x6c0>
    2b86:	80 37       	cpi	r24, 0x70	; 112
    2b88:	19 f0       	breq	.+6      	; 0x2b90 <vfprintf+0x544>
    2b8a:	88 37       	cpi	r24, 0x78	; 120
    2b8c:	11 f0       	breq	.+4      	; 0x2b92 <vfprintf+0x546>
    2b8e:	be c0       	rjmp	.+380    	; 0x2d0c <vfprintf+0x6c0>
    2b90:	00 61       	ori	r16, 0x10	; 16
    2b92:	04 ff       	sbrs	r16, 4
    2b94:	09 c0       	rjmp	.+18     	; 0x2ba8 <vfprintf+0x55c>
    2b96:	04 60       	ori	r16, 0x04	; 4
    2b98:	07 c0       	rjmp	.+14     	; 0x2ba8 <vfprintf+0x55c>
    2b9a:	94 fe       	sbrs	r9, 4
    2b9c:	08 c0       	rjmp	.+16     	; 0x2bae <vfprintf+0x562>
    2b9e:	06 60       	ori	r16, 0x06	; 6
    2ba0:	06 c0       	rjmp	.+12     	; 0x2bae <vfprintf+0x562>
    2ba2:	28 e0       	ldi	r18, 0x08	; 8
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	05 c0       	rjmp	.+10     	; 0x2bb2 <vfprintf+0x566>
    2ba8:	20 e1       	ldi	r18, 0x10	; 16
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <vfprintf+0x566>
    2bae:	20 e1       	ldi	r18, 0x10	; 16
    2bb0:	32 e0       	ldi	r19, 0x02	; 2
    2bb2:	56 01       	movw	r10, r12
    2bb4:	07 ff       	sbrs	r16, 7
    2bb6:	09 c0       	rjmp	.+18     	; 0x2bca <vfprintf+0x57e>
    2bb8:	84 e0       	ldi	r24, 0x04	; 4
    2bba:	a8 0e       	add	r10, r24
    2bbc:	b1 1c       	adc	r11, r1
    2bbe:	f6 01       	movw	r30, r12
    2bc0:	60 81       	ld	r22, Z
    2bc2:	71 81       	ldd	r23, Z+1	; 0x01
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	08 c0       	rjmp	.+16     	; 0x2bda <vfprintf+0x58e>
    2bca:	f2 e0       	ldi	r31, 0x02	; 2
    2bcc:	af 0e       	add	r10, r31
    2bce:	b1 1c       	adc	r11, r1
    2bd0:	f6 01       	movw	r30, r12
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a3 01       	movw	r20, r6
    2bdc:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__ultoa_invert>
    2be0:	c8 2e       	mov	r12, r24
    2be2:	c6 18       	sub	r12, r6
    2be4:	0f 77       	andi	r16, 0x7F	; 127
    2be6:	90 2e       	mov	r9, r16
    2be8:	96 fe       	sbrs	r9, 6
    2bea:	0b c0       	rjmp	.+22     	; 0x2c02 <vfprintf+0x5b6>
    2bec:	09 2d       	mov	r16, r9
    2bee:	0e 7f       	andi	r16, 0xFE	; 254
    2bf0:	c1 16       	cp	r12, r17
    2bf2:	50 f4       	brcc	.+20     	; 0x2c08 <vfprintf+0x5bc>
    2bf4:	94 fe       	sbrs	r9, 4
    2bf6:	0a c0       	rjmp	.+20     	; 0x2c0c <vfprintf+0x5c0>
    2bf8:	92 fc       	sbrc	r9, 2
    2bfa:	08 c0       	rjmp	.+16     	; 0x2c0c <vfprintf+0x5c0>
    2bfc:	09 2d       	mov	r16, r9
    2bfe:	0e 7e       	andi	r16, 0xEE	; 238
    2c00:	05 c0       	rjmp	.+10     	; 0x2c0c <vfprintf+0x5c0>
    2c02:	dc 2c       	mov	r13, r12
    2c04:	09 2d       	mov	r16, r9
    2c06:	03 c0       	rjmp	.+6      	; 0x2c0e <vfprintf+0x5c2>
    2c08:	dc 2c       	mov	r13, r12
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <vfprintf+0x5c2>
    2c0c:	d1 2e       	mov	r13, r17
    2c0e:	04 ff       	sbrs	r16, 4
    2c10:	0d c0       	rjmp	.+26     	; 0x2c2c <vfprintf+0x5e0>
    2c12:	fe 01       	movw	r30, r28
    2c14:	ec 0d       	add	r30, r12
    2c16:	f1 1d       	adc	r31, r1
    2c18:	80 81       	ld	r24, Z
    2c1a:	80 33       	cpi	r24, 0x30	; 48
    2c1c:	11 f4       	brne	.+4      	; 0x2c22 <vfprintf+0x5d6>
    2c1e:	09 7e       	andi	r16, 0xE9	; 233
    2c20:	09 c0       	rjmp	.+18     	; 0x2c34 <vfprintf+0x5e8>
    2c22:	02 ff       	sbrs	r16, 2
    2c24:	06 c0       	rjmp	.+12     	; 0x2c32 <vfprintf+0x5e6>
    2c26:	d3 94       	inc	r13
    2c28:	d3 94       	inc	r13
    2c2a:	04 c0       	rjmp	.+8      	; 0x2c34 <vfprintf+0x5e8>
    2c2c:	80 2f       	mov	r24, r16
    2c2e:	86 78       	andi	r24, 0x86	; 134
    2c30:	09 f0       	breq	.+2      	; 0x2c34 <vfprintf+0x5e8>
    2c32:	d3 94       	inc	r13
    2c34:	03 fd       	sbrc	r16, 3
    2c36:	11 c0       	rjmp	.+34     	; 0x2c5a <vfprintf+0x60e>
    2c38:	00 ff       	sbrs	r16, 0
    2c3a:	06 c0       	rjmp	.+12     	; 0x2c48 <vfprintf+0x5fc>
    2c3c:	1c 2d       	mov	r17, r12
    2c3e:	d5 14       	cp	r13, r5
    2c40:	80 f4       	brcc	.+32     	; 0x2c62 <vfprintf+0x616>
    2c42:	15 0d       	add	r17, r5
    2c44:	1d 19       	sub	r17, r13
    2c46:	0d c0       	rjmp	.+26     	; 0x2c62 <vfprintf+0x616>
    2c48:	d5 14       	cp	r13, r5
    2c4a:	58 f4       	brcc	.+22     	; 0x2c62 <vfprintf+0x616>
    2c4c:	b7 01       	movw	r22, r14
    2c4e:	80 e2       	ldi	r24, 0x20	; 32
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2c56:	d3 94       	inc	r13
    2c58:	f7 cf       	rjmp	.-18     	; 0x2c48 <vfprintf+0x5fc>
    2c5a:	d5 14       	cp	r13, r5
    2c5c:	10 f4       	brcc	.+4      	; 0x2c62 <vfprintf+0x616>
    2c5e:	5d 18       	sub	r5, r13
    2c60:	01 c0       	rjmp	.+2      	; 0x2c64 <vfprintf+0x618>
    2c62:	51 2c       	mov	r5, r1
    2c64:	04 ff       	sbrs	r16, 4
    2c66:	10 c0       	rjmp	.+32     	; 0x2c88 <vfprintf+0x63c>
    2c68:	b7 01       	movw	r22, r14
    2c6a:	80 e3       	ldi	r24, 0x30	; 48
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2c72:	02 ff       	sbrs	r16, 2
    2c74:	17 c0       	rjmp	.+46     	; 0x2ca4 <vfprintf+0x658>
    2c76:	01 fd       	sbrc	r16, 1
    2c78:	03 c0       	rjmp	.+6      	; 0x2c80 <vfprintf+0x634>
    2c7a:	88 e7       	ldi	r24, 0x78	; 120
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <vfprintf+0x638>
    2c80:	88 e5       	ldi	r24, 0x58	; 88
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	b7 01       	movw	r22, r14
    2c86:	0c c0       	rjmp	.+24     	; 0x2ca0 <vfprintf+0x654>
    2c88:	80 2f       	mov	r24, r16
    2c8a:	86 78       	andi	r24, 0x86	; 134
    2c8c:	59 f0       	breq	.+22     	; 0x2ca4 <vfprintf+0x658>
    2c8e:	01 ff       	sbrs	r16, 1
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <vfprintf+0x64a>
    2c92:	8b e2       	ldi	r24, 0x2B	; 43
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <vfprintf+0x64c>
    2c96:	80 e2       	ldi	r24, 0x20	; 32
    2c98:	07 fd       	sbrc	r16, 7
    2c9a:	8d e2       	ldi	r24, 0x2D	; 45
    2c9c:	b7 01       	movw	r22, r14
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2ca4:	c1 16       	cp	r12, r17
    2ca6:	38 f4       	brcc	.+14     	; 0x2cb6 <vfprintf+0x66a>
    2ca8:	b7 01       	movw	r22, r14
    2caa:	80 e3       	ldi	r24, 0x30	; 48
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2cb2:	11 50       	subi	r17, 0x01	; 1
    2cb4:	f7 cf       	rjmp	.-18     	; 0x2ca4 <vfprintf+0x658>
    2cb6:	ca 94       	dec	r12
    2cb8:	f3 01       	movw	r30, r6
    2cba:	ec 0d       	add	r30, r12
    2cbc:	f1 1d       	adc	r31, r1
    2cbe:	80 81       	ld	r24, Z
    2cc0:	b7 01       	movw	r22, r14
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2cc8:	c1 10       	cpse	r12, r1
    2cca:	f5 cf       	rjmp	.-22     	; 0x2cb6 <vfprintf+0x66a>
    2ccc:	15 c0       	rjmp	.+42     	; 0x2cf8 <vfprintf+0x6ac>
    2cce:	f4 e0       	ldi	r31, 0x04	; 4
    2cd0:	f5 15       	cp	r31, r5
    2cd2:	60 f5       	brcc	.+88     	; 0x2d2c <vfprintf+0x6e0>
    2cd4:	84 e0       	ldi	r24, 0x04	; 4
    2cd6:	58 1a       	sub	r5, r24
    2cd8:	93 fe       	sbrs	r9, 3
    2cda:	1f c0       	rjmp	.+62     	; 0x2d1a <vfprintf+0x6ce>
    2cdc:	01 11       	cpse	r16, r1
    2cde:	27 c0       	rjmp	.+78     	; 0x2d2e <vfprintf+0x6e2>
    2ce0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ce2:	23 ff       	sbrs	r18, 3
    2ce4:	2a c0       	rjmp	.+84     	; 0x2d3a <vfprintf+0x6ee>
    2ce6:	04 e0       	ldi	r16, 0x04	; 4
    2ce8:	11 e0       	ldi	r17, 0x01	; 1
    2cea:	39 2d       	mov	r19, r9
    2cec:	30 71       	andi	r19, 0x10	; 16
    2cee:	93 2e       	mov	r9, r19
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	84 91       	lpm	r24, Z
    2cf4:	81 11       	cpse	r24, r1
    2cf6:	24 c0       	rjmp	.+72     	; 0x2d40 <vfprintf+0x6f4>
    2cf8:	55 20       	and	r5, r5
    2cfa:	09 f4       	brne	.+2      	; 0x2cfe <vfprintf+0x6b2>
    2cfc:	e4 cc       	rjmp	.-1592   	; 0x26c6 <vfprintf+0x7a>
    2cfe:	b7 01       	movw	r22, r14
    2d00:	80 e2       	ldi	r24, 0x20	; 32
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2d08:	5a 94       	dec	r5
    2d0a:	f6 cf       	rjmp	.-20     	; 0x2cf8 <vfprintf+0x6ac>
    2d0c:	f7 01       	movw	r30, r14
    2d0e:	86 81       	ldd	r24, Z+6	; 0x06
    2d10:	97 81       	ldd	r25, Z+7	; 0x07
    2d12:	26 c0       	rjmp	.+76     	; 0x2d60 <vfprintf+0x714>
    2d14:	8f ef       	ldi	r24, 0xFF	; 255
    2d16:	9f ef       	ldi	r25, 0xFF	; 255
    2d18:	23 c0       	rjmp	.+70     	; 0x2d60 <vfprintf+0x714>
    2d1a:	b7 01       	movw	r22, r14
    2d1c:	80 e2       	ldi	r24, 0x20	; 32
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2d24:	5a 94       	dec	r5
    2d26:	51 10       	cpse	r5, r1
    2d28:	f8 cf       	rjmp	.-16     	; 0x2d1a <vfprintf+0x6ce>
    2d2a:	d8 cf       	rjmp	.-80     	; 0x2cdc <vfprintf+0x690>
    2d2c:	51 2c       	mov	r5, r1
    2d2e:	b7 01       	movw	r22, r14
    2d30:	80 2f       	mov	r24, r16
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2d38:	d3 cf       	rjmp	.-90     	; 0x2ce0 <vfprintf+0x694>
    2d3a:	08 e0       	ldi	r16, 0x08	; 8
    2d3c:	11 e0       	ldi	r17, 0x01	; 1
    2d3e:	d5 cf       	rjmp	.-86     	; 0x2cea <vfprintf+0x69e>
    2d40:	91 10       	cpse	r9, r1
    2d42:	80 52       	subi	r24, 0x20	; 32
    2d44:	b7 01       	movw	r22, r14
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2d4c:	0f 5f       	subi	r16, 0xFF	; 255
    2d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d50:	cf cf       	rjmp	.-98     	; 0x2cf0 <vfprintf+0x6a4>
    2d52:	23 e0       	ldi	r18, 0x03	; 3
    2d54:	25 15       	cp	r18, r5
    2d56:	10 f4       	brcc	.+4      	; 0x2d5c <vfprintf+0x710>
    2d58:	83 e0       	ldi	r24, 0x03	; 3
    2d5a:	bd cf       	rjmp	.-134    	; 0x2cd6 <vfprintf+0x68a>
    2d5c:	51 2c       	mov	r5, r1
    2d5e:	c0 cf       	rjmp	.-128    	; 0x2ce0 <vfprintf+0x694>
    2d60:	60 96       	adiw	r28, 0x10	; 16
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	ff 90       	pop	r15
    2d70:	ef 90       	pop	r14
    2d72:	df 90       	pop	r13
    2d74:	cf 90       	pop	r12
    2d76:	bf 90       	pop	r11
    2d78:	af 90       	pop	r10
    2d7a:	9f 90       	pop	r9
    2d7c:	8f 90       	pop	r8
    2d7e:	7f 90       	pop	r7
    2d80:	6f 90       	pop	r6
    2d82:	5f 90       	pop	r5
    2d84:	4f 90       	pop	r4
    2d86:	3f 90       	pop	r3
    2d88:	2f 90       	pop	r2
    2d8a:	08 95       	ret

00002d8c <__udivmodsi4>:
    2d8c:	a1 e2       	ldi	r26, 0x21	; 33
    2d8e:	1a 2e       	mov	r1, r26
    2d90:	aa 1b       	sub	r26, r26
    2d92:	bb 1b       	sub	r27, r27
    2d94:	fd 01       	movw	r30, r26
    2d96:	0d c0       	rjmp	.+26     	; 0x2db2 <__udivmodsi4_ep>

00002d98 <__udivmodsi4_loop>:
    2d98:	aa 1f       	adc	r26, r26
    2d9a:	bb 1f       	adc	r27, r27
    2d9c:	ee 1f       	adc	r30, r30
    2d9e:	ff 1f       	adc	r31, r31
    2da0:	a2 17       	cp	r26, r18
    2da2:	b3 07       	cpc	r27, r19
    2da4:	e4 07       	cpc	r30, r20
    2da6:	f5 07       	cpc	r31, r21
    2da8:	20 f0       	brcs	.+8      	; 0x2db2 <__udivmodsi4_ep>
    2daa:	a2 1b       	sub	r26, r18
    2dac:	b3 0b       	sbc	r27, r19
    2dae:	e4 0b       	sbc	r30, r20
    2db0:	f5 0b       	sbc	r31, r21

00002db2 <__udivmodsi4_ep>:
    2db2:	66 1f       	adc	r22, r22
    2db4:	77 1f       	adc	r23, r23
    2db6:	88 1f       	adc	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	1a 94       	dec	r1
    2dbc:	69 f7       	brne	.-38     	; 0x2d98 <__udivmodsi4_loop>
    2dbe:	60 95       	com	r22
    2dc0:	70 95       	com	r23
    2dc2:	80 95       	com	r24
    2dc4:	90 95       	com	r25
    2dc6:	9b 01       	movw	r18, r22
    2dc8:	ac 01       	movw	r20, r24
    2dca:	bd 01       	movw	r22, r26
    2dcc:	cf 01       	movw	r24, r30
    2dce:	08 95       	ret

00002dd0 <__tablejump2__>:
    2dd0:	ee 0f       	add	r30, r30
    2dd2:	ff 1f       	adc	r31, r31
    2dd4:	00 24       	eor	r0, r0
    2dd6:	00 1c       	adc	r0, r0
    2dd8:	0b be       	out	0x3b, r0	; 59
    2dda:	07 90       	elpm	r0, Z+
    2ddc:	f6 91       	elpm	r31, Z
    2dde:	e0 2d       	mov	r30, r0
    2de0:	09 94       	ijmp

00002de2 <__umulhisi3>:
    2de2:	a2 9f       	mul	r26, r18
    2de4:	b0 01       	movw	r22, r0
    2de6:	b3 9f       	mul	r27, r19
    2de8:	c0 01       	movw	r24, r0
    2dea:	a3 9f       	mul	r26, r19
    2dec:	70 0d       	add	r23, r0
    2dee:	81 1d       	adc	r24, r1
    2df0:	11 24       	eor	r1, r1
    2df2:	91 1d       	adc	r25, r1
    2df4:	b2 9f       	mul	r27, r18
    2df6:	70 0d       	add	r23, r0
    2df8:	81 1d       	adc	r24, r1
    2dfa:	11 24       	eor	r1, r1
    2dfc:	91 1d       	adc	r25, r1
    2dfe:	08 95       	ret

00002e00 <malloc>:
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	82 30       	cpi	r24, 0x02	; 2
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	10 f4       	brcc	.+4      	; 0x2e12 <malloc+0x12>
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	e0 91 4b 45 	lds	r30, 0x454B	; 0x80454b <__flp>
    2e16:	f0 91 4c 45 	lds	r31, 0x454C	; 0x80454c <__flp+0x1>
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	a0 e0       	ldi	r26, 0x00	; 0
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	30 97       	sbiw	r30, 0x00	; 0
    2e24:	19 f1       	breq	.+70     	; 0x2e6c <malloc+0x6c>
    2e26:	40 81       	ld	r20, Z
    2e28:	51 81       	ldd	r21, Z+1	; 0x01
    2e2a:	02 81       	ldd	r16, Z+2	; 0x02
    2e2c:	13 81       	ldd	r17, Z+3	; 0x03
    2e2e:	48 17       	cp	r20, r24
    2e30:	59 07       	cpc	r21, r25
    2e32:	c8 f0       	brcs	.+50     	; 0x2e66 <malloc+0x66>
    2e34:	84 17       	cp	r24, r20
    2e36:	95 07       	cpc	r25, r21
    2e38:	69 f4       	brne	.+26     	; 0x2e54 <malloc+0x54>
    2e3a:	10 97       	sbiw	r26, 0x00	; 0
    2e3c:	31 f0       	breq	.+12     	; 0x2e4a <malloc+0x4a>
    2e3e:	12 96       	adiw	r26, 0x02	; 2
    2e40:	0c 93       	st	X, r16
    2e42:	12 97       	sbiw	r26, 0x02	; 2
    2e44:	13 96       	adiw	r26, 0x03	; 3
    2e46:	1c 93       	st	X, r17
    2e48:	27 c0       	rjmp	.+78     	; 0x2e98 <malloc+0x98>
    2e4a:	00 93 4b 45 	sts	0x454B, r16	; 0x80454b <__flp>
    2e4e:	10 93 4c 45 	sts	0x454C, r17	; 0x80454c <__flp+0x1>
    2e52:	22 c0       	rjmp	.+68     	; 0x2e98 <malloc+0x98>
    2e54:	21 15       	cp	r18, r1
    2e56:	31 05       	cpc	r19, r1
    2e58:	19 f0       	breq	.+6      	; 0x2e60 <malloc+0x60>
    2e5a:	42 17       	cp	r20, r18
    2e5c:	53 07       	cpc	r21, r19
    2e5e:	18 f4       	brcc	.+6      	; 0x2e66 <malloc+0x66>
    2e60:	9a 01       	movw	r18, r20
    2e62:	bd 01       	movw	r22, r26
    2e64:	ef 01       	movw	r28, r30
    2e66:	df 01       	movw	r26, r30
    2e68:	f8 01       	movw	r30, r16
    2e6a:	db cf       	rjmp	.-74     	; 0x2e22 <malloc+0x22>
    2e6c:	21 15       	cp	r18, r1
    2e6e:	31 05       	cpc	r19, r1
    2e70:	f9 f0       	breq	.+62     	; 0x2eb0 <malloc+0xb0>
    2e72:	28 1b       	sub	r18, r24
    2e74:	39 0b       	sbc	r19, r25
    2e76:	24 30       	cpi	r18, 0x04	; 4
    2e78:	31 05       	cpc	r19, r1
    2e7a:	80 f4       	brcc	.+32     	; 0x2e9c <malloc+0x9c>
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e80:	61 15       	cp	r22, r1
    2e82:	71 05       	cpc	r23, r1
    2e84:	21 f0       	breq	.+8      	; 0x2e8e <malloc+0x8e>
    2e86:	fb 01       	movw	r30, r22
    2e88:	82 83       	std	Z+2, r24	; 0x02
    2e8a:	93 83       	std	Z+3, r25	; 0x03
    2e8c:	04 c0       	rjmp	.+8      	; 0x2e96 <malloc+0x96>
    2e8e:	80 93 4b 45 	sts	0x454B, r24	; 0x80454b <__flp>
    2e92:	90 93 4c 45 	sts	0x454C, r25	; 0x80454c <__flp+0x1>
    2e96:	fe 01       	movw	r30, r28
    2e98:	32 96       	adiw	r30, 0x02	; 2
    2e9a:	44 c0       	rjmp	.+136    	; 0x2f24 <malloc+0x124>
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e2 0f       	add	r30, r18
    2ea0:	f3 1f       	adc	r31, r19
    2ea2:	81 93       	st	Z+, r24
    2ea4:	91 93       	st	Z+, r25
    2ea6:	22 50       	subi	r18, 0x02	; 2
    2ea8:	31 09       	sbc	r19, r1
    2eaa:	28 83       	st	Y, r18
    2eac:	39 83       	std	Y+1, r19	; 0x01
    2eae:	3a c0       	rjmp	.+116    	; 0x2f24 <malloc+0x124>
    2eb0:	20 91 49 45 	lds	r18, 0x4549	; 0x804549 <__brkval>
    2eb4:	30 91 4a 45 	lds	r19, 0x454A	; 0x80454a <__brkval+0x1>
    2eb8:	23 2b       	or	r18, r19
    2eba:	41 f4       	brne	.+16     	; 0x2ecc <malloc+0xcc>
    2ebc:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    2ec0:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    2ec4:	20 93 49 45 	sts	0x4549, r18	; 0x804549 <__brkval>
    2ec8:	30 93 4a 45 	sts	0x454A, r19	; 0x80454a <__brkval+0x1>
    2ecc:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    2ed0:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    2ed4:	21 15       	cp	r18, r1
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	41 f4       	brne	.+16     	; 0x2eea <malloc+0xea>
    2eda:	2d b7       	in	r18, 0x3d	; 61
    2edc:	3e b7       	in	r19, 0x3e	; 62
    2ede:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    2ee2:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    2ee6:	24 1b       	sub	r18, r20
    2ee8:	35 0b       	sbc	r19, r21
    2eea:	e0 91 49 45 	lds	r30, 0x4549	; 0x804549 <__brkval>
    2eee:	f0 91 4a 45 	lds	r31, 0x454A	; 0x80454a <__brkval+0x1>
    2ef2:	e2 17       	cp	r30, r18
    2ef4:	f3 07       	cpc	r31, r19
    2ef6:	a0 f4       	brcc	.+40     	; 0x2f20 <malloc+0x120>
    2ef8:	2e 1b       	sub	r18, r30
    2efa:	3f 0b       	sbc	r19, r31
    2efc:	28 17       	cp	r18, r24
    2efe:	39 07       	cpc	r19, r25
    2f00:	78 f0       	brcs	.+30     	; 0x2f20 <malloc+0x120>
    2f02:	ac 01       	movw	r20, r24
    2f04:	4e 5f       	subi	r20, 0xFE	; 254
    2f06:	5f 4f       	sbci	r21, 0xFF	; 255
    2f08:	24 17       	cp	r18, r20
    2f0a:	35 07       	cpc	r19, r21
    2f0c:	48 f0       	brcs	.+18     	; 0x2f20 <malloc+0x120>
    2f0e:	4e 0f       	add	r20, r30
    2f10:	5f 1f       	adc	r21, r31
    2f12:	40 93 49 45 	sts	0x4549, r20	; 0x804549 <__brkval>
    2f16:	50 93 4a 45 	sts	0x454A, r21	; 0x80454a <__brkval+0x1>
    2f1a:	81 93       	st	Z+, r24
    2f1c:	91 93       	st	Z+, r25
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <malloc+0x124>
    2f20:	e0 e0       	ldi	r30, 0x00	; 0
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	cf 01       	movw	r24, r30
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	08 95       	ret

00002f30 <free>:
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <free+0xa>
    2f38:	81 c0       	rjmp	.+258    	; 0x303c <free+0x10c>
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	32 97       	sbiw	r30, 0x02	; 2
    2f3e:	12 82       	std	Z+2, r1	; 0x02
    2f40:	13 82       	std	Z+3, r1	; 0x03
    2f42:	a0 91 4b 45 	lds	r26, 0x454B	; 0x80454b <__flp>
    2f46:	b0 91 4c 45 	lds	r27, 0x454C	; 0x80454c <__flp+0x1>
    2f4a:	10 97       	sbiw	r26, 0x00	; 0
    2f4c:	81 f4       	brne	.+32     	; 0x2f6e <free+0x3e>
    2f4e:	20 81       	ld	r18, Z
    2f50:	31 81       	ldd	r19, Z+1	; 0x01
    2f52:	82 0f       	add	r24, r18
    2f54:	93 1f       	adc	r25, r19
    2f56:	20 91 49 45 	lds	r18, 0x4549	; 0x804549 <__brkval>
    2f5a:	30 91 4a 45 	lds	r19, 0x454A	; 0x80454a <__brkval+0x1>
    2f5e:	28 17       	cp	r18, r24
    2f60:	39 07       	cpc	r19, r25
    2f62:	51 f5       	brne	.+84     	; 0x2fb8 <free+0x88>
    2f64:	e0 93 49 45 	sts	0x4549, r30	; 0x804549 <__brkval>
    2f68:	f0 93 4a 45 	sts	0x454A, r31	; 0x80454a <__brkval+0x1>
    2f6c:	67 c0       	rjmp	.+206    	; 0x303c <free+0x10c>
    2f6e:	ed 01       	movw	r28, r26
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	ce 17       	cp	r28, r30
    2f76:	df 07       	cpc	r29, r31
    2f78:	40 f4       	brcc	.+16     	; 0x2f8a <free+0x5a>
    2f7a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f7c:	5b 81       	ldd	r21, Y+3	; 0x03
    2f7e:	9e 01       	movw	r18, r28
    2f80:	41 15       	cp	r20, r1
    2f82:	51 05       	cpc	r21, r1
    2f84:	f1 f0       	breq	.+60     	; 0x2fc2 <free+0x92>
    2f86:	ea 01       	movw	r28, r20
    2f88:	f5 cf       	rjmp	.-22     	; 0x2f74 <free+0x44>
    2f8a:	c2 83       	std	Z+2, r28	; 0x02
    2f8c:	d3 83       	std	Z+3, r29	; 0x03
    2f8e:	40 81       	ld	r20, Z
    2f90:	51 81       	ldd	r21, Z+1	; 0x01
    2f92:	84 0f       	add	r24, r20
    2f94:	95 1f       	adc	r25, r21
    2f96:	c8 17       	cp	r28, r24
    2f98:	d9 07       	cpc	r29, r25
    2f9a:	59 f4       	brne	.+22     	; 0x2fb2 <free+0x82>
    2f9c:	88 81       	ld	r24, Y
    2f9e:	99 81       	ldd	r25, Y+1	; 0x01
    2fa0:	84 0f       	add	r24, r20
    2fa2:	95 1f       	adc	r25, r21
    2fa4:	02 96       	adiw	r24, 0x02	; 2
    2fa6:	80 83       	st	Z, r24
    2fa8:	91 83       	std	Z+1, r25	; 0x01
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	82 83       	std	Z+2, r24	; 0x02
    2fb0:	93 83       	std	Z+3, r25	; 0x03
    2fb2:	21 15       	cp	r18, r1
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	29 f4       	brne	.+10     	; 0x2fc2 <free+0x92>
    2fb8:	e0 93 4b 45 	sts	0x454B, r30	; 0x80454b <__flp>
    2fbc:	f0 93 4c 45 	sts	0x454C, r31	; 0x80454c <__flp+0x1>
    2fc0:	3d c0       	rjmp	.+122    	; 0x303c <free+0x10c>
    2fc2:	e9 01       	movw	r28, r18
    2fc4:	ea 83       	std	Y+2, r30	; 0x02
    2fc6:	fb 83       	std	Y+3, r31	; 0x03
    2fc8:	49 91       	ld	r20, Y+
    2fca:	59 91       	ld	r21, Y+
    2fcc:	c4 0f       	add	r28, r20
    2fce:	d5 1f       	adc	r29, r21
    2fd0:	ec 17       	cp	r30, r28
    2fd2:	fd 07       	cpc	r31, r29
    2fd4:	61 f4       	brne	.+24     	; 0x2fee <free+0xbe>
    2fd6:	80 81       	ld	r24, Z
    2fd8:	91 81       	ldd	r25, Z+1	; 0x01
    2fda:	84 0f       	add	r24, r20
    2fdc:	95 1f       	adc	r25, r21
    2fde:	02 96       	adiw	r24, 0x02	; 2
    2fe0:	e9 01       	movw	r28, r18
    2fe2:	88 83       	st	Y, r24
    2fe4:	99 83       	std	Y+1, r25	; 0x01
    2fe6:	82 81       	ldd	r24, Z+2	; 0x02
    2fe8:	93 81       	ldd	r25, Z+3	; 0x03
    2fea:	8a 83       	std	Y+2, r24	; 0x02
    2fec:	9b 83       	std	Y+3, r25	; 0x03
    2fee:	e0 e0       	ldi	r30, 0x00	; 0
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	12 96       	adiw	r26, 0x02	; 2
    2ff4:	8d 91       	ld	r24, X+
    2ff6:	9c 91       	ld	r25, X
    2ff8:	13 97       	sbiw	r26, 0x03	; 3
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	19 f0       	breq	.+6      	; 0x3004 <free+0xd4>
    2ffe:	fd 01       	movw	r30, r26
    3000:	dc 01       	movw	r26, r24
    3002:	f7 cf       	rjmp	.-18     	; 0x2ff2 <free+0xc2>
    3004:	8d 91       	ld	r24, X+
    3006:	9c 91       	ld	r25, X
    3008:	11 97       	sbiw	r26, 0x01	; 1
    300a:	9d 01       	movw	r18, r26
    300c:	2e 5f       	subi	r18, 0xFE	; 254
    300e:	3f 4f       	sbci	r19, 0xFF	; 255
    3010:	82 0f       	add	r24, r18
    3012:	93 1f       	adc	r25, r19
    3014:	20 91 49 45 	lds	r18, 0x4549	; 0x804549 <__brkval>
    3018:	30 91 4a 45 	lds	r19, 0x454A	; 0x80454a <__brkval+0x1>
    301c:	28 17       	cp	r18, r24
    301e:	39 07       	cpc	r19, r25
    3020:	69 f4       	brne	.+26     	; 0x303c <free+0x10c>
    3022:	30 97       	sbiw	r30, 0x00	; 0
    3024:	29 f4       	brne	.+10     	; 0x3030 <free+0x100>
    3026:	10 92 4b 45 	sts	0x454B, r1	; 0x80454b <__flp>
    302a:	10 92 4c 45 	sts	0x454C, r1	; 0x80454c <__flp+0x1>
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <free+0x104>
    3030:	12 82       	std	Z+2, r1	; 0x02
    3032:	13 82       	std	Z+3, r1	; 0x03
    3034:	a0 93 49 45 	sts	0x4549, r26	; 0x804549 <__brkval>
    3038:	b0 93 4a 45 	sts	0x454A, r27	; 0x80454a <__brkval+0x1>
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	08 95       	ret

00003042 <__ftoa_engine>:
    3042:	28 30       	cpi	r18, 0x08	; 8
    3044:	08 f0       	brcs	.+2      	; 0x3048 <__ftoa_engine+0x6>
    3046:	27 e0       	ldi	r18, 0x07	; 7
    3048:	33 27       	eor	r19, r19
    304a:	da 01       	movw	r26, r20
    304c:	99 0f       	add	r25, r25
    304e:	31 1d       	adc	r19, r1
    3050:	87 fd       	sbrc	r24, 7
    3052:	91 60       	ori	r25, 0x01	; 1
    3054:	00 96       	adiw	r24, 0x00	; 0
    3056:	61 05       	cpc	r22, r1
    3058:	71 05       	cpc	r23, r1
    305a:	39 f4       	brne	.+14     	; 0x306a <__ftoa_engine+0x28>
    305c:	32 60       	ori	r19, 0x02	; 2
    305e:	2e 5f       	subi	r18, 0xFE	; 254
    3060:	3d 93       	st	X+, r19
    3062:	30 e3       	ldi	r19, 0x30	; 48
    3064:	2a 95       	dec	r18
    3066:	e1 f7       	brne	.-8      	; 0x3060 <__ftoa_engine+0x1e>
    3068:	08 95       	ret
    306a:	9f 3f       	cpi	r25, 0xFF	; 255
    306c:	30 f0       	brcs	.+12     	; 0x307a <__ftoa_engine+0x38>
    306e:	80 38       	cpi	r24, 0x80	; 128
    3070:	71 05       	cpc	r23, r1
    3072:	61 05       	cpc	r22, r1
    3074:	09 f0       	breq	.+2      	; 0x3078 <__ftoa_engine+0x36>
    3076:	3c 5f       	subi	r19, 0xFC	; 252
    3078:	3c 5f       	subi	r19, 0xFC	; 252
    307a:	3d 93       	st	X+, r19
    307c:	91 30       	cpi	r25, 0x01	; 1
    307e:	08 f0       	brcs	.+2      	; 0x3082 <__ftoa_engine+0x40>
    3080:	80 68       	ori	r24, 0x80	; 128
    3082:	91 1d       	adc	r25, r1
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	1f 93       	push	r17
    308a:	0f 93       	push	r16
    308c:	ff 92       	push	r15
    308e:	ef 92       	push	r14
    3090:	19 2f       	mov	r17, r25
    3092:	98 7f       	andi	r25, 0xF8	; 248
    3094:	96 95       	lsr	r25
    3096:	e9 2f       	mov	r30, r25
    3098:	96 95       	lsr	r25
    309a:	96 95       	lsr	r25
    309c:	e9 0f       	add	r30, r25
    309e:	ff 27       	eor	r31, r31
    30a0:	ea 59       	subi	r30, 0x9A	; 154
    30a2:	fe 4f       	sbci	r31, 0xFE	; 254
    30a4:	99 27       	eor	r25, r25
    30a6:	33 27       	eor	r19, r19
    30a8:	ee 24       	eor	r14, r14
    30aa:	ff 24       	eor	r15, r15
    30ac:	a7 01       	movw	r20, r14
    30ae:	e7 01       	movw	r28, r14
    30b0:	05 90       	lpm	r0, Z+
    30b2:	08 94       	sec
    30b4:	07 94       	ror	r0
    30b6:	28 f4       	brcc	.+10     	; 0x30c2 <__ftoa_engine+0x80>
    30b8:	36 0f       	add	r19, r22
    30ba:	e7 1e       	adc	r14, r23
    30bc:	f8 1e       	adc	r15, r24
    30be:	49 1f       	adc	r20, r25
    30c0:	51 1d       	adc	r21, r1
    30c2:	66 0f       	add	r22, r22
    30c4:	77 1f       	adc	r23, r23
    30c6:	88 1f       	adc	r24, r24
    30c8:	99 1f       	adc	r25, r25
    30ca:	06 94       	lsr	r0
    30cc:	a1 f7       	brne	.-24     	; 0x30b6 <__ftoa_engine+0x74>
    30ce:	05 90       	lpm	r0, Z+
    30d0:	07 94       	ror	r0
    30d2:	28 f4       	brcc	.+10     	; 0x30de <__ftoa_engine+0x9c>
    30d4:	e7 0e       	add	r14, r23
    30d6:	f8 1e       	adc	r15, r24
    30d8:	49 1f       	adc	r20, r25
    30da:	56 1f       	adc	r21, r22
    30dc:	c1 1d       	adc	r28, r1
    30de:	77 0f       	add	r23, r23
    30e0:	88 1f       	adc	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	66 1f       	adc	r22, r22
    30e6:	06 94       	lsr	r0
    30e8:	a1 f7       	brne	.-24     	; 0x30d2 <__ftoa_engine+0x90>
    30ea:	05 90       	lpm	r0, Z+
    30ec:	07 94       	ror	r0
    30ee:	28 f4       	brcc	.+10     	; 0x30fa <__ftoa_engine+0xb8>
    30f0:	f8 0e       	add	r15, r24
    30f2:	49 1f       	adc	r20, r25
    30f4:	56 1f       	adc	r21, r22
    30f6:	c7 1f       	adc	r28, r23
    30f8:	d1 1d       	adc	r29, r1
    30fa:	88 0f       	add	r24, r24
    30fc:	99 1f       	adc	r25, r25
    30fe:	66 1f       	adc	r22, r22
    3100:	77 1f       	adc	r23, r23
    3102:	06 94       	lsr	r0
    3104:	a1 f7       	brne	.-24     	; 0x30ee <__ftoa_engine+0xac>
    3106:	05 90       	lpm	r0, Z+
    3108:	07 94       	ror	r0
    310a:	20 f4       	brcc	.+8      	; 0x3114 <__ftoa_engine+0xd2>
    310c:	49 0f       	add	r20, r25
    310e:	56 1f       	adc	r21, r22
    3110:	c7 1f       	adc	r28, r23
    3112:	d8 1f       	adc	r29, r24
    3114:	99 0f       	add	r25, r25
    3116:	66 1f       	adc	r22, r22
    3118:	77 1f       	adc	r23, r23
    311a:	88 1f       	adc	r24, r24
    311c:	06 94       	lsr	r0
    311e:	a9 f7       	brne	.-22     	; 0x310a <__ftoa_engine+0xc8>
    3120:	84 91       	lpm	r24, Z
    3122:	10 95       	com	r17
    3124:	17 70       	andi	r17, 0x07	; 7
    3126:	41 f0       	breq	.+16     	; 0x3138 <__ftoa_engine+0xf6>
    3128:	d6 95       	lsr	r29
    312a:	c7 95       	ror	r28
    312c:	57 95       	ror	r21
    312e:	47 95       	ror	r20
    3130:	f7 94       	ror	r15
    3132:	e7 94       	ror	r14
    3134:	1a 95       	dec	r17
    3136:	c1 f7       	brne	.-16     	; 0x3128 <__ftoa_engine+0xe6>
    3138:	ec e0       	ldi	r30, 0x0C	; 12
    313a:	f1 e0       	ldi	r31, 0x01	; 1
    313c:	68 94       	set
    313e:	15 90       	lpm	r1, Z+
    3140:	15 91       	lpm	r17, Z+
    3142:	35 91       	lpm	r19, Z+
    3144:	65 91       	lpm	r22, Z+
    3146:	95 91       	lpm	r25, Z+
    3148:	05 90       	lpm	r0, Z+
    314a:	7f e2       	ldi	r23, 0x2F	; 47
    314c:	73 95       	inc	r23
    314e:	e1 18       	sub	r14, r1
    3150:	f1 0a       	sbc	r15, r17
    3152:	43 0b       	sbc	r20, r19
    3154:	56 0b       	sbc	r21, r22
    3156:	c9 0b       	sbc	r28, r25
    3158:	d0 09       	sbc	r29, r0
    315a:	c0 f7       	brcc	.-16     	; 0x314c <__ftoa_engine+0x10a>
    315c:	e1 0c       	add	r14, r1
    315e:	f1 1e       	adc	r15, r17
    3160:	43 1f       	adc	r20, r19
    3162:	56 1f       	adc	r21, r22
    3164:	c9 1f       	adc	r28, r25
    3166:	d0 1d       	adc	r29, r0
    3168:	7e f4       	brtc	.+30     	; 0x3188 <__ftoa_engine+0x146>
    316a:	70 33       	cpi	r23, 0x30	; 48
    316c:	11 f4       	brne	.+4      	; 0x3172 <__ftoa_engine+0x130>
    316e:	8a 95       	dec	r24
    3170:	e6 cf       	rjmp	.-52     	; 0x313e <__ftoa_engine+0xfc>
    3172:	e8 94       	clt
    3174:	01 50       	subi	r16, 0x01	; 1
    3176:	30 f0       	brcs	.+12     	; 0x3184 <__ftoa_engine+0x142>
    3178:	08 0f       	add	r16, r24
    317a:	0a f4       	brpl	.+2      	; 0x317e <__ftoa_engine+0x13c>
    317c:	00 27       	eor	r16, r16
    317e:	02 17       	cp	r16, r18
    3180:	08 f4       	brcc	.+2      	; 0x3184 <__ftoa_engine+0x142>
    3182:	20 2f       	mov	r18, r16
    3184:	23 95       	inc	r18
    3186:	02 2f       	mov	r16, r18
    3188:	7a 33       	cpi	r23, 0x3A	; 58
    318a:	28 f0       	brcs	.+10     	; 0x3196 <__ftoa_engine+0x154>
    318c:	79 e3       	ldi	r23, 0x39	; 57
    318e:	7d 93       	st	X+, r23
    3190:	2a 95       	dec	r18
    3192:	e9 f7       	brne	.-6      	; 0x318e <__ftoa_engine+0x14c>
    3194:	10 c0       	rjmp	.+32     	; 0x31b6 <__ftoa_engine+0x174>
    3196:	7d 93       	st	X+, r23
    3198:	2a 95       	dec	r18
    319a:	89 f6       	brne	.-94     	; 0x313e <__ftoa_engine+0xfc>
    319c:	06 94       	lsr	r0
    319e:	97 95       	ror	r25
    31a0:	67 95       	ror	r22
    31a2:	37 95       	ror	r19
    31a4:	17 95       	ror	r17
    31a6:	17 94       	ror	r1
    31a8:	e1 18       	sub	r14, r1
    31aa:	f1 0a       	sbc	r15, r17
    31ac:	43 0b       	sbc	r20, r19
    31ae:	56 0b       	sbc	r21, r22
    31b0:	c9 0b       	sbc	r28, r25
    31b2:	d0 09       	sbc	r29, r0
    31b4:	98 f0       	brcs	.+38     	; 0x31dc <__ftoa_engine+0x19a>
    31b6:	23 95       	inc	r18
    31b8:	7e 91       	ld	r23, -X
    31ba:	73 95       	inc	r23
    31bc:	7a 33       	cpi	r23, 0x3A	; 58
    31be:	08 f0       	brcs	.+2      	; 0x31c2 <__ftoa_engine+0x180>
    31c0:	70 e3       	ldi	r23, 0x30	; 48
    31c2:	7c 93       	st	X, r23
    31c4:	20 13       	cpse	r18, r16
    31c6:	b8 f7       	brcc	.-18     	; 0x31b6 <__ftoa_engine+0x174>
    31c8:	7e 91       	ld	r23, -X
    31ca:	70 61       	ori	r23, 0x10	; 16
    31cc:	7d 93       	st	X+, r23
    31ce:	30 f0       	brcs	.+12     	; 0x31dc <__ftoa_engine+0x19a>
    31d0:	83 95       	inc	r24
    31d2:	71 e3       	ldi	r23, 0x31	; 49
    31d4:	7d 93       	st	X+, r23
    31d6:	70 e3       	ldi	r23, 0x30	; 48
    31d8:	2a 95       	dec	r18
    31da:	e1 f7       	brne	.-8      	; 0x31d4 <__ftoa_engine+0x192>
    31dc:	11 24       	eor	r1, r1
    31de:	ef 90       	pop	r14
    31e0:	ff 90       	pop	r15
    31e2:	0f 91       	pop	r16
    31e4:	1f 91       	pop	r17
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	99 27       	eor	r25, r25
    31ec:	87 fd       	sbrc	r24, 7
    31ee:	90 95       	com	r25
    31f0:	08 95       	ret

000031f2 <isspace>:
    31f2:	91 11       	cpse	r25, r1
    31f4:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__ctype_isfalse>
    31f8:	80 32       	cpi	r24, 0x20	; 32
    31fa:	19 f0       	breq	.+6      	; 0x3202 <isspace+0x10>
    31fc:	89 50       	subi	r24, 0x09	; 9
    31fe:	85 50       	subi	r24, 0x05	; 5
    3200:	c8 f7       	brcc	.-14     	; 0x31f4 <isspace+0x2>
    3202:	08 95       	ret

00003204 <tolower>:
    3204:	91 11       	cpse	r25, r1
    3206:	08 95       	ret
    3208:	81 54       	subi	r24, 0x41	; 65
    320a:	8a 51       	subi	r24, 0x1A	; 26
    320c:	08 f4       	brcc	.+2      	; 0x3210 <tolower+0xc>
    320e:	80 5e       	subi	r24, 0xE0	; 224
    3210:	85 5a       	subi	r24, 0xA5	; 165
    3212:	08 95       	ret

00003214 <strchr_P>:
    3214:	fc 01       	movw	r30, r24
    3216:	05 90       	lpm	r0, Z+
    3218:	06 16       	cp	r0, r22
    321a:	21 f0       	breq	.+8      	; 0x3224 <strchr_P+0x10>
    321c:	00 20       	and	r0, r0
    321e:	d9 f7       	brne	.-10     	; 0x3216 <strchr_P+0x2>
    3220:	c0 01       	movw	r24, r0
    3222:	08 95       	ret
    3224:	31 97       	sbiw	r30, 0x01	; 1
    3226:	cf 01       	movw	r24, r30
    3228:	08 95       	ret

0000322a <strnlen_P>:
    322a:	fc 01       	movw	r30, r24
    322c:	05 90       	lpm	r0, Z+
    322e:	61 50       	subi	r22, 0x01	; 1
    3230:	70 40       	sbci	r23, 0x00	; 0
    3232:	01 10       	cpse	r0, r1
    3234:	d8 f7       	brcc	.-10     	; 0x322c <strnlen_P+0x2>
    3236:	80 95       	com	r24
    3238:	90 95       	com	r25
    323a:	8e 0f       	add	r24, r30
    323c:	9f 1f       	adc	r25, r31
    323e:	08 95       	ret

00003240 <strcmp>:
    3240:	fb 01       	movw	r30, r22
    3242:	dc 01       	movw	r26, r24
    3244:	8d 91       	ld	r24, X+
    3246:	01 90       	ld	r0, Z+
    3248:	80 19       	sub	r24, r0
    324a:	01 10       	cpse	r0, r1
    324c:	d9 f3       	breq	.-10     	; 0x3244 <strcmp+0x4>
    324e:	99 0b       	sbc	r25, r25
    3250:	08 95       	ret

00003252 <strcpy>:
    3252:	fb 01       	movw	r30, r22
    3254:	dc 01       	movw	r26, r24
    3256:	01 90       	ld	r0, Z+
    3258:	0d 92       	st	X+, r0
    325a:	00 20       	and	r0, r0
    325c:	e1 f7       	brne	.-8      	; 0x3256 <strcpy+0x4>
    325e:	08 95       	ret

00003260 <strnlen>:
    3260:	fc 01       	movw	r30, r24
    3262:	61 50       	subi	r22, 0x01	; 1
    3264:	70 40       	sbci	r23, 0x00	; 0
    3266:	01 90       	ld	r0, Z+
    3268:	01 10       	cpse	r0, r1
    326a:	d8 f7       	brcc	.-10     	; 0x3262 <strnlen+0x2>
    326c:	80 95       	com	r24
    326e:	90 95       	com	r25
    3270:	8e 0f       	add	r24, r30
    3272:	9f 1f       	adc	r25, r31
    3274:	08 95       	ret

00003276 <fgetc>:
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	ec 01       	movw	r28, r24
    327c:	2b 81       	ldd	r18, Y+3	; 0x03
    327e:	20 ff       	sbrs	r18, 0
    3280:	33 c0       	rjmp	.+102    	; 0x32e8 <fgetc+0x72>
    3282:	26 ff       	sbrs	r18, 6
    3284:	0a c0       	rjmp	.+20     	; 0x329a <fgetc+0x24>
    3286:	2f 7b       	andi	r18, 0xBF	; 191
    3288:	2b 83       	std	Y+3, r18	; 0x03
    328a:	8e 81       	ldd	r24, Y+6	; 0x06
    328c:	9f 81       	ldd	r25, Y+7	; 0x07
    328e:	01 96       	adiw	r24, 0x01	; 1
    3290:	8e 83       	std	Y+6, r24	; 0x06
    3292:	9f 83       	std	Y+7, r25	; 0x07
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	29 c0       	rjmp	.+82     	; 0x32ec <fgetc+0x76>
    329a:	22 ff       	sbrs	r18, 2
    329c:	0f c0       	rjmp	.+30     	; 0x32bc <fgetc+0x46>
    329e:	e8 81       	ld	r30, Y
    32a0:	f9 81       	ldd	r31, Y+1	; 0x01
    32a2:	80 81       	ld	r24, Z
    32a4:	08 2e       	mov	r0, r24
    32a6:	00 0c       	add	r0, r0
    32a8:	99 0b       	sbc	r25, r25
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	19 f4       	brne	.+6      	; 0x32b4 <fgetc+0x3e>
    32ae:	20 62       	ori	r18, 0x20	; 32
    32b0:	2b 83       	std	Y+3, r18	; 0x03
    32b2:	1a c0       	rjmp	.+52     	; 0x32e8 <fgetc+0x72>
    32b4:	31 96       	adiw	r30, 0x01	; 1
    32b6:	e8 83       	st	Y, r30
    32b8:	f9 83       	std	Y+1, r31	; 0x01
    32ba:	0e c0       	rjmp	.+28     	; 0x32d8 <fgetc+0x62>
    32bc:	ea 85       	ldd	r30, Y+10	; 0x0a
    32be:	fb 85       	ldd	r31, Y+11	; 0x0b
    32c0:	09 95       	icall
    32c2:	97 ff       	sbrs	r25, 7
    32c4:	09 c0       	rjmp	.+18     	; 0x32d8 <fgetc+0x62>
    32c6:	2b 81       	ldd	r18, Y+3	; 0x03
    32c8:	01 96       	adiw	r24, 0x01	; 1
    32ca:	11 f0       	breq	.+4      	; 0x32d0 <fgetc+0x5a>
    32cc:	80 e2       	ldi	r24, 0x20	; 32
    32ce:	01 c0       	rjmp	.+2      	; 0x32d2 <fgetc+0x5c>
    32d0:	80 e1       	ldi	r24, 0x10	; 16
    32d2:	82 2b       	or	r24, r18
    32d4:	8b 83       	std	Y+3, r24	; 0x03
    32d6:	08 c0       	rjmp	.+16     	; 0x32e8 <fgetc+0x72>
    32d8:	2e 81       	ldd	r18, Y+6	; 0x06
    32da:	3f 81       	ldd	r19, Y+7	; 0x07
    32dc:	2f 5f       	subi	r18, 0xFF	; 255
    32de:	3f 4f       	sbci	r19, 0xFF	; 255
    32e0:	2e 83       	std	Y+6, r18	; 0x06
    32e2:	3f 83       	std	Y+7, r19	; 0x07
    32e4:	99 27       	eor	r25, r25
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <fgetc+0x76>
    32e8:	8f ef       	ldi	r24, 0xFF	; 255
    32ea:	9f ef       	ldi	r25, 0xFF	; 255
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	08 95       	ret

000032f2 <fputc>:
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	fb 01       	movw	r30, r22
    32fc:	23 81       	ldd	r18, Z+3	; 0x03
    32fe:	21 fd       	sbrc	r18, 1
    3300:	03 c0       	rjmp	.+6      	; 0x3308 <fputc+0x16>
    3302:	8f ef       	ldi	r24, 0xFF	; 255
    3304:	9f ef       	ldi	r25, 0xFF	; 255
    3306:	2c c0       	rjmp	.+88     	; 0x3360 <fputc+0x6e>
    3308:	22 ff       	sbrs	r18, 2
    330a:	16 c0       	rjmp	.+44     	; 0x3338 <fputc+0x46>
    330c:	46 81       	ldd	r20, Z+6	; 0x06
    330e:	57 81       	ldd	r21, Z+7	; 0x07
    3310:	24 81       	ldd	r18, Z+4	; 0x04
    3312:	35 81       	ldd	r19, Z+5	; 0x05
    3314:	42 17       	cp	r20, r18
    3316:	53 07       	cpc	r21, r19
    3318:	44 f4       	brge	.+16     	; 0x332a <fputc+0x38>
    331a:	a0 81       	ld	r26, Z
    331c:	b1 81       	ldd	r27, Z+1	; 0x01
    331e:	9d 01       	movw	r18, r26
    3320:	2f 5f       	subi	r18, 0xFF	; 255
    3322:	3f 4f       	sbci	r19, 0xFF	; 255
    3324:	20 83       	st	Z, r18
    3326:	31 83       	std	Z+1, r19	; 0x01
    3328:	8c 93       	st	X, r24
    332a:	26 81       	ldd	r18, Z+6	; 0x06
    332c:	37 81       	ldd	r19, Z+7	; 0x07
    332e:	2f 5f       	subi	r18, 0xFF	; 255
    3330:	3f 4f       	sbci	r19, 0xFF	; 255
    3332:	26 83       	std	Z+6, r18	; 0x06
    3334:	37 83       	std	Z+7, r19	; 0x07
    3336:	14 c0       	rjmp	.+40     	; 0x3360 <fputc+0x6e>
    3338:	8b 01       	movw	r16, r22
    333a:	ec 01       	movw	r28, r24
    333c:	fb 01       	movw	r30, r22
    333e:	00 84       	ldd	r0, Z+8	; 0x08
    3340:	f1 85       	ldd	r31, Z+9	; 0x09
    3342:	e0 2d       	mov	r30, r0
    3344:	09 95       	icall
    3346:	89 2b       	or	r24, r25
    3348:	e1 f6       	brne	.-72     	; 0x3302 <fputc+0x10>
    334a:	d8 01       	movw	r26, r16
    334c:	16 96       	adiw	r26, 0x06	; 6
    334e:	8d 91       	ld	r24, X+
    3350:	9c 91       	ld	r25, X
    3352:	17 97       	sbiw	r26, 0x07	; 7
    3354:	01 96       	adiw	r24, 0x01	; 1
    3356:	16 96       	adiw	r26, 0x06	; 6
    3358:	8d 93       	st	X+, r24
    335a:	9c 93       	st	X, r25
    335c:	17 97       	sbiw	r26, 0x07	; 7
    335e:	ce 01       	movw	r24, r28
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
    3368:	08 95       	ret

0000336a <sprintf>:
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	2e 97       	sbiw	r28, 0x0e	; 14
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0d 89       	ldd	r16, Y+21	; 0x15
    337e:	1e 89       	ldd	r17, Y+22	; 0x16
    3380:	86 e0       	ldi	r24, 0x06	; 6
    3382:	8c 83       	std	Y+4, r24	; 0x04
    3384:	09 83       	std	Y+1, r16	; 0x01
    3386:	1a 83       	std	Y+2, r17	; 0x02
    3388:	8f ef       	ldi	r24, 0xFF	; 255
    338a:	9f e7       	ldi	r25, 0x7F	; 127
    338c:	8d 83       	std	Y+5, r24	; 0x05
    338e:	9e 83       	std	Y+6, r25	; 0x06
    3390:	ae 01       	movw	r20, r28
    3392:	47 5e       	subi	r20, 0xE7	; 231
    3394:	5f 4f       	sbci	r21, 0xFF	; 255
    3396:	6f 89       	ldd	r22, Y+23	; 0x17
    3398:	78 8d       	ldd	r23, Y+24	; 0x18
    339a:	ce 01       	movw	r24, r28
    339c:	01 96       	adiw	r24, 0x01	; 1
    339e:	0e 94 26 13 	call	0x264c	; 0x264c <vfprintf>
    33a2:	ef 81       	ldd	r30, Y+7	; 0x07
    33a4:	f8 85       	ldd	r31, Y+8	; 0x08
    33a6:	e0 0f       	add	r30, r16
    33a8:	f1 1f       	adc	r31, r17
    33aa:	10 82       	st	Z, r1
    33ac:	2e 96       	adiw	r28, 0x0e	; 14
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	df 91       	pop	r29
    33b4:	cf 91       	pop	r28
    33b6:	1f 91       	pop	r17
    33b8:	0f 91       	pop	r16
    33ba:	08 95       	ret

000033bc <ungetc>:
    33bc:	fb 01       	movw	r30, r22
    33be:	23 81       	ldd	r18, Z+3	; 0x03
    33c0:	20 ff       	sbrs	r18, 0
    33c2:	12 c0       	rjmp	.+36     	; 0x33e8 <ungetc+0x2c>
    33c4:	26 fd       	sbrc	r18, 6
    33c6:	10 c0       	rjmp	.+32     	; 0x33e8 <ungetc+0x2c>
    33c8:	8f 3f       	cpi	r24, 0xFF	; 255
    33ca:	3f ef       	ldi	r19, 0xFF	; 255
    33cc:	93 07       	cpc	r25, r19
    33ce:	61 f0       	breq	.+24     	; 0x33e8 <ungetc+0x2c>
    33d0:	82 83       	std	Z+2, r24	; 0x02
    33d2:	2f 7d       	andi	r18, 0xDF	; 223
    33d4:	20 64       	ori	r18, 0x40	; 64
    33d6:	23 83       	std	Z+3, r18	; 0x03
    33d8:	26 81       	ldd	r18, Z+6	; 0x06
    33da:	37 81       	ldd	r19, Z+7	; 0x07
    33dc:	21 50       	subi	r18, 0x01	; 1
    33de:	31 09       	sbc	r19, r1
    33e0:	26 83       	std	Z+6, r18	; 0x06
    33e2:	37 83       	std	Z+7, r19	; 0x07
    33e4:	99 27       	eor	r25, r25
    33e6:	08 95       	ret
    33e8:	8f ef       	ldi	r24, 0xFF	; 255
    33ea:	9f ef       	ldi	r25, 0xFF	; 255
    33ec:	08 95       	ret

000033ee <__ultoa_invert>:
    33ee:	fa 01       	movw	r30, r20
    33f0:	aa 27       	eor	r26, r26
    33f2:	28 30       	cpi	r18, 0x08	; 8
    33f4:	51 f1       	breq	.+84     	; 0x344a <__ultoa_invert+0x5c>
    33f6:	20 31       	cpi	r18, 0x10	; 16
    33f8:	81 f1       	breq	.+96     	; 0x345a <__ultoa_invert+0x6c>
    33fa:	e8 94       	clt
    33fc:	6f 93       	push	r22
    33fe:	6e 7f       	andi	r22, 0xFE	; 254
    3400:	6e 5f       	subi	r22, 0xFE	; 254
    3402:	7f 4f       	sbci	r23, 0xFF	; 255
    3404:	8f 4f       	sbci	r24, 0xFF	; 255
    3406:	9f 4f       	sbci	r25, 0xFF	; 255
    3408:	af 4f       	sbci	r26, 0xFF	; 255
    340a:	b1 e0       	ldi	r27, 0x01	; 1
    340c:	3e d0       	rcall	.+124    	; 0x348a <__ultoa_invert+0x9c>
    340e:	b4 e0       	ldi	r27, 0x04	; 4
    3410:	3c d0       	rcall	.+120    	; 0x348a <__ultoa_invert+0x9c>
    3412:	67 0f       	add	r22, r23
    3414:	78 1f       	adc	r23, r24
    3416:	89 1f       	adc	r24, r25
    3418:	9a 1f       	adc	r25, r26
    341a:	a1 1d       	adc	r26, r1
    341c:	68 0f       	add	r22, r24
    341e:	79 1f       	adc	r23, r25
    3420:	8a 1f       	adc	r24, r26
    3422:	91 1d       	adc	r25, r1
    3424:	a1 1d       	adc	r26, r1
    3426:	6a 0f       	add	r22, r26
    3428:	71 1d       	adc	r23, r1
    342a:	81 1d       	adc	r24, r1
    342c:	91 1d       	adc	r25, r1
    342e:	a1 1d       	adc	r26, r1
    3430:	20 d0       	rcall	.+64     	; 0x3472 <__ultoa_invert+0x84>
    3432:	09 f4       	brne	.+2      	; 0x3436 <__ultoa_invert+0x48>
    3434:	68 94       	set
    3436:	3f 91       	pop	r19
    3438:	2a e0       	ldi	r18, 0x0A	; 10
    343a:	26 9f       	mul	r18, r22
    343c:	11 24       	eor	r1, r1
    343e:	30 19       	sub	r19, r0
    3440:	30 5d       	subi	r19, 0xD0	; 208
    3442:	31 93       	st	Z+, r19
    3444:	de f6       	brtc	.-74     	; 0x33fc <__ultoa_invert+0xe>
    3446:	cf 01       	movw	r24, r30
    3448:	08 95       	ret
    344a:	46 2f       	mov	r20, r22
    344c:	47 70       	andi	r20, 0x07	; 7
    344e:	40 5d       	subi	r20, 0xD0	; 208
    3450:	41 93       	st	Z+, r20
    3452:	b3 e0       	ldi	r27, 0x03	; 3
    3454:	0f d0       	rcall	.+30     	; 0x3474 <__ultoa_invert+0x86>
    3456:	c9 f7       	brne	.-14     	; 0x344a <__ultoa_invert+0x5c>
    3458:	f6 cf       	rjmp	.-20     	; 0x3446 <__ultoa_invert+0x58>
    345a:	46 2f       	mov	r20, r22
    345c:	4f 70       	andi	r20, 0x0F	; 15
    345e:	40 5d       	subi	r20, 0xD0	; 208
    3460:	4a 33       	cpi	r20, 0x3A	; 58
    3462:	18 f0       	brcs	.+6      	; 0x346a <__ultoa_invert+0x7c>
    3464:	49 5d       	subi	r20, 0xD9	; 217
    3466:	31 fd       	sbrc	r19, 1
    3468:	40 52       	subi	r20, 0x20	; 32
    346a:	41 93       	st	Z+, r20
    346c:	02 d0       	rcall	.+4      	; 0x3472 <__ultoa_invert+0x84>
    346e:	a9 f7       	brne	.-22     	; 0x345a <__ultoa_invert+0x6c>
    3470:	ea cf       	rjmp	.-44     	; 0x3446 <__ultoa_invert+0x58>
    3472:	b4 e0       	ldi	r27, 0x04	; 4
    3474:	a6 95       	lsr	r26
    3476:	97 95       	ror	r25
    3478:	87 95       	ror	r24
    347a:	77 95       	ror	r23
    347c:	67 95       	ror	r22
    347e:	ba 95       	dec	r27
    3480:	c9 f7       	brne	.-14     	; 0x3474 <__ultoa_invert+0x86>
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	61 05       	cpc	r22, r1
    3486:	71 05       	cpc	r23, r1
    3488:	08 95       	ret
    348a:	9b 01       	movw	r18, r22
    348c:	ac 01       	movw	r20, r24
    348e:	0a 2e       	mov	r0, r26
    3490:	06 94       	lsr	r0
    3492:	57 95       	ror	r21
    3494:	47 95       	ror	r20
    3496:	37 95       	ror	r19
    3498:	27 95       	ror	r18
    349a:	ba 95       	dec	r27
    349c:	c9 f7       	brne	.-14     	; 0x3490 <__ultoa_invert+0xa2>
    349e:	62 0f       	add	r22, r18
    34a0:	73 1f       	adc	r23, r19
    34a2:	84 1f       	adc	r24, r20
    34a4:	95 1f       	adc	r25, r21
    34a6:	a0 1d       	adc	r26, r0
    34a8:	08 95       	ret

000034aa <__ctype_isfalse>:
    34aa:	99 27       	eor	r25, r25
    34ac:	88 27       	eor	r24, r24

000034ae <__ctype_istrue>:
    34ae:	08 95       	ret

000034b0 <_exit>:
    34b0:	f8 94       	cli

000034b2 <__stop_program>:
    34b2:	ff cf       	rjmp	.-2      	; 0x34b2 <__stop_program>
